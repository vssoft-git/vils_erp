
&Вместо("ПриИзмененииСпособаДоставки")
Процедура ВИЛС_ПриИзмененииСпособаДоставки(ЭлементыФормы, ДокОбъект)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат
	КонецЕсли;
	
	ЭтоДоставкаНаНашСклад = ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(ДокОбъект.Ссылка);
	
	РеквизитыДоставки = РеквизитыДоставки(ДокОбъект);
	
	ДопИнфоИзмененоПользователем = ДоставкаТоваровКлиентСервер.ДопИнфоИзмененоПользователем(ЭлементыФормы, ДокОбъект);
	
	ЗаполнитьРеквизитыПоСпособуДоставки(ЭлементыФормы, РеквизитыДоставки, ДопИнфоИзмененоПользователем);
	
	Если (РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу            		// begin fix Suetin 21.08.2019 12:23:59
			Или РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада  
			Или РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
		И ЗначениеЗаполнено(ДокОбъект.Контрагент) Тогда	
		ЗаполнитьСписокВыбораАдресовПеревозчикаПоКонтрагенту(ЭлементыФормы, ДокОбъект.Контрагент);                               
		ЗаполнитьРеквизитыПоПеревозчику(ЭлементыФормы, РеквизитыДоставки, ДопИнфоИзмененоПользователем);			
	ИначеЕсли (РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя
			Или РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)
		И ЗначениеЗаполнено(ДокОбъект.Контрагент) Тогда	
		ЗаполнитьСписокВыбораАдресовКонтрагентаПоКонтрагенту(ЭлементыФормы, ДокОбъект.Контрагент);                               
		ЗаполнитьРеквизитыПоПеревозчику(ЭлементыФормы, РеквизитыДоставки, ДопИнфоИзмененоПользователем);			
	КонецЕсли;                                                                                                      // end fix Suetin 21.08.2019 12:24:07
	Если (РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
		    Или РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада   	// fix Suetin 21.08.2019 12:25:42
			Или РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
		И ЗначениеЗаполнено(РеквизитыДоставки.ПеревозчикПартнер) Тогда
		ЗаполнитьСписокВыбораАдресовПеревозчика(ЭлементыФормы, РеквизитыДоставки);
		ЗаполнитьРеквизитыПоПеревозчику(ЭлементыФормы, РеквизитыДоставки, ДопИнфоИзмененоПользователем);  
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокОбъект, РеквизитыДоставки);
	
	ЭтоДоговорСоглашение = ТипЗнч(ДокОбъект.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		Или ТипЗнч(ДокОбъект.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками");
	
	Если ЭлементыФормы.Найти("СтраницыДоставки") <> Неопределено Тогда
		РаспоряжениеПоСоглашению = ЭтоДоставкаНаНашСклад И ЭтоРаспоряжениеПоСоглашению(ДокОбъект);
		ДоставкаОпределенаВДоговоре = ЭтоДоставкаНаНашСклад И ДоставкаОпределенаВДоговоре(ДокОбъект);
		
		РаспоряжениеПоДоговору = Не ЭтоДоговорСоглашение И ДоставкаОпределенаВДоговоре;
		
		ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(ЭлементыФормы,
			ДокОбъект.СпособДоставки,
			ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"),
			РаспоряжениеПоСоглашению,
			РаспоряжениеПоДоговору);
	КонецЕсли;
	
	ОсобыеУсловияПеревозкиУстановитьДоступность(ЭлементыФормы, ДокОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораАдресовПеревозчикаПоКонтрагенту(ЭлементыФормы, Контрагент)	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭлементыФормы.Найти("АдресДоставкиПеревозчика") <> Неопределено Тогда
		ИмяЭлементаАдрес = "АдресДоставкиПеревозчика";
	Иначе
		Возврат;
	КонецЕсли;
	
	ПеревозчикПартнер = Контрагент;
	
	Если Не ЗначениеЗаполнено(ПеревозчикПартнер) Тогда
		ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора.Очистить();
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	
	АдресаПолучателяИзКонтактнойИнформации = АдресаПолучателяИзКонтактнойИнформации(ПеревозчикПартнер);
	Для Каждого Стр Из АдресаПолучателяИзКонтактнойИнформации Цикл
		НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
		Если НайденныйЭлементСЗ = Неопределено Тогда
			СтруктураВыбора = СтруктураВыбора();
			ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
			СписокВыбора.Добавить(СтруктураВыбора, Стр.Вид + ": " + Стр.АдресДоставки);
		ИначеЕсли Не ЗначениеЗаполнено(НайденныйЭлементСЗ.Значение.АдресДоставкиЗначенияПолей) Тогда
			НайденныйЭлементСЗ.Значение.АдресДоставкиЗначенияПолей = Стр.АдресДоставкиЗначенияПолей;
		КонецЕсли;
	КонецЦикла;
	
	СкопироватьСписокЗначений(ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора, СписокВыбора)	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораАдресовКонтрагентаПоКонтрагенту(ЭлементыФормы, Контрагент)	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭлементыФормы.Найти("АдресПоставщика") <> Неопределено Тогда
		ИмяЭлементаАдрес = "АдресПоставщика";
	Иначе
		Возврат;
	КонецЕсли;
	
	ПеревозчикПартнер = Контрагент;
	
	Если Не ЗначениеЗаполнено(ПеревозчикПартнер) Тогда
		ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора.Очистить();
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	
	АдресаПолучателяИзКонтактнойИнформации = АдресаПолучателяИзКонтактнойИнформации(ПеревозчикПартнер);
	Для Каждого Стр Из АдресаПолучателяИзКонтактнойИнформации Цикл
		НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
		Если НайденныйЭлементСЗ = Неопределено Тогда
			СтруктураВыбора = СтруктураВыбора();
			ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
			СписокВыбора.Добавить(СтруктураВыбора, Стр.Вид + ": " + Стр.АдресДоставки);
		ИначеЕсли Не ЗначениеЗаполнено(НайденныйЭлементСЗ.Значение.АдресДоставкиЗначенияПолей) Тогда
			НайденныйЭлементСЗ.Значение.АдресДоставкиЗначенияПолей = Стр.АдресДоставкиЗначенияПолей;
		КонецЕсли;
	КонецЦикла;
	
	СкопироватьСписокЗначений(ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора, СписокВыбора)	
КонецПроцедуры


&Вместо("ДоставкаОпределенаВДоговоре")
Функция ВИЛС_ДоставкаОпределенаВДоговоре(ДокОбъект)
	
	Если ДокОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоДоговор  = (ТипЗнч(ДокОбъект.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	
	РаспоряжениеНаДоставкуНаНашСклад = Ложь;
	
	Если ТипЗнч(ДокОбъект) = Тип("ДанныеФормыСтруктура")
		Или ТипЗнч(ДокОбъект) = Тип("Структура") Тогда
		РаспоряжениеНаДоставкуНаНашСклад = ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(ДокОбъект)
			И ДокОбъект.Свойство("Договор")
			И ЗначениеЗаполнено(ДокОбъект.Договор);
	Иначе
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ДокОбъект.Ссылка));
		ЕстьДоговор = ОбщегоНазначения.ЕстьРеквизитОбъекта("Договор", МетаданныеОбъекта);
		
		РаспоряжениеНаДоставкуНаНашСклад = 
			(ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(ДокОбъект)
			 И ЭтоДоговор)
			Или (ЕстьДоговор
				И ЗначениеЗаполнено(ДокОбъект.Договор));
	КонецЕсли;
	
	Если РаспоряжениеНаДоставкуНаНашСклад Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Если ЭтоДоговор Тогда
			СпособДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Ссылка, "СпособДоставки");
		Иначе
			СпособДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Договор, "СпособДоставки");
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
		СпособыДоставки = Новый Массив;

		//Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками") Тогда  // begin fix Suetin 21.08.2019 16:37:27
		//	СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада);
		//КонецЕсли;                                                                                             // end fix Suetin 21.08.2019 16:37:33

		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада);
		//СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи);                // begin fix Suetin 21.08.2019 16:37:49
		//СпособыДоставки.Добавить(Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя);
		//СпособыДоставки.Добавить(Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки);            // end fix Suetin 21.08.2019 16:37:55
		
		ДоставкаИспользуется = СпособыДоставки.Найти(СпособДоставки) <> Неопределено;
		
		Возврат ДоставкаИспользуется;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучательОтправительКонтрагент(ДокОбъект)
	Заполнение = Новый Структура("Контрагент",0);
	ЗаполнитьЗначенияСвойств(Заполнение,ДокОбъект);
	Если Заполнение.Контрагент <> 0 Тогда
		Возврат Новый Структура("ИмяПоля,Значение","Контрагент",ДокОбъект.Контрагент);
	Иначе
		ВызватьИсключение НСтр("ru = 'Получатель (отправитель) - Контрагент не определен.';
								|en = 'Recipient (sender) - Klient is not determined. '");
	КонецЕсли;
КонецФункции

&Вместо("ЗаполнитьСпискиВыбораАдресовПолучателяОтправителя")
Процедура ВИЛС_ЗаполнитьСпискиВыбораАдресовПолучателяОтправителя(ЭлементыФормы, ДокОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолучательОтправитель = ПолучательОтправитель(ДокОбъект).Значение;
		
	Если Не ЗначениеЗаполнено(ПолучательОтправитель) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьСпискиВыбораАдресовПолучателяОтправителя(ЭлементыФормы);
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	ПоследниеРеквизитыДоставкиИзЗаданий = ПоследниеРеквизитыДоставкиИзЗаданий(ПолучательОтправитель);
	Для Каждого Стр Из ПоследниеРеквизитыДоставкиИзЗаданий Цикл
		СтруктураВыбора = СтруктураВыбора();
		ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
		СписокВыбора.Добавить(СтруктураВыбора,Стр.АдресДоставки);
	КонецЦикла;
	
	ПоследниеРеквизитыДоставкиИзРаспоряжений = ПоследниеРеквизитыДоставкиИзРаспоряжений(ДокОбъект.Ссылка, ПолучательОтправитель);
	Для Каждого Стр Из ПоследниеРеквизитыДоставкиИзРаспоряжений Цикл
		НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
		Если НайденныйЭлементСЗ = Неопределено Тогда
			СтруктураВыбора = СтруктураВыбора();
			ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
			СписокВыбора.Добавить(СтруктураВыбора, Стр.АдресДоставки);
		Иначе
			ДозаполнитьПустыеСвойства(НайденныйЭлементСЗ.Значение, Стр);
		КонецЕсли;
	КонецЦикла;
	
	Если (ТипЗнч(ПолучательОтправитель) <> Тип("СправочникСсылка.СтруктураПредприятия")
		И ТипЗнч(ПолучательОтправитель) <> Тип("Строка")) Тогда
		
		АдресаПолучателяИзКонтактнойИнформации = АдресаПолучателяИзКонтактнойИнформации(ПолучательОтправитель);
		Для Каждого Стр Из АдресаПолучателяИзКонтактнойИнформации Цикл
			НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
			Если НайденныйЭлементСЗ = Неопределено Тогда
				СтруктураВыбора = СтруктураВыбора();
				ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
				СписокВыбора.Добавить(СтруктураВыбора, Стр.Вид + ": " + Стр.АдресДоставки);
			Иначе
				ДозаполнитьПустыеСвойства(НайденныйЭлементСЗ.Значение, Стр);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	// begin fix Suetin 21.08.2019 17:33:58
	ПолучательОтправитель = ПолучательОтправительКонтрагент(ДокОбъект).Значение;
	
	Если (ТипЗнч(ПолучательОтправитель) <> Тип("СправочникСсылка.СтруктураПредприятия")
		И ТипЗнч(ПолучательОтправитель) <> Тип("Строка")) Тогда
		
		АдресаПолучателяИзКонтактнойИнформации = АдресаПолучателяИзКонтактнойИнформации(ПолучательОтправитель);
		Для Каждого Стр Из АдресаПолучателяИзКонтактнойИнформации Цикл
			НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
			Если НайденныйЭлементСЗ = Неопределено Тогда
				СтруктураВыбора = СтруктураВыбора();
				ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
				СписокВыбора.Добавить(СтруктураВыбора, Стр.Вид + ": " + Стр.АдресДоставки);
			Иначе
				ДозаполнитьПустыеСвойства(НайденныйЭлементСЗ.Значение, Стр);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	// end fix Suetin 21.08.2019 17:34:48
	Если ЭлементыФормы.Найти("АдресДоставкиСамовывоз") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиСамовывоз.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиПолучателя.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя1") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиПолучателя1.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя2") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиПолучателя2.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресПоставщика") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресПоставщика.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресПункта") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресПункта.СписокВыбора, СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

&Вместо("ЗаписатьТоварыКДоставке")
Процедура ВИЛС_ЗаписатьТоварыКДоставке(ТоварыРаспоряжений, ТЧРаспоряжения, ЗаданиеНаПеревозку)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.Склад,
	|	ИСТИНА КАК ВсеТовары
	|ПОМЕСТИТЬ ПолностьюДоставляемыеРаспоряжения
	|ИЗ
	|	&ПолностьюДоставляемыеРаспоряжения КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДоставке.Распоряжение,
	|	ТоварыКДоставке.Склад,
	|	ТоварыКДоставке.Номенклатура,
	|	ТоварыКДоставке.Характеристика,
	|	ТоварыКДоставке.Назначение,
	|	ТоварыКДоставке.Серия,
	|	ТоварыКДоставке.Количество,
	|	ТоварыКДоставке.Вес,            		// begin fix Suetin 23.08.2019 11:43:05
	|	ТоварыКДоставке.Объем,          		// end fix Suetin 23.08.2019 11:43:09
	|	ТоварыКДоставке.ВсеТовары,
	|	ТоварыКДоставке.ПолучательОтправитель
	|ПОМЕСТИТЬ ВТТоварыЗадания
	|ИЗ
	|	&ТоварыКДоставке КАК ТоварыКДоставке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТТоварыЗадания.Распоряжение,
	|	ВТТоварыЗадания.Склад,
	|	ВТТоварыЗадания.ВсеТовары
	|ПОМЕСТИТЬ РаспоряженияЗадания
	|ИЗ
	|	ВТТоварыЗадания КАК ВТТоварыЗадания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.ПолучательОтправитель,
	|	Т.Номенклатура,
	|	Т.Склад,
	|	Т.Назначение,
	|	Т.Характеристика,
	|	Т.Серия,
	|	СУММА(Т.Количество) КАК Количество,
	|	СУММА(Т.Вес) КАК Вес,                  	// begin fix Suetin 23.08.2019 11:44:07
	|	СУММА(Т.Объем) КАК Объем,              	// end fix Suetin 23.08.2019 11:44:11
	|	МАКСИМУМ(Т.ВсеТовары) КАК ВсеТовары
	|ПОМЕСТИТЬ ТоварыЗадания
	|ИЗ
	|	ВТТоварыЗадания КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.ПолучательОтправитель,
	|	Т.Номенклатура,
	|	Т.Склад,
	|	Т.Назначение,
	|	Т.Характеристика,
	|	Т.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.Склад
	|ПОМЕСТИТЬ ИзмененныеРаспоряжения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКДоставке.Распоряжение КАК Распоряжение,
	|		ТоварыКДоставке.Склад КАК Склад,
	|		ТоварыКДоставке.Номенклатура КАК Номенклатура,
	|		ТоварыКДоставке.Характеристика КАК Характеристика,
	|		ТоварыКДоставке.Назначение КАК Назначение,
	|		ТоварыКДоставке.Серия КАК Серия,
	|		ТоварыКДоставке.Количество КАК Количество,
	|		ТоварыКДоставке.Вес КАК Вес,                 // begin fix Suetin 23.08.2019 11:45:35
	|		ТоварыКДоставке.Объем КАК Объем,             // end fix Suetin 23.08.2019 11:45:39
	|		1 КАК СчетИзмененныхСтрок
	|	ИЗ
	|		РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|	ГДЕ
	|		ТоварыКДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыЗадания.Распоряжение,
	|		ТоварыЗадания.Склад,
	|		ТоварыЗадания.Номенклатура,
	|		ТоварыЗадания.Характеристика,
	|		ТоварыЗадания.Назначение,
	|		ТоварыЗадания.Серия,
	|		-ТоварыЗадания.Количество,
	|		-ТоварыЗадания.Вес КАК Вес,                 // begin fix Suetin 23.08.2019 11:45:35
	|		-ТоварыЗадания.Объем КАК Объем,             // end fix Suetin 23.08.2019 11:45:39
	|		-1
	|	ИЗ
	|		ТоварыЗадания КАК ТоварыЗадания) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.Характеристика,
	|	Т.Назначение,
	|	Т.Серия,
	|	Т.Номенклатура,
	|	Т.Склад
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Т.Количество) <> 0
	|		ИЛИ СУММА(Т.Вес) <> 0                       // begin fix Suetin 23.08.2019 11:47:21
	|		ИЛИ СУММА(Т.Объем) <> 0                     // end fix Suetin 23.08.2019 11:47:25
	|		ИЛИ СУММА(Т.СчетИзмененныхСтрок) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзмененныеРаспоряжения.Распоряжение,
	|	ИзмененныеРаспоряжения.Склад
	|ПОМЕСТИТЬ ИзмененныеРаспоряженияСвернутые
	|ИЗ
	|	ИзмененныеРаспоряжения КАК ИзмененныеРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	|	ИзмененныеРаспоряженияСвернутые.Распоряжение,
	|	ИзмененныеРаспоряженияСвернутые.Склад,
	|	ТоварыЗадания.Номенклатура,
	|	ТоварыЗадания.Характеристика,
	|	ТоварыЗадания.Назначение,
	|	ТоварыЗадания.Серия,
	|	ТоварыЗадания.Количество,
	|	ТоварыЗадания.Вес,                               // begin fix Suetin 23.08.2019 11:48:27
	|	ТоварыЗадания.Объем,                             // end fix Suetin 23.08.2019 11:48:32
	|	ЕСТЬNULL(ПолностьюДоставляемыеРаспоряжения.ВсеТовары, ТоварыЗадания.ВсеТовары) КАК ВсеТовары,
	|	ТоварыЗадания.ПолучательОтправитель,
	|	ВЫБОР
	|		КОГДА ТоварыЗадания.Распоряжение ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удалить
	|ИЗ
	|	ИзмененныеРаспоряженияСвернутые КАК ИзмененныеРаспоряженияСвернутые
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗадания КАК ТоварыЗадания
	|		ПО ИзмененныеРаспоряженияСвернутые.Распоряжение = ТоварыЗадания.Распоряжение
	|			И ИзмененныеРаспоряженияСвернутые.Склад = ТоварыЗадания.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПолностьюДоставляемыеРаспоряжения КАК ПолностьюДоставляемыеРаспоряжения
	|		ПО ИзмененныеРаспоряженияСвернутые.Распоряжение = ПолностьюДоставляемыеРаспоряжения.Распоряжение
	|			И ИзмененныеРаспоряженияСвернутые.Склад = ПолностьюДоставляемыеРаспоряжения.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыЗадания.Распоряжение,
	|	ТоварыЗадания.Склад";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	Запрос.УстановитьПараметр("ПолностьюДоставляемыеРаспоряжения",
		ТЧРаспоряжения.Выгрузить(Новый Структура("ДоставляетсяПолностью", Истина), "Распоряжение,Склад"));
	Запрос.УстановитьПараметр("ТоварыКДоставке", ТоварыРаспоряжений);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Распоряжение") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
			НаборЗаписей = РегистрыСведений.ТоварыКДоставке.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаданиеНаПеревозку.Установить(ЗаданиеНаПеревозку);
			НаборЗаписей.Отбор.Распоряжение.Установить(Выборка.Распоряжение);
			НаборЗаписей.Отбор.Склад.Установить(Выборка.Склад);
			Если Не Выборка.Удалить Тогда
				Если Выборка.ВсеТовары Тогда
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка,"ЗаданиеНаПеревозку,ПолучательОтправитель,Склад,Распоряжение,ВсеТовары");
				Иначе
					Пока Выборка.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&Вместо("ОбновитьСписокРаспоряженийНаДоставку")
Процедура ВИЛС_ОбновитьСписокРаспоряженийНаДоставку(Форма, ОбновляемыеРаспоряжения)
	
	ДопустимоеОтклонениеПроцент = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	РаспоряженияНаДоставку 		= Форма.РаспоряженияНаДоставку;
	ТоварыРаспоряженийКДоставке = Форма.ТоварыРаспоряженийКДоставке;
	ОтборПоТипуИсполнителей 	= Форма.ОтборПоТипуИсполнителей;
	Зона 						= Форма.Зона;
	Склад 						= Форма.Склад;
	ДатаРаспоряжений 			= Форма.ДатаРаспоряжений;
	ЗонаГруппаИлиПустая 		= НЕ ЗначениеЗаполнено(Зона) ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Зона,"ЭтоГруппа");
	
	ВыборочноеОбновление = (ОбновляемыеРаспоряжения <> Неопределено);
	
	ВесОбъемРаспоряженийПоДатам = Новый ТаблицаЗначений;
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Вес", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Объем", ОбщегоНазначения.ОписаниеТипаЧисло(18,6));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ВесОбъемРаспоряженийПоДатам.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	КешДобавляемыхСтрок = Новый Массив;
	
	КоллекцияРаспоряжений = РаспоряженияНаДоставку.ПолучитьЭлементы();
	ВесОбъем = Новый Структура;
	
	Если Не ВыборочноеОбновление Тогда
		ВесОбъем.Вставить("ИтогоВес", 0);
		ВесОбъем.Вставить("ИтогоОбъем",0);
		КоллекцияРаспоряжений.Очистить();
		ТоварыРаспоряженийКДоставке.Очистить();
	Иначе
		СтруктураПоиска = Новый Структура("Склад, Распоряжение");
		
		Для Каждого Стр Из ОбновляемыеРаспоряжения Цикл
			
			// При выборочном обновлении сначала нужно удалить строки обновляемых распоряжений,
			// для этого воспользуемся списком товаров по распоряжениям.
			ПредыдущийИдентификатор = Неопределено;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Стр);
			
			НайденныеСтроки = ТоварыРаспоряженийКДоставке.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТовары Из НайденныеСтроки Цикл
				Идентификатор = СтрокаТовары.ИдентификаторВДеревеРаспоряжений;
				Если ПредыдущийИдентификатор = Идентификатор
					Или Не ЗначениеЗаполнено(Идентификатор) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаРаспоряжение = РаспоряженияНаДоставку.НайтиПоИдентификатору(Идентификатор);
				Если СтрокаРаспоряжение <> Неопределено Тогда
					Если ЗонаГруппаИлиПустая Тогда
						ТекущаяВетка = СтрокаРаспоряжение.ПолучитьРодителя();
						КоллекцияТекущаяВетка = ТекущаяВетка.ПолучитьЭлементы();
						// Если удаляем последний элемент в ветке, удалим родителя.
						Если КоллекцияТекущаяВетка.Количество() = 1 Тогда
							КоллекцияРаспоряжений.Удалить(ТекущаяВетка);
						Иначе
							ТекущаяВетка.Вес = ТекущаяВетка.Вес - СтрокаРаспоряжение.Вес;
							ТекущаяВетка.Объем = ТекущаяВетка.Объем - СтрокаРаспоряжение.Объем;
							КоллекцияТекущаяВетка.Удалить(СтрокаРаспоряжение);
						КонецЕсли;
					Иначе
						КоллекцияРаспоряжений.Удалить(СтрокаРаспоряжение);
					КонецЕсли;
				КонецЕсли;
				ТоварыРаспоряженийКДоставке.Удалить(СтрокаТовары);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураЗадание = Новый Структура("ЗаданиеНаПеревозку", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураЗадание, Форма);
	
	Запрос = Новый Запрос;
	ИсходящаяДоставка = Форма.ВидДоставки = Перечисления.ВидыДоставки.СоСклада;
	
	ЕстьОрдерныйНаОтгрузкуСклад      = Ложь;
	ЕстьНеОрдерныйНаОтгрузкуСклад    = Ложь;
	ЕстьОрдерныйНаПоступлениеСклад   = Ложь;
	ЕстьНеОрдерныйНаПоступлениеСклад = Ложь;
	
	Если ИсходящаяДоставка Тогда
		ЕстьОрдерныйНаОтгрузкуСклад = СкладыСервер.ЕстьОрдерныйНаОтгрузкуСклад(Склад);
		ЕстьНеОрдерныйНаОтгрузкуСклад = СкладыСервер.ЕстьНеОрдерныйНаОтгрузкуСклад(Склад);
	Иначе
		ЕстьОрдерныйНаПоступлениеСклад = СкладыСервер.ЕстьОрдерныйНаПоступлениеСклад(Склад);
		ЕстьНеОрдерныйНаПоступлениеСклад = СкладыСервер.ЕстьНеОрдерныйНаПоступлениеСклад(Склад);
	КонецЕсли;
	
	ТекстЗапроса = "";
	Если ИсходящаяДоставка Тогда
		
		ТекстЗапроса = ТекстЗапросаРаспоряженияНаДоставку(ВыборочноеОбновление,
			ЕстьОрдерныйНаОтгрузкуСклад,
			ЕстьНеОрдерныйНаОтгрузкуСклад,
			Истина);
		
		Запрос.УстановитьПараметр("СпособыДоставкиНашимиСиламиКПолучателю", СпособыДоставкиНашимиСиламиКПолучателю());
		Запрос.УстановитьПараметр("СпособыДоставкиПеревозчикомКПолучателю", СпособыДоставкиПеревозчикомКПолучателю());
		
	Иначе
		
		ТекстЗапроса = ТекстЗапросаРаспоряженияНаДоставку(ВыборочноеОбновление,
			ЕстьОрдерныйНаПоступлениеСклад,
			ЕстьНеОрдерныйНаПоступлениеСклад,
			Ложь);
		
		Запрос.УстановитьПараметр("ДатаОтбора", НачалоДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("СпособыДоставкиНашимиСиламиОтОтправителя", СпособыДоставкиНашимиСиламиОтОтправителя());
		Запрос.УстановитьПараметр("СпособыДоставкиПеревозчикомОтОтправителя", СпособыДоставкиПеревозчикомОтОтправителя());
	
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	ТаблицыИсточника.Распоряжение           КАК Распоряжение,", "	ТаблицыИсточника.Распоряжение           КАК Распоряжение,	ТаблицыИсточника.Распоряжение.КонтактноеЛицо КАК ВИЛС_КонтактноеЛицо,");    // fix Suetin 26.08.2019 17:41:43
	Запрос.Текст = ТекстЗапроса;
	
	БезОтбораПоЗоне = Зона = Справочники.ЗоныДоставки.ПустаяСсылка();
	
	Запрос.УстановитьПараметр("Зона",                              Зона);
	Запрос.УстановитьПараметр("Склад",                             Склад);
	Запрос.УстановитьПараметр("БезОтбораПоЗоне",                   БезОтбораПоЗоне);
	Запрос.УстановитьПараметр("ОбновляемыеРаспоряжения",           ОбновляемыеРаспоряжения);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозкуПодбор",          СтруктураЗадание.ЗаданиеНаПеревозку);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозкуПустаяСсылка",    Документы.ЗаданиеНаПеревозку.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатусЗаданияЗакрыто",              Перечисления.СтатусыЗаданийНаПеревозку.Закрыто);
	Запрос.УстановитьПараметр("ОтборПоТипуИсполнителей",           ОтборПоТипуИсполнителей);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса",                 ТекущаяДатаСеанса());
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ДвиженияКРаспределению = Пакет[Пакет.ВГраница()-1].Выгрузить();
	
	ПоляОтбораДвиженийКРаспределению = "Распоряжение,Склад,Номенклатура,Характеристика,Назначение";
	Если ИсходящаяДоставка
		Или ЕстьОрдерныйНаПоступлениеСклад Тогда
		ДвиженияКРаспределению.Индексы.Добавить(ПоляОтбораДвиженийКРаспределению);
	КонецЕсли;
	
	Выборка = Пакет[Пакет.ВГраница()].Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Зона") Цикл
		
		Если ВыборочноеОбновление Тогда
			
		ИначеЕсли ЗонаГруппаИлиПустая Тогда
			ТекущаяВетка = КоллекцияРаспоряжений.Добавить();
			ТекущаяВетка.Адрес = Строка(Выборка.Зона);
			ТекущаяВетка.Зона = Выборка.Зона;
			КоллекцияТекущаяВетка = ТекущаяВетка.ПолучитьЭлементы();
		Иначе
			КоллекцияТекущаяВетка = КоллекцияРаспоряжений;
		КонецЕсли;
		
		ВесПоЗоне = 0;
		ОбъемПоЗоне = 0;
		
		Пока Выборка.СледующийПоЗначениюПоля("Распоряжение") Цикл
			
			Если ВыборочноеОбновление Тогда
				СтруктураЗонаАдрес = Новый Структура("Зона, Адрес");
				ЗаполнитьЗначенияСвойств(СтруктураЗонаАдрес, Выборка);
				ПозицияДляВставки = ПолучитьПозициюДляВставки(РаспоряженияНаДоставку, ЗонаГруппаИлиПустая, СтруктураЗонаАдрес);
				Если ЗонаГруппаИлиПустая Тогда
					ТекущаяВетка = КоллекцияРаспоряжений[ПозицияДляВставки.Зона];
					КоллекцияТекущаяВетка = ТекущаяВетка.ПолучитьЭлементы();
				Иначе
					КоллекцияТекущаяВетка = КоллекцияРаспоряжений;
				КонецЕсли;
				ПозицияДляВставки = ПозицияДляВставки.Распоряжение;
			КонецЕсли;
			
			Если Выборка.ВидРаспоряжения = Тип("ДокументСсылка.ПоручениеЭкспедитору") Тогда
				
				Если ЗначениеЗаполнено(ДатаРаспоряжений)
					И ЗначениеЗаполнено(Выборка.Дата)
					И НачалоДня(Выборка.Дата) > ДатаРаспоряжений Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВыборочноеОбновление Тогда
					СтрокаРаспоряжение = КоллекцияТекущаяВетка.Вставить(ПозицияДляВставки);
					ПозицияДляВставки = ПозицияДляВставки + 1;
				Иначе
					СтрокаРаспоряжение = КоллекцияТекущаяВетка.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаРаспоряжение, Выборка);
				СтрокаРаспоряжение.ПолучательОтправительПредставление = Выборка.ПолучательОтправитель;
				СтрокаРаспоряжение.Время = ДоставкаТоваровКлиентСервер.ПредставлениеВремениДоставки(Выборка.ВремяС, Выборка.ВремяПо);
				
				СтрокаДляХраненияИдентификатора = ТоварыРаспоряженийКДоставке.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДляХраненияИдентификатора, Выборка);
				СтрокаДляХраненияИдентификатора.ИдентификаторВДеревеРаспоряжений = СтрокаРаспоряжение.ПолучитьИдентификатор();
				
				Продолжить;
				
			КонецЕсли;
			
			Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
				
				Номенклатура   = Неопределено;
				Характеристика = Неопределено;
				Назначение     = Неопределено;
				Серия          = Неопределено;
				
				ВесОбъемРаспоряженийПоДатам.Очистить();
				КешДобавляемыхСтрок.Очистить();
				ПотребностьПоТовару = 0;
				ПроверитьОтклонение = Ложь;
				
				Пока Выборка.Следующий() Цикл
					
					Если Номенклатура      <> Выборка.Номенклатура
						Или Характеристика <> Выборка.Характеристика
						Или Назначение     <> Выборка.Назначение
						Или Серия          <> Выборка.Серия Тогда
						// перешли к другому товару
						
						Номенклатура   = Выборка.Номенклатура;
						Характеристика = Выборка.Характеристика;
						Назначение     = Выборка.Назначение;
						Серия          = Выборка.Серия;
						
						Если ПроверитьОтклонение Тогда
							ДопустимоеОтклонение = ДопустимоеОтклонениеПроцент/100 * ПотребностьПоТовару;
							// Не нужно выводить строки с мерным товаром, если остаток к доставке не превысил допустимое отклонение;
							Для Каждого Стр Из КешДобавляемыхСтрок Цикл
								Если Стр.Количество <= ДопустимоеОтклонение Тогда
									ВесОбъемРаспоряженийПоДатам.Удалить(Стр);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						КешДобавляемыхСтрок.Очистить();
						ПотребностьПоТовару = 0;
						
						ПроверитьОтклонение = Выборка.МернаяЕдиницаИзмерения И ДопустимоеОтклонениеПроцент > 0;
						
					КонецЕсли;
					
					Если ИсходящаяДоставка Тогда
						
						ОсталосьРаспределить = Выборка.Количество;
						
						ПараметрыОтбора = Новый Структура(ПоляОтбораДвиженийКРаспределению);
						ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
						ДетальныеДанные = ДвиженияКРаспределению.НайтиСтроки(ПараметрыОтбора);
						Для Каждого СтрокаДетальныхДанных Из ДетальныеДанные Цикл
							Списываем = Мин(ОсталосьРаспределить, СтрокаДетальныхДанных.Количество);
							ОсталосьРаспределить = ОсталосьРаспределить - Списываем;
							СтрокаДетальныхДанных.Количество = СтрокаДетальныхДанных.Количество - Списываем;
							
							Если ОсталосьРаспределить = 0 Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ОсталосьРаспределить > 0 Тогда
							ТекущаяСтрокаВесОбъем = ВесОбъемРаспоряженийПоДатам.Добавить();
							ЗаполнитьЗначенияСвойств(ТекущаяСтрокаВесОбъем, Выборка);
							ТекущаяСтрокаВесОбъем.Количество = ОсталосьРаспределить;
							ТекущаяСтрокаВесОбъем.Вес = ОсталосьРаспределить * (Выборка.Вес / Выборка.Количество);
							ТекущаяСтрокаВесОбъем.Объем = ОсталосьРаспределить * (Выборка.Объем / Выборка.Количество);
							
							КешДобавляемыхСтрок.Добавить(ТекущаяСтрокаВесОбъем);
							ПотребностьПоТовару = ПотребностьПоТовару + ОсталосьРаспределить;
						КонецЕсли;
						
					ИначеЕсли Не ЕстьОрдерныйНаПоступлениеСклад Тогда
						
						ТекущаяСтрокаВесОбъем = ВесОбъемРаспоряженийПоДатам.Добавить();
						ЗаполнитьЗначенияСвойств(ТекущаяСтрокаВесОбъем, Выборка);
						КешДобавляемыхСтрок.Добавить(ТекущаяСтрокаВесОбъем);
						ПотребностьПоТовару = ПотребностьПоТовару + Выборка.Количество;
						
					Иначе
						
						ПараметрыОтбора = Новый Структура(ПоляОтбораДвиженийКРаспределению);
						ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
						ДетальныеДанные = ДвиженияКРаспределению.НайтиСтроки(ПараметрыОтбора);
						
						ОсталосьРаспределить = Выборка.Количество;
						// Распределение товаров по датам поступления;
						Для Каждого СтрокаДетальныхДанных Из ДетальныеДанные Цикл
							
							Списываем = Мин(ОсталосьРаспределить, СтрокаДетальныхДанных.Количество);
							ОсталосьРаспределить = ОсталосьРаспределить - Списываем;
							
							ТекущаяСтрокаВесОбъем = ВесОбъемРаспоряженийПоДатам.Добавить();
							ЗаполнитьЗначенияСвойств(ТекущаяСтрокаВесОбъем, Выборка,,"Количество,Вес,Объем");
							ТекущаяСтрокаВесОбъем.Дата = СтрокаДетальныхДанных.Период;
							ТекущаяСтрокаВесОбъем.Количество = Списываем;
							ТекущаяСтрокаВесОбъем.Вес = Списываем * СтрокаДетальныхДанных.Вес / СтрокаДетальныхДанных.Количество;
							ТекущаяСтрокаВесОбъем.Объем = Списываем * СтрокаДетальныхДанных.Объем / СтрокаДетальныхДанных.Количество;
							КешДобавляемыхСтрок.Добавить(ТекущаяСтрокаВесОбъем);
							
							Если ОсталосьРаспределить <= 0 Тогда
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
						Если ОсталосьРаспределить > 0 Тогда
							ТекущаяСтрокаВесОбъем = ВесОбъемРаспоряженийПоДатам.Добавить();
							ЗаполнитьЗначенияСвойств(ТекущаяСтрокаВесОбъем, Выборка,,"Количество,Вес,Объем");
							ТекущаяСтрокаВесОбъем.Дата = НачалоДня(ТекущаяДатаСеанса());
							ТекущаяСтрокаВесОбъем.Количество = ОсталосьРаспределить;
							ТекущаяСтрокаВесОбъем.Вес = ОсталосьРаспределить 	* Выборка.Вес 	/ Выборка.Количество;
							ТекущаяСтрокаВесОбъем.Объем = ОсталосьРаспределить 	* Выборка.Объем / Выборка.Количество;
							КешДобавляемыхСтрок.Добавить(ТекущаяСтрокаВесОбъем);
						КонецЕсли;
						ПотребностьПоТовару = ПотребностьПоТовару + Выборка.Количество;
					КонецЕсли;
				КонецЦикла;
				
				// Нужно проверить последний добавленный товар распоряжения;
				Если ПроверитьОтклонение Тогда
					ДопустимоеОтклонение = ДопустимоеОтклонениеПроцент/100 * ПотребностьПоТовару;
					// Не нужно выводить строки с мерным товаром, если остаток к доставке не превысил допустимое отклонение;
					Для Каждого Стр Из КешДобавляемыхСтрок Цикл
						Если Стр.Количество <= ДопустимоеОтклонение Тогда
							ВесОбъемРаспоряженийПоДатам.Удалить(Стр);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ВесОбъемРаспоряженийПоДатам.Сортировать("Дата");
				
				ТекущаяДата = Неопределено;
				
				Для Каждого СтрокаВесОбъемДата Из ВесОбъемРаспоряженийПоДатам Цикл
					
					Если ЗначениеЗаполнено(ДатаРаспоряжений)
						И СтрокаВесОбъемДата.Дата > ДатаРаспоряжений Тогда
						Прервать;
					КонецЕсли;
					
					СтрокаТовар = ТоварыРаспоряженийКДоставке.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТовар, Выборка);
					ЗаполнитьЗначенияСвойств(СтрокаТовар, СтрокаВесОбъемДата);
					
					Если ТекущаяДата <> СтрокаВесОбъемДата.Дата Тогда
						
						ТекущаяДата = СтрокаВесОбъемДата.Дата;
						
						Если ВыборочноеОбновление Тогда
							СтрокаРаспоряжение = КоллекцияТекущаяВетка.Вставить(ПозицияДляВставки);
							ПозицияДляВставки = ПозицияДляВставки + 1;
						Иначе
							СтрокаРаспоряжение = КоллекцияТекущаяВетка.Добавить();
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(СтрокаРаспоряжение, Выборка);
						
						Если СтрокаРаспоряжение.Свойство("АдресДоставкиЗначенияПолей") Тогда
							СтрокаРаспоряжение.АдресДоставкиЗначенияПолей = Выборка.АдресЗначенияПолей;
						КонецЕсли;
						
						СтрокаРаспоряжение.Дата = ТекущаяДата;
						СтрокаРаспоряжение.Вес = 0;
						СтрокаРаспоряжение.Объем = 0;
						
						СтрокаРаспоряжение.ПолучательОтправительПредставление = ДоставкаТоваровКлиентСервер.ПредставлениеПолучателяОтправителя(Выборка.ПолучательОтправитель, Выборка.Перевозчик, Форма.ВидДоставки);
						СтрокаРаспоряжение.Время = ДоставкаТоваровКлиентСервер.ПредставлениеВремениДоставки(Выборка.ВремяС, Выборка.ВремяПо);
						
						ИдентификаторВДеревеРаспоряжений = СтрокаРаспоряжение.ПолучитьИдентификатор();
						
					КонецЕсли;
					
					СтрокаТовар.ИдентификаторВДеревеРаспоряжений = ИдентификаторВДеревеРаспоряжений;
					
					СтрокаРаспоряжение.Вес = СтрокаРаспоряжение.Вес + СтрокаВесОбъемДата.Вес;
					СтрокаРаспоряжение.Объем = СтрокаРаспоряжение.Объем + СтрокаВесОбъемДата.Объем;
					
					ВесПоЗоне   = ВесПоЗоне   + СтрокаВесОбъемДата.Вес;
					ОбъемПоЗоне = ОбъемПоЗоне + СтрокаВесОбъемДата.Объем;
					
				КонецЦикла;
				
			КонецЦикла; // Склад
		КонецЦикла; // Распоряжение
		
		Если Не ВыборочноеОбновление Тогда
			ВесОбъем.ИтогоВес = ВесОбъем.ИтогоВес + ВесПоЗоне;
			ВесОбъем.ИтогоОбъем = ВесОбъем.ИтогоОбъем  + ОбъемПоЗоне;
		КонецЕсли;
		
		Если ЗонаГруппаИлиПустая Тогда
			
			Если КоллекцияТекущаяВетка.Количество() = 0 Тогда
				КоллекцияРаспоряжений.Удалить(ТекущаяВетка);
			Иначе
				Если ВыборочноеОбновление Тогда
					ТекущаяВетка.Вес   = ТекущаяВетка.Вес + ВесПоЗоне;
					ТекущаяВетка.Объем = ТекущаяВетка.Объем + ОбъемПоЗоне;
				Иначе
					ТекущаяВетка.Вес   = ВесПоЗоне;
					ТекущаяВетка.Объем = ОбъемПоЗоне;
				КонецЕсли;
				ТекущаяВетка.ОформлениеСтроки = 5;
				ТекущаяВетка.Зона = Выборка.Зона;
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла; // Зона
	
	ЗаполнитьЗначенияСвойств(Форма, ВесОбъем);
	ЗаполнитьПризнакиОформленияРаспоряжений(РаспоряженияНаДоставку, ЗонаГруппаИлиПустая);
	
КонецПроцедуры
