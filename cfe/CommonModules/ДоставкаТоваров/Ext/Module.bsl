
&ИзменениеИКонтроль("ПриИзмененииСпособаДоставки")
Процедура ВИЛС_ПриИзмененииСпособаДоставки(ЭлементыФормы, ДокОбъект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат
	КонецЕсли;
	
	ЭтоДоставкаНаНашСклад = ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(ДокОбъект.Ссылка);
	
	РеквизитыДоставки = РеквизитыДоставки(ДокОбъект);
	
	ДопИнфоИзмененоПользователем = ДоставкаТоваровКлиентСервер.ДопИнфоИзмененоПользователем(ЭлементыФормы, ДокОбъект);
	
	ЗаполнитьРеквизитыПоСпособуДоставки(ЭлементыФормы, РеквизитыДоставки, ДопИнфоИзмененоПользователем);
	
#Вставка
	Если (РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу            		// begin fix Suetin 21.08.2019 12:23:59
			Или РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада  
			Или РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
		И ЗначениеЗаполнено(ДокОбъект.Контрагент) Тогда	
		ВИЛС_ЗаполнитьСписокВыбораАдресовКонтрагентаПартнера(ЭлементыФормы, ДокОбъект.Контрагент, "АдресДоставкиПеревозчика");                               
		ЗаполнитьРеквизитыПоПеревозчику(ЭлементыФормы, РеквизитыДоставки, ДопИнфоИзмененоПользователем);			
	ИначеЕсли (РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя
			Или РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)
		И ЗначениеЗаполнено(ДокОбъект.Контрагент) Тогда	
		ВИЛС_ЗаполнитьСписокВыбораАдресовКонтрагентаПартнера(ЭлементыФормы, ДокОбъект.Контрагент);                               
		ЗаполнитьРеквизитыПоПеревозчику(ЭлементыФормы, РеквизитыДоставки, ДопИнфоИзмененоПользователем);			
	КонецЕсли;																										// end fix Suetin 21.08.2019 12:24:07
#КонецВставки	
	Если (РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
#Вставка	
		    Или РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада   	// fix Suetin 21.08.2019 12:25:42
#КонецВставки
			Или РеквизитыДоставки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
		И ЗначениеЗаполнено(РеквизитыДоставки.ПеревозчикПартнер) Тогда
		ЗаполнитьСписокВыбораАдресовПеревозчика(ЭлементыФормы, РеквизитыДоставки);
		ЗаполнитьРеквизитыПоПеревозчику(ЭлементыФормы, РеквизитыДоставки, ДопИнфоИзмененоПользователем);  
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокОбъект, РеквизитыДоставки);
	
	ЭтоДоговорСоглашение = ТипЗнч(ДокОбъект.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		Или ТипЗнч(ДокОбъект.Ссылка) = Тип("СправочникСсылка.СоглашенияСПоставщиками");
	
	Если ЭлементыФормы.Найти("СтраницыДоставки") <> Неопределено Тогда
		РаспоряжениеПоСоглашению = ЭтоДоставкаНаНашСклад И ЭтоРаспоряжениеПоСоглашению(ДокОбъект);
		ДоставкаОпределенаВДоговоре = ЭтоДоставкаНаНашСклад И ДоставкаОпределенаВДоговоре(ДокОбъект);
		
		РаспоряжениеПоДоговору = Не ЭтоДоговорСоглашение И ДоставкаОпределенаВДоговоре;
		
		ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(ЭлементыФормы,
			ДокОбъект.СпособДоставки,
			ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"),
			РаспоряжениеПоСоглашению,
			РаспоряжениеПоДоговору);
	КонецЕсли;
	
	ОсобыеУсловияПеревозкиУстановитьДоступность(ЭлементыФормы, ДокОбъект);
	
КонецПроцедуры

Процедура ВИЛС_ЗаполнитьСписокВыбораАдресовКонтрагентаПартнера(ЭлементыФормы, Знач Контрагент, Знач ИмяЭлементаАдрес = "АдресПоставщика", Знач ОчиститьСписок = Истина) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭлементыФормы.Найти(ИмяЭлементаАдрес) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора.Очистить();
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	
	АдресаПолучателяИзКонтактнойИнформации = АдресаПолучателяИзКонтактнойИнформации(Контрагент);
	Для Каждого Стр Из АдресаПолучателяИзКонтактнойИнформации Цикл
		НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
		Если НайденныйЭлементСЗ = Неопределено Тогда
			СтруктураВыбора = СтруктураВыбора();
			ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
			СписокВыбора.Добавить(СтруктураВыбора, Стр.Вид + ": " + Стр.АдресДоставки);
		ИначеЕсли Не ЗначениеЗаполнено(НайденныйЭлементСЗ.Значение.АдресДоставкиЗначенияПолей) Тогда
			НайденныйЭлементСЗ.Значение.АдресДоставкиЗначенияПолей = Стр.АдресДоставкиЗначенияПолей;
		КонецЕсли;
	КонецЦикла;
	
	ВИЛС_СкопироватьСписокЗначений(ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора, СписокВыбора, ОчиститьСписок);	
КонецПроцедуры

  // begin fix Suetin 21.08.2019 16:37:27
&ИзменениеИКонтроль("ДоставкаОпределенаВДоговоре")
Функция ВИЛС_ДоставкаОпределенаВДоговоре(ДокОбъект)
	
	Если ДокОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоДоговор  = (ТипЗнч(ДокОбъект.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	
	РаспоряжениеНаДоставкуНаНашСклад = Ложь;
	
	Если ТипЗнч(ДокОбъект) = Тип("ДанныеФормыСтруктура")
		Или ТипЗнч(ДокОбъект) = Тип("Структура") Тогда
		РаспоряжениеНаДоставкуНаНашСклад = ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(ДокОбъект)
			И ДокОбъект.Свойство("Договор")
			И ЗначениеЗаполнено(ДокОбъект.Договор);
	Иначе
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ДокОбъект.Ссылка));
		ЕстьДоговор = ОбщегоНазначения.ЕстьРеквизитОбъекта("Договор", МетаданныеОбъекта);
		
		РаспоряжениеНаДоставкуНаНашСклад = 
			(ДоставкаТоваровКлиентСервер.ЭтоРаспоряжениеНаДоставкуНаНашСклад(ДокОбъект)
			 И ЭтоДоговор)
			Или (ЕстьДоговор
				И ЗначениеЗаполнено(ДокОбъект.Договор));
	КонецЕсли;
	
	Если РаспоряжениеНаДоставкуНаНашСклад Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Если ЭтоДоговор Тогда
			СпособДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Ссылка, "СпособДоставки");
		Иначе
			СпособДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Договор, "СпособДоставки");
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
		СпособыДоставки = Новый Массив;

#Удаление
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками") Тогда
			СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада);
		КонецЕсли;

		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада);
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи);
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя);
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки);
#КонецУдаления
#Вставка
		СпособыДоставки.Добавить(Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада);
#КонецВставки
		
		ДоставкаИспользуется = СпособыДоставки.Найти(СпособДоставки) <> Неопределено;
		
		Возврат ДоставкаИспользуется;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
// end fix Suetin 21.08.2019 16:37:33

&ИзменениеИКонтроль("ЗаполнитьСпискиВыбораАдресовПолучателяОтправителя")
Процедура ВИЛС_ЗаполнитьСпискиВыбораАдресовПолучателяОтправителя(ЭлементыФормы, ДокОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолучательОтправитель = ПолучательОтправитель(ДокОбъект).Значение;
		
	Если Не ЗначениеЗаполнено(ПолучательОтправитель) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьСпискиВыбораАдресовПолучателяОтправителя(ЭлементыФормы);
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	ПоследниеРеквизитыДоставкиИзЗаданий = ПоследниеРеквизитыДоставкиИзЗаданий(ПолучательОтправитель);
	Для Каждого Стр Из ПоследниеРеквизитыДоставкиИзЗаданий Цикл
		СтруктураВыбора = СтруктураВыбора();
		ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
		СписокВыбора.Добавить(СтруктураВыбора,Стр.АдресДоставки);
	КонецЦикла;
	
	ПоследниеРеквизитыДоставкиИзРаспоряжений = ПоследниеРеквизитыДоставкиИзРаспоряжений(ДокОбъект.Ссылка, ПолучательОтправитель);
	Для Каждого Стр Из ПоследниеРеквизитыДоставкиИзРаспоряжений Цикл
		НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
		Если НайденныйЭлементСЗ = Неопределено Тогда
			СтруктураВыбора = СтруктураВыбора();
			ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
			СписокВыбора.Добавить(СтруктураВыбора, Стр.АдресДоставки);
		Иначе
			ДозаполнитьПустыеСвойства(НайденныйЭлементСЗ.Значение, Стр);
		КонецЕсли;
	КонецЦикла;
	
	Если (ТипЗнч(ПолучательОтправитель) <> Тип("СправочникСсылка.СтруктураПредприятия")
		И ТипЗнч(ПолучательОтправитель) <> Тип("Строка")) Тогда
		
		АдресаПолучателяИзКонтактнойИнформации = АдресаПолучателяИзКонтактнойИнформации(ПолучательОтправитель);
		Для Каждого Стр Из АдресаПолучателяИзКонтактнойИнформации Цикл
			НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
			Если НайденныйЭлементСЗ = Неопределено Тогда
				СтруктураВыбора = СтруктураВыбора();
				ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
				СписокВыбора.Добавить(СтруктураВыбора, Стр.Вид + ": " + Стр.АдресДоставки);
			Иначе
				ДозаполнитьПустыеСвойства(НайденныйЭлементСЗ.Значение, Стр);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
#Вставка
	// begin fix Suetin 21.08.2019 17:33:58
	Если ДокОбъект.Свойство("Контрагент") Тогда
		ПолучательОтправитель = ВИЛС_ПолучательОтправительКонтрагент(ДокОбъект).Значение;
		Если (ТипЗнч(ПолучательОтправитель) <> Тип("СправочникСсылка.СтруктураПредприятия")
			И ТипЗнч(ПолучательОтправитель) <> Тип("Строка")) Тогда
			
			АдресаПолучателяИзКонтактнойИнформации = АдресаПолучателяИзКонтактнойИнформации(ПолучательОтправитель);
			Для Каждого Стр Из АдресаПолучателяИзКонтактнойИнформации Цикл
				НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(СписокВыбора,"АдресДоставки",Стр.АдресДоставки);
				Если НайденныйЭлементСЗ = Неопределено Тогда
					СтруктураВыбора = СтруктураВыбора();
					ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
					СписокВыбора.Добавить(СтруктураВыбора, Стр.Вид + ": " + Стр.АдресДоставки);
				Иначе
					ДозаполнитьПустыеСвойства(НайденныйЭлементСЗ.Значение, Стр);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	// end fix Suetin 21.08.2019 17:34:48
#КонецВставки	
	Если ЭлементыФормы.Найти("АдресДоставкиСамовывоз") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиСамовывоз.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиПолучателя.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя1") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиПолучателя1.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя2") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресДоставкиПолучателя2.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресПоставщика") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресПоставщика.СписокВыбора, СписокВыбора);
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресПункта") <> Неопределено Тогда
		СкопироватьСписокЗначений(ЭлементыФормы.АдресПункта.СписокВыбора, СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

&ИзменениеИКонтроль("ЗаписатьТоварыКДоставке")
Процедура ВИЛС_ЗаписатьТоварыКДоставке(ТоварыРаспоряжений, ТЧРаспоряжения, ЗаданиеНаПеревозку) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.Склад,
	|	ИСТИНА КАК ВсеТовары
	|ПОМЕСТИТЬ ПолностьюДоставляемыеРаспоряжения
	|ИЗ
	|	&ПолностьюДоставляемыеРаспоряжения КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКДоставке.Распоряжение,
	|	ТоварыКДоставке.Склад,
	|	ТоварыКДоставке.Номенклатура,
	|	ТоварыКДоставке.Характеристика,
	|	ТоварыКДоставке.Назначение,
	|	ТоварыКДоставке.Серия,
	|	ТоварыКДоставке.Количество,
#Вставка	
	|	ТоварыКДоставке.Вес,            		// begin fix Suetin 23.08.2019 11:43:05
	|	ТоварыКДоставке.Объем,          		// end fix Suetin 23.08.2019 11:43:09
#КонецВставки	
	|	ТоварыКДоставке.ВсеТовары,
	|	ТоварыКДоставке.ПолучательОтправитель
	|ПОМЕСТИТЬ ВТТоварыЗадания
	|ИЗ
	|	&ТоварыКДоставке КАК ТоварыКДоставке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТТоварыЗадания.Распоряжение,
	|	ВТТоварыЗадания.Склад,
	|	ВТТоварыЗадания.ВсеТовары
	|ПОМЕСТИТЬ РаспоряженияЗадания
	|ИЗ
	|	ВТТоварыЗадания КАК ВТТоварыЗадания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.ПолучательОтправитель,
	|	Т.Номенклатура,
	|	Т.Склад,
	|	Т.Назначение,
	|	Т.Характеристика,
	|	Т.Серия,
	|	СУММА(Т.Количество) КАК Количество,
#Вставка	
	|	СУММА(Т.Вес) КАК Вес,                  	// begin fix Suetin 23.08.2019 11:44:07
	|	СУММА(Т.Объем) КАК Объем,              	// end fix Suetin 23.08.2019 11:44:11
#КонецВставки	
	|	МАКСИМУМ(Т.ВсеТовары) КАК ВсеТовары
	|ПОМЕСТИТЬ ТоварыЗадания
	|ИЗ
	|	ВТТоварыЗадания КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.ПолучательОтправитель,
	|	Т.Номенклатура,
	|	Т.Склад,
	|	Т.Назначение,
	|	Т.Характеристика,
	|	Т.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Распоряжение,
	|	Т.Склад
	|ПОМЕСТИТЬ ИзмененныеРаспоряжения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКДоставке.Распоряжение КАК Распоряжение,
	|		ТоварыКДоставке.Склад КАК Склад,
	|		ТоварыКДоставке.Номенклатура КАК Номенклатура,
	|		ТоварыКДоставке.Характеристика КАК Характеристика,
	|		ТоварыКДоставке.Назначение КАК Назначение,
	|		ТоварыКДоставке.Серия КАК Серия,
	|		ТоварыКДоставке.Количество КАК Количество,
#Вставка	
	|		ТоварыКДоставке.Вес КАК Вес,                 // begin fix Suetin 23.08.2019 11:45:35
	|		ТоварыКДоставке.Объем КАК Объем,             // end fix Suetin 23.08.2019 11:45:39
#КонецВставки	
	|		1 КАК СчетИзмененныхСтрок
	|	ИЗ
	|		РегистрСведений.ТоварыКДоставке КАК ТоварыКДоставке
	|	ГДЕ
	|		ТоварыКДоставке.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыЗадания.Распоряжение,
	|		ТоварыЗадания.Склад,
	|		ТоварыЗадания.Номенклатура,
	|		ТоварыЗадания.Характеристика,
	|		ТоварыЗадания.Назначение,
	|		ТоварыЗадания.Серия,
	|		-ТоварыЗадания.Количество,
#Вставка	
	|		-ТоварыЗадания.Вес КАК Вес,                 // begin fix Suetin 23.08.2019 11:45:35
	|		-ТоварыЗадания.Объем КАК Объем,             // end fix Suetin 23.08.2019 11:45:39
#КонецВставки	
	|		-1
	|	ИЗ
	|		ТоварыЗадания КАК ТоварыЗадания) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.Характеристика,
	|	Т.Назначение,
	|	Т.Серия,
	|	Т.Номенклатура,
	|	Т.Склад
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Т.Количество) <> 0
#Вставка	
	|		ИЛИ СУММА(Т.Вес) <> 0                       // begin fix Suetin 23.08.2019 11:47:21
	|		ИЛИ СУММА(Т.Объем) <> 0                     // end fix Suetin 23.08.2019 11:47:25
#КонецВставки	
	|		ИЛИ СУММА(Т.СчетИзмененныхСтрок) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзмененныеРаспоряжения.Распоряжение,
	|	ИзмененныеРаспоряжения.Склад
	|ПОМЕСТИТЬ ИзмененныеРаспоряженияСвернутые
	|ИЗ
	|	ИзмененныеРаспоряжения КАК ИзмененныеРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
	|	ИзмененныеРаспоряженияСвернутые.Распоряжение,
	|	ИзмененныеРаспоряженияСвернутые.Склад,
	|	ТоварыЗадания.Номенклатура,
	|	ТоварыЗадания.Характеристика,
	|	ТоварыЗадания.Назначение,
	|	ТоварыЗадания.Серия,
	|	ТоварыЗадания.Количество,
#Вставка	
	|	ТоварыЗадания.Вес,                               // begin fix Suetin 23.08.2019 11:48:27
	|	ТоварыЗадания.Объем,                             // end fix Suetin 23.08.2019 11:48:32
#КонецВставки	
	|	ЕСТЬNULL(ПолностьюДоставляемыеРаспоряжения.ВсеТовары, ТоварыЗадания.ВсеТовары) КАК ВсеТовары,
	|	ТоварыЗадания.ПолучательОтправитель,
	|	ВЫБОР
	|		КОГДА ТоварыЗадания.Распоряжение ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удалить
	|ИЗ
	|	ИзмененныеРаспоряженияСвернутые КАК ИзмененныеРаспоряженияСвернутые
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗадания КАК ТоварыЗадания
	|		ПО ИзмененныеРаспоряженияСвернутые.Распоряжение = ТоварыЗадания.Распоряжение
	|			И ИзмененныеРаспоряженияСвернутые.Склад = ТоварыЗадания.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПолностьюДоставляемыеРаспоряжения КАК ПолностьюДоставляемыеРаспоряжения
	|		ПО ИзмененныеРаспоряженияСвернутые.Распоряжение = ПолностьюДоставляемыеРаспоряжения.Распоряжение
	|			И ИзмененныеРаспоряженияСвернутые.Склад = ПолностьюДоставляемыеРаспоряжения.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыЗадания.Распоряжение,
	|	ТоварыЗадания.Склад";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	Запрос.УстановитьПараметр("ПолностьюДоставляемыеРаспоряжения",
		ТЧРаспоряжения.Выгрузить(Новый Структура("ДоставляетсяПолностью", Истина), "Распоряжение,Склад"));
	Запрос.УстановитьПараметр("ТоварыКДоставке", ТоварыРаспоряжений);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Распоряжение") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
			НаборЗаписей = РегистрыСведений.ТоварыКДоставке.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаданиеНаПеревозку.Установить(ЗаданиеНаПеревозку);
			НаборЗаписей.Отбор.Распоряжение.Установить(Выборка.Распоряжение);
			НаборЗаписей.Отбор.Склад.Установить(Выборка.Склад);
			Если Не Выборка.Удалить Тогда
				Если Выборка.ВсеТовары Тогда
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка,"ЗаданиеНаПеревозку,ПолучательОтправитель,Склад,Распоряжение,ВсеТовары");
				Иначе
					Пока Выборка.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&ИзменениеИКонтроль("ТекстЗапросаРаспоряженияНаДоставку")
Функция ВИЛС_ТекстЗапросаРаспоряженияНаДоставку(ВыборочноеОбновление, ЕстьОрдерныйСклад, ЕстьНеОрдерныйСклад, ДоставкаПолучателям)
	
	Если ВыборочноеОбновление Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбновляемыеРаспоряжения.Распоряжение,
		|	ОбновляемыеРаспоряжения.Склад
		|ПОМЕСТИТЬ ОбновляемыеРаспоряжения
		|ИЗ
		|	&ОбновляемыеРаспоряжения КАК ОбновляемыеРаспоряжения";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Распоряжение,
		|	НЕОПРЕДЕЛЕНО КАК Склад
		|ПОМЕСТИТЬ ОбновляемыеРаспоряжения";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовПакета() +
		ТекстЗапросаВтРаспоряженияНаДоставку(ДоставкаПолучателям);
	
	ШаблонВыборкаДвиженийКРаспределению = ?(ДоставкаПолучателям,
		"ВЫБРАТЬ
		|	ТаблицыИсточника.Склад                  КАК Склад,
		|	ТаблицыИсточника.Распоряжение           КАК Распоряжение,
		|	ТаблицыИсточника.ПолучательОтправитель  КАК ПолучательОтправитель,
		|	ТаблицыИсточника.СпособДоставки         КАК СпособДоставки,
		|	ТаблицыИсточника.Зона                   КАК Зона,
		|	ТаблицыИсточника.Перевозчик             КАК Перевозчик,
		|	ТаблицыИсточника.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
		|	ТаблицыИсточника.Номенклатура           КАК Номенклатура,
		|	ТаблицыИсточника.Характеристика         КАК Характеристика,
		|	ТаблицыИсточника.Назначение             КАК Назначение,
		|	ТаблицыИсточника.Серия                  КАК Серия,
		|	ТаблицыИсточника.Количество             КАК Количество
		|ИЗ
		|	ИмяТаблицыИсточника КАК ТаблицыИсточника",
		"ВЫБРАТЬ
		|	ТаблицыИсточника.Период         КАК Период,
		|	ТаблицыИсточника.Распоряжение   КАК Распоряжение,
		|	ТаблицыИсточника.Номенклатура   КАК Номенклатура,
		|	ТаблицыИсточника.Характеристика КАК Характеристика,
		|	ТаблицыИсточника.Назначение     КАК Назначение,
		|	ТаблицыИсточника.Склад          КАК Склад,
		|	ТаблицыИсточника.Количество     КАК Количество,
		|	ТаблицыИсточника.Вес            КАК Вес,
		|	ТаблицыИсточника.Объем          КАК Объем
		|ИЗ
		|	ИмяТаблицыИсточника КАК ТаблицыИсточника");
	
	ШаблонВыборкаРаспоряжений = 
	"ВЫБРАТЬ
	|	ТаблицыИсточника.Дата                   КАК Дата,
	|	ТаблицыИсточника.Номенклатура           КАК Номенклатура,
	|	ТаблицыИсточника.МернаяЕдиницаИзмерения КАК МернаяЕдиницаИзмерения,
	|	ТаблицыИсточника.Характеристика         КАК Характеристика,
	|	ТаблицыИсточника.Назначение             КАК Назначение,
	|	ТаблицыИсточника.Серия                  КАК Серия,
	|	ТаблицыИсточника.Количество             КАК Количество,
	|	ТаблицыИсточника.Вес                    КАК Вес,
	|	ТаблицыИсточника.Объем                  КАК Объем,
	|	ТаблицыИсточника.Склад                  КАК Склад,
	|	ТаблицыИсточника.Распоряжение           КАК Распоряжение,
#Вставка
	|	ТаблицыИсточника.Распоряжение.КонтактноеЛицо КАК ВИЛС_КонтактноеЛицо,  // fix Suetin 27.08.2019 10:10:57
#КонецВставки	
	|	ТаблицыИсточника.ПолучательОтправитель  КАК ПолучательОтправитель,
	|	ТаблицыИсточника.ВидРаспоряжения        КАК ВидРаспоряжения,
	|	ТаблицыИсточника.Номер                  КАК Номер,
	|	ТаблицыИсточника.Адрес                  КАК Адрес,
	|	ТаблицыИсточника.АдресЗначенияПолей     КАК АдресЗначенияПолей,
	|	ТаблицыИсточника.СпособДоставки         КАК СпособДоставки,
	|	ТаблицыИсточника.Картинка               КАК Картинка,
	|	ТаблицыИсточника.Зона                   КАК Зона,
	|	ТаблицыИсточника.ЗонаПредставление      КАК ЗонаПредставление,
	|	ТаблицыИсточника.Перевозчик             КАК Перевозчик,
	|	ТаблицыИсточника.ВремяС                 КАК ВремяС,
	|	ТаблицыИсточника.ВремяПо                КАК ВремяПо,
	|	ТаблицыИсточника.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ТаблицыИсточника.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	ТаблицыИсточника.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ТаблицыИсточника.ПолеУпорядочивания     КАК ПолеУпорядочивания
	|ИЗ
	|	ИмяТаблицыИсточника КАК ТаблицыИсточника";
	
	ТекстИсточникиДвиженийКРаспределению = "";
	ТекстИсточникиРаспоряжений = "";
	
	Если ЕстьОрдерныйСклад Тогда
		
		ТекстЗапроса = ТекстЗапроса
			+ ОбщегоНазначенияУТ.РазделительЗапросовПакета()
			+ ?(ДоставкаПолучателям,
				ТекстЗапросаРаспоряженияНаДоставкуПолучателямПоОрдернойСхеме(),
				ТекстЗапросаРаспоряженияНаДоставкуОтОтправителейПоОрдернойСхеме());
		
		ИмяТаблицыКРаспределению = "ВтДвиженияКРаспределениюПоОрдернойСхеме";
		ИмяТаблицыРаспоряжений = ?(ДоставкаПолучателям,
			"ВтРаспоряженияНаДоставкуПолучателямПоОрдернойСхеме",
			"ВтРаспоряженияНаДоставкуОтОтправителейПоОрдернойСхеме");
		
		ТекстИсточникДвиженийКРаспределению = СтрЗаменить(ШаблонВыборкаДвиженийКРаспределению,
			"ИмяТаблицыИсточника",
			ИмяТаблицыКРаспределению);
		ТекстИсточникРаспоряжений = СтрЗаменить(ШаблонВыборкаРаспоряжений,
			"ИмяТаблицыИсточника",
			ИмяТаблицыРаспоряжений);
		
		ТекстИсточникиДвиженийКРаспределению = ТекстИсточникДвиженийКРаспределению;
		ТекстИсточникиРаспоряжений = ТекстИсточникРаспоряжений;
		
	КонецЕсли;
	
	Если ЕстьНеОрдерныйСклад Тогда
		ТекстЗапроса = ТекстЗапроса
			+ ОбщегоНазначенияУТ.РазделительЗапросовПакета()
			+ ?(ДоставкаПолучателям,
				ТекстЗапросаРаспоряженияНаДоставкуПолучателямБезОрдернойСхемы(),
				ТекстЗапросаРаспоряженияНаДоставкуОтОтправителейБезОрдернойСхемы());
		
		ИмяТаблицыКРаспределению = "ВтДвиженияКРаспределениюБезОрдернойСхемы";
		ИмяТаблицыРаспоряжений = ?(ДоставкаПолучателям,
			"ВтРаспоряженияНаДоставкуПолучателямБезОрдернойСхемы",
			"ВтРаспоряженияНаДоставкуОтОтправителейБезОрдернойСхемы");
		
		ТекстИсточникДвиженийКРаспределению = СтрЗаменить(ШаблонВыборкаДвиженийКРаспределению,
			"ИмяТаблицыИсточника",
			ИмяТаблицыКРаспределению);
		ТекстИсточникРаспоряжений = СтрЗаменить(ШаблонВыборкаРаспоряжений,
			"ИмяТаблицыИсточника",
			ИмяТаблицыРаспоряжений);
		
		ТекстИсточникиДвиженийКРаспределению = ?(ПустаяСтрока(ТекстИсточникиДвиженийКРаспределению),
			ТекстИсточникДвиженийКРаспределению,
			ТекстИсточникиДвиженийКРаспределению
			+ "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|"
			+ ТекстИсточникДвиженийКРаспределению);
			
		ТекстИсточникиРаспоряжений = ?(ПустаяСтрока(ТекстИсточникиРаспоряжений),
			ТекстИсточникРаспоряжений,
			ТекстИсточникиРаспоряжений
			+ "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|"
			+ ТекстИсточникРаспоряжений);
		
	КонецЕсли;
	
	ФинальныйТекстЗапросаВыборкаДвиженийКРаспределению = 
		СтрЗаменить(ШаблонВыборкаДвиженийКРаспределению,
			"ИмяТаблицыИсточника",
			"("
			+ ТекстИсточникиДвиженийКРаспределению
			+ ")");
	Если Не ДоставкаПолучателям Тогда
		ФинальныйТекстЗапросаВыборкаДвиженийКРаспределению = ФинальныйТекстЗапросаВыборкаДвиженийКРаспределению
			+
			"
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицыИсточника.Период";
	КонецЕсли;
	
	ФинальныйТекстЗапросаИсточникиРаспоряжений = 
		СтрЗаменить(ШаблонВыборкаРаспоряжений,
			"ИмяТаблицыИсточника",
			"("
			+ ТекстИсточникиРаспоряжений
			+ ")");
	
	ТекстЗапросаУпорядочивание = "";
	Если Не ДоставкаПолучателям
		И ЕстьОрдерныйСклад Тогда
		ТекстЗапросаУпорядочивание = 
		"
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицыИсточника.ЗонаПредставление,
		|	ТаблицыИсточника.Зона,
		|	ТаблицыИсточника.Распоряжение,
		|	ТаблицыИсточника.Склад,
		|	ТаблицыИсточника.Номенклатура,
		|	ТаблицыИсточника.Характеристика,
		|	ТаблицыИсточника.Назначение,
		|	ТаблицыИсточника.Серия,
		|	ТаблицыИсточника.Дата";
	Иначе
		ТекстЗапросаУпорядочивание = 
		"
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицыИсточника.ЗонаПредставление,
		|	ТаблицыИсточника.Зона,
		|	ТаблицыИсточника.ПолеУпорядочивания,
		|	ТаблицыИсточника.ПолучательОтправитель,
		|	ТаблицыИсточника.Распоряжение,
		|	ТаблицыИсточника.Склад,
		|	ТаблицыИсточника.Номенклатура,
		|	ТаблицыИсточника.Характеристика,
		|	ТаблицыИсточника.Назначение,
		|	ТаблицыИсточника.Серия,
		|	ТаблицыИсточника.Дата";
	КонецЕсли;
	
	ФинальныйТекстЗапросаИсточникиРаспоряжений = ФинальныйТекстЗапросаИсточникиРаспоряжений
		+ ТекстЗапросаУпорядочивание;
	
	ТекстЗапроса = ТекстЗапроса
		+ ОбщегоНазначенияУТ.РазделительЗапросовПакета() 
		+ ФинальныйТекстЗапросаВыборкаДвиженийКРаспределению
		+ ОбщегоНазначенияУТ.РазделительЗапросовПакета() 
		+ ФинальныйТекстЗапросаИсточникиРаспоряжений;
		
	Если Не ВыборочноеОбновление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбновляемыеРаспоряжения",
		"ЛЕВОЕ СОЕДИНЕНИЕ ОбновляемыеРаспоряжения");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("СправочникНоменклатура.ЕдиницаИзмерения", "СправочникНоменклатура"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

&ИзменениеИКонтроль("ЗаполнитьРеквизитыПоСпособуДоставки")
Процедура ВИЛС_ЗаполнитьРеквизитыПоСпособуДоставки(ЭлементыФормы, ДокОбъект, ДопИнфоИзмененоПользователем = Ложь)
	
	ПустыеРеквизиты = ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(ДокОбъект);
#Удаление
	ЗаполнитьЗначенияСвойств(ДокОбъект, ПустыеРеквизиты,
		"АдресДоставкиПеревозчика, АдресДоставкиПеревозчикаЗначенияПолей, ЗонаДоставки, ВремяДоставкиС, ВремяДоставкиПо");
#КонецУдаления
#Вставка
	ЗаполнитьЗначенияСвойств(ДокОбъект, ПустыеРеквизиты,
		//"АдресДоставкиПеревозчика, АдресДоставкиПеревозчикаЗначенияПолей, ЗонаДоставки, ВремяДоставкиС, ВремяДоставкиПо");	// begin fix Suetin 23.10.2019 2:06:42
	    "ЗонаДоставки, ВремяДоставкиС, ВремяДоставкиПо");                                                                       // end fix Suetin 23.10.2019 2:07:08
#КонецВставки
	
	Если Не ДопИнфоИзмененоПользователем Тогда
		ДокОбъект.ДополнительнаяИнформацияПоДоставке = "";
	КонецЕсли;
	
	ПолучательОтправитель = ПолучательОтправитель(ДокОбъект);
	
	Если ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
#Удаление
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада
#КонецУдаления
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи Тогда
			
		Если ЭлементыФормы.Найти("ПеревозчикПартнер") <> Неопределено
			И ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.Количество() > 0
			И ДокОбъект.ПеревозчикПартнер = Справочники.Партнеры.ПустаяСсылка() Тогда
			ДокОбъект.ПеревозчикПартнер = ЭлементыФормы.ПеревозчикПартнер.СписокВыбора[0].Значение;
		КонецЕсли;
		
	Иначе
		
		ДокОбъект.ПеревозчикПартнер = Справочники.Партнеры.ПустаяСсылка();
		
	КонецЕсли;
	
	ИмяЭлементаАдрес = ИмяЭлементаАдрес(ЭлементыФормы);
	
	Если ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
		
		Если Не ДопИнфоИзмененоПользователем Тогда
			
			Если ЗначениеЗаполнено(ДокОбъект.АдресДоставки) Тогда
				НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора,
					"АдресДоставки", ДокОбъект.АдресДоставки);
				Если Не НайденныйЭлементСЗ = Неопределено Тогда
					ДокОбъект.ДополнительнаяИнформацияПоДоставке = НайденныйЭлементСЗ.Значение.ДополнительнаяИнформацияПоДоставке;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуСоСклада
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуНаСклад
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуВПункте Тогда
		
		Если ЗначениеЗаполнено(ДокОбъект.АдресДоставки) Тогда
			НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора,
				"АдресДоставки", ДокОбъект.АдресДоставки);
			Если Не НайденныйЭлементСЗ = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДокОбъект, НайденныйЭлементСЗ.Значение,
					"ЗонаДоставки, ВремяДоставкиС, ВремяДоставкиПо")
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.НашимиСиламиСАдресаОтправителя
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки Тогда
		
		Если ЭлементыФормы.АдресПоставщика.СписокВыбора.Количество() > 0 Тогда
			ПерваяСтруктураВСписке = ЭлементыФормы[ИмяЭлементаАдрес].СписокВыбора[0].Значение;
			ЗаполнитьЗначенияСвойств(ДокОбъект,ПерваяСтруктураВСписке,,"ДополнительнаяИнформацияПоДоставке");
			Если Не ДопИнфоИзмененоПользователем Тогда
				ДокОбъект.ДополнительнаяИнформацияПоДоставке = ПерваяСтруктураВСписке.ДополнительнаяИнформацияПоДоставке;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(ДокОбъект.СпособДоставки)
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада
		Или ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада Тогда
		
		ДокОбъект.ДополнительнаяИнформацияПоДоставке = "";
		ДокОбъект.ОсобыеУсловияПеревозки = Ложь;
		ДокОбъект.ОсобыеУсловияПеревозкиОписание = "";
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВИЛС_ПолучательОтправительКонтрагент(ДокОбъект)
	Заполнение = Новый Структура("Контрагент",0);
	ЗаполнитьЗначенияСвойств(Заполнение,ДокОбъект);
	Если Заполнение.Контрагент <> 0 Тогда
		Возврат Новый Структура("ИмяПоля,Значение","Контрагент",ДокОбъект.Контрагент);
	Иначе
		ВызватьИсключение НСтр("ru = 'Получатель (отправитель) - Контрагент не определен.';
								|en = 'Recipient (sender) - Klient is not determined. '");
	КонецЕсли;
КонецФункции

Процедура ВИЛС_СкопироватьСписокЗначений(СписокПриемник, СписокИсточник, Знач ОчиститьСписок = Истина) Экспорт
	
	Если ОчиститьСписок Тогда
		СписокПриемник.Очистить();
	КонецЕсли; 
	Для Каждого Элемент Из СписокИсточник Цикл
		СписокПриемник.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;

КонецПроцедуры
