
//&После("ОбработкаЗаполнения")
//Процедура ВИЛС_ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка)
//	Перем ТаблицаТоварыКДоставке;
//	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда Возврат; КонецЕсли;
//	
//	Если ТипЗнч(ДанныеЗаполнения) = Тип("Массив") Тогда
//		ДанныеОснований = Документы.ПоручениеЭкспедитору.ДанныеОснований(ДанныеЗаполнения);
//		Для Каждого Основание Из ДанныеЗаполнения Цикл
//			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
//				ТаблицаТовары = ВИЛС_ОбработкаЗаполненияПоЗаказПоставщикуПродолжение(Объект, Основание, ДанныеОснований);
//				Если ТаблицаТоварыКДоставке = Неопределено Тогда
//					ТаблицаТоварыКДоставке = ТаблицаТовары.Скопировать();
//				Иначе
//					ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаТовары, ТаблицаТоварыКДоставке);
//				КонецЕсли;	
//			КонецЕсли;
//		КонецЦикла;
//	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
//		МассивДанныеЗаполнения = Новый Массив();
//		МассивДанныеЗаполнения.Добавить(ДанныеЗаполнения);
//		ДанныеОснований = Документы.ПоручениеЭкспедитору.ДанныеОснований(МассивДанныеЗаполнения);
//		ТаблицаТоварыКДоставке = ВИЛС_ОбработкаЗаполненияПоЗаказПоставщикуПродолжение(Объект, ДанныеЗаполнения, ДанныеОснований);
//	Иначе
//		Возврат;
//	КонецЕсли;
//	Объект.ДополнительнаяИнформация = ЗначениеВСтрокуВнутр(ТаблицаТоварыКДоставке);	
//	ДанныеЗаполнения = ТаблицаТоварыКДоставке;
//	//СтандартнаяОбработка = Ложь;
//	//ПараметрыФормы = Новый Структура("ТаблицаТоварыКДоставке", ДанныеЗаполнения);
//	//ОткрытьФорму("Документ.ЗаданиеНаПеревозку.ФормаОбъекта", ПараметрыФормы,, Истина);
//КонецПроцедуры

//Функция ВИЛС_ОбработкаЗаполненияПоЗаказПоставщикуПродолжение(Объект, ДанныеЗаполнения, ДанныеОснований)
//	
//	ТекстЗапроса = "
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|   ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)			КАК ЗаданиеНаПеревозку,
//	|   ТоварыЗаказа.Ссылка 										КАК Распоряжение,
//	|   ТоварыЗаказа.Ссылка.Склад									КАК Склад,
//	|   ТоварыЗаказа.Номенклатура									КАК Номенклатура,
//	|   ТоварыЗаказа.Характеристика									КАК Характеристика,
//	|   ТоварыЗаказа.Назначение										КАК Назначение,
//	|   ТоварыЗаказа.Количество 									КАК Количество,
//	|	ИСТИНА 														КАК ВсеТовары,
//	|   ТоварыЗаказа.Ссылка.Организация 							КАК ПолучательОтправитель,
//	|	&ТекстЗапросаВесНоменклатуры * ТоварыЗаказа.Количество 		КАК Вес,
//	|	&ТекстЗапросаОбъемНоменклатуры * ТоварыЗаказа.Количество 	КАК Объем
//	|ИЗ Документ.ЗаказПоставщику.Товары КАК ТоварыЗаказа
//	|	ГДЕ ТоварыЗаказа.Ссылка = &Заказ
//	|";
//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
//		"&ТекстЗапросаВесНоменклатуры",
//		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
//		"ТоварыЗаказа.Номенклатура.ЕдиницаИзмерения",
//		"ТоварыЗаказа.Номенклатура"));
//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
//		"&ТекстЗапросаОбъемНоменклатуры",
//		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
//		"ТоварыЗаказа.Номенклатура.ЕдиницаИзмерения",
//		"ТоварыЗаказа.Номенклатура"));
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.УстановитьПараметр("Заказ", ДанныеЗаполнения);
//	ТаблицаТоварыКДоставке = Запрос.Выполнить().Выгрузить();
//	
//	НоваяСтрокаР = Объект.Распоряжения.Добавить();
//	НоваяСтрокаР.КлючСвязи 					= Строка(Новый УникальныйИдентификатор);
//	НоваяСтрокаР.Распоряжение 				= ДанныеЗаполнения;
//	НоваяСтрокаР.Вес 						= ТаблицаТоварыКДоставке.Итог("Вес");
//	НоваяСтрокаР.Объем 						= ТаблицаТоварыКДоставке.Итог("Объем");
//	НоваяСтрокаР.Перевозчик 				= ДанныеЗаполнения.ПеревозчикПартнер;
//	НоваяСтрокаР.ВремяС						= ДанныеЗаполнения.ВремяДоставкиС;
//	НоваяСтрокаР.ВремяПо					= ДанныеЗаполнения.ВремяДоставкиПо;
//	НоваяСтрокаР.ДополнительнаяИнформация 	= ДанныеЗаполнения.ДополнительнаяИнформация;
//	Если ДанныеОснований.Склады.Количество() > 0 Тогда
//		НоваяСтрокаР.Склад = ДанныеОснований.Склады[0];
//	Иначе
//		НоваяСтрокаР.Склад = Справочники.Склады.СкладПоУмолчанию();
//	КонецЕсли;
//	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
//		Объект.Склад = НоваяСтрокаР.Склад;
//	КонецЕсли;	
//	НоваяСтрокаР.ПолучательОтправитель 		= НоваяСтрокаР.Склад;
//	НоваяСтрокаР.ДоставляетсяПолностью 		= Истина;
//	
//	НоваяСтрокаМ = Объект.Маршрут.Добавить();
//	НоваяСтрокаМ.Адрес						= ДанныеЗаполнения.АдресДоставкиПеревозчика;
//	НоваяСтрокаМ.Зона						= ДанныеЗаполнения.ЗонаДоставки;
//	НоваяСтрокаМ.ВремяС						= ДанныеЗаполнения.ВремяДоставкиС;
//	НоваяСтрокаМ.ВремяПо					= ДанныеЗаполнения.ВремяДоставкиПо;     
//	НоваяСтрокаМ.Вес 						= НоваяСтрокаР.Вес;
//	НоваяСтрокаМ.Объем 						= НоваяСтрокаР.Объем;
//	НоваяСтрокаМ.КлючСвязи 					= НоваяСтрокаР.КлючСвязи;
//	НоваяСтрокаМ.ДополнительнаяИнформация 	= ДанныеЗаполнения.ДополнительнаяИнформация;
//	НоваяСтрокаМ.АдресЗначенияПолей 		= ДанныеЗаполнения.АдресДоставкиПеревозчикаЗначенияПолей;
//	
//	Объект.ДополнительныеСвойства.Вставить("ТоварыКДоставке", ТаблицаТоварыКДоставке);
//	Объект.ЗаданиеВыполняет 				= Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик;
//	Объект.Операция 						= Перечисления.ВидыДоставки.НаСклад;
//	Возврат(ТаблицаТоварыКДоставке);
//КонецФункции	

//&Вместо("ОбработкаЗаполнения")
//Процедура ВИЛС_ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка)
//	
//	
//	Статус = 
//	Комментарий = 
//	Ответственный = Пользователи.ТекущийПользователь();
//	ДатаВремяРейсаПланС = ДанныеЗаполнения.ДатаПервогоПоступления;
//	ДатаВремяРейсаПланПо = ДанныеЗаполнения.ДатаПоступления;
//	//ТранспортноеСредство = 
//	//КурьерЭкспедитор =
//	//Водитель				=
//	Склад					= ДанныеЗаполнения.Склад;
//	
//	
//	
//	ДокументПоручение = Документы.ПоручениеЭкспедитору.СоздатьДокумент();
//	ДокументПоручениеСсылка = ДокументПоручение.ПолучитьСсылкуНового();
//	
//	
//	
//	Если ДокументПоручение.Основания.Количество() > 0 Тогда
//		
//		ДанныеОснований = Документы.ПоручениеЭкспедитору.ДанныеОснований(ДокументПоручение.Основания.ВыгрузитьКолонку("Основание"));
//		
//		Если ДанныеОснований.Пункты.Количество() > 0 Тогда
//			ДокументПоручение.Пункт = ДанныеОснований.Пункты[0];
//		КонецЕсли;
//		Если ДанныеОснований.Склады.Количество() > 0 Тогда
//			ДокументПоручение.Склад = ДанныеОснований.Склады[0];
//		Иначе
//			ДокументПоручение.Склад = Справочники.Склады.СкладПоУмолчанию();
//		КонецЕсли;
//		Если ДанныеОснований.Контакты.Количество() > 0 Тогда
//			ДокументПоручение.КонтактноеЛицо = ДанныеОснований.Контакты[0];
//		КонецЕсли;
//		Если ДанныеОснований.СпособыДоставки.Количество() = 1 Тогда
//			ДокументПоручение.СпособДоставки = ДанныеОснований.СпособыДоставки[0];
//		КонецЕсли;
//		
//		Возврат;
//	ИначеЕсли ДанныеЗаполнения.Количество() = 1 Тогда
//		ДанныеЗаполнения = ДанныеЗаполнения[0];
//	Иначе
//		Возврат;
//	КонецЕсли;
//		
//	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Склады") Тогда
//		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ЭтоГруппа") Тогда
//			ВызватьИсключение НСтр("ru = 'Не предусмотрен ввод поручения экспедитору на основании группы складов.';
//									|en = 'Entry of instruction for the shipping agent based on the warehouse group is not available.'");
//		Иначе
//			ДокументПоручение.Пункт = ДанныеЗаполнения;
//			ДокументПоручение.Склад = ДанныеЗаполнения;
//			ДокументПоручение.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуВПункте;
//		КонецЕсли;
//	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Партнеры")
//		Или ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
//		ДокументПоручение.Пункт = ДанныеЗаполнения;
//		ДокументПоручение.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуВПункте;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ДокументПоручение.Пункт)
//		И Не ЗначениеЗаполнено(ДокументПоручение.КонтактноеЛицо)
//		И ТипЗнч(ДокументПоручение.Пункт) = Тип("СправочникСсылка.Партнеры") Тогда
//		ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(ДокументПоручение.Пункт, ДокументПоручение.КонтактноеЛицо);
//	КонецЕсли;
//КонецПроцедуры
