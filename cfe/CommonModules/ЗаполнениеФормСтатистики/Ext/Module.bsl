// Рассчитывает значения статистических показателей - заполняет колонку Значение в переданной таблице.
//
// Параметры:
//	Показатели - ТаблицаЗначений - данные, которые нужно рассчитать.
//              Структура таблицы описана в НовыйОписаниеПоказателей().
// 	ТаблицаРасшифровки - ТаблицаЗначений - Таблица расшифровки показателей.
//	ОтборПоОбособленнымПодразделениям - Булево, Неопределено - Признак отбора по обособленным подразделениям.
//
&ИзменениеИКонтроль("РассчитатьЗначенияПоказателей")
Процедура ВИЛС_РассчитатьЗначенияПоказателей(Показатели, ТаблицаРасшифровки, ОтборПоОбособленнымПодразделениям = Неопределено) Экспорт
		
	Перечисления.ДополнительныеАлгоритмыЗаполненияФормСтатистики.ПрименитьДоРасчетаПоказателей(Показатели, ТаблицаРасшифровки);
	
	ХранилищеНастроек = ПодготовитьХранилищеНастроек(Показатели);
	
	// В некоторых случаях для выполнения настроек и получения данных используются разные схемы компоновки.
	// При этом один источник данных может использовать _набор_, несколько схем - для разных характеристик разные схемы.
	// Поэтому в некоторых случаях все потребные показатели одного объекта наблюдения нельзя рассчитать одним запросом.
	// Для того, чтобы идентифицировать набор показателей одного объекта, которые могут быть рассчитаны совместно,
	// используется "технологическая" колонка РазделИсточникаДанных. Она будет удалена по окончании процедуры.
	Показатели.Колонки.Добавить("РазделИсточникаДанных", Новый ОписаниеТипов("Строка")); 
	Для Каждого Показатель Из Показатели Цикл
		Показатель.РазделИсточникаДанных = Перечисления.ИсточникиДанныхСтатистическихПоказателей.РазделИсточникаДанных(
			Показатель.ИсточникДанных,
			Показатель.Характеристика);
	КонецЦикла;
	
	// Рассчитываем не каждый показатель отдельно, а группируем их с точки зрения эффективности расчета - 
	// одним запросом рассчитаем все характеристики объекта наблюдения за конкретный период.
	ИзмеренияДляРасчета = "ОбъектНаблюдения, РазделИсточникаДанных, Детализировать, Аналитика, Организация, НачалоПериода, КонецПериода, НастройкаИзДополнительныхАлгоритмов, Группировка";
	ИндексОтбораХарактеристик = Показатели.Индексы.Добавить(ИзмеренияДляРасчета); // Индекс удалим в конце процедуры.
	
	ЗапросыДляВыполнения = Показатели.Скопировать();
	ЗапросыДляВыполнения.Свернуть(ИзмеренияДляРасчета);
	
	ПараметрыЗапроса = Новый Структура(ИзмеренияДляРасчета);
	
	ВнешниеДанные = Новый Структура; // Будут дополняться ниже по потребности.
		
	Для Каждого ОписаниеЗапроса Из ЗапросыДляВыполнения Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ОписаниеЗапроса);
		Характеристики = Показатели.НайтиСтроки(ПараметрыЗапроса); // Каждый запрос позволяет получить набор характеристики.
		
		СхемаКомпоновки = Перечисления.ИсточникиДанныхСтатистическихПоказателей.СхемаКомпоновкиДанных(
			ОписаниеЗапроса.ОбъектНаблюдения.ИсточникДанных,
			ОписаниеЗапроса.РазделИсточникаДанных);
			
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
		
		Если ОписаниеЗапроса.Группировка Тогда
			КомпоновщикНастроек.Настройки.Структура.Очистить();
			Группировка = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			
			Для Каждого Характеристика Из Характеристики Цикл
				ПолеГруппировки = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы.Найти(Характеристика.Характеристика);
				Если ПолеГруппировки <> Неопределено И НЕ ПолеГруппировки.Ресурс Тогда
					НовоеПолеГруппировки 		= Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					НовоеПолеГруппировки.Поле 	= ПолеГруппировки.Поле;
				КонецЕсли;
			КонецЦикла;
			
			Если Группировка.ПоляГруппировки.Элементы.Количество() = 0 Тогда
				Группировка.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
			КонецЕсли;
			
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(КомпоновщикНастроек.Настройки, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
			Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		КонецЕсли;
		
		// Создадим дерево настроек, будем складывать в него настройки 
		// в разрезе объектов наблюдения и аналитики.
		ДеревоНастроек = НовыйДеревоНастроек();
		
		// Подготовим отбор из настройки и настройки из дополнительных алгоритмов.
		// Примененная настройка затем передается в параметры для формирования расшифровки.
		ПримененнаяНастройка = Новый ОтборКомпоновкиДанных;
		
		Настройка = ПолучитьНастройку(ХранилищеНастроек, ОписаниеЗапроса, ДеревоНастроек);
		
		Если Настройка <> Неопределено Тогда
			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(ПримененнаяНастройка, Настройка, Ложь);
		КонецЕсли;
		
		НастройкаИзДополнительныхАлгоритмов = Неопределено;
		Если ЗначениеЗаполнено(ОписаниеЗапроса.НастройкаИзДополнительныхАлгоритмов) Тогда
			НастройкаИзДополнительныхАлгоритмов = ПолучитьОтборКомпоновкиДанных(ОписаниеЗапроса.НастройкаИзДополнительныхАлгоритмов);
			Если НастройкаИзДополнительныхАлгоритмов <> Неопределено Тогда
				// Добавим строку в дерево настроек для настройки из дополнительных алгоритмов.
				СтрокаДерева = ДеревоНастроек.Добавить();
				
				СтрокаДерева.ОбъектНаблюдения 	= ОписаниеЗапроса.ОбъектНаблюдения;
				СтрокаДерева.Отбор 				= ОбщегоНазначения.ЗначениеВСтрокуXML(НастройкаИзДополнительныхАлгоритмов);
				СтрокаДерева.Аналитика 			= ОписаниеЗапроса.Аналитика;
				СтрокаДерева.ГруппаНастроек 	= 1;
				
				КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(ПримененнаяНастройка, НастройкаИзДополнительныхАлгоритмов, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		// Наложим отбор по обособленному подразделению.
		Если ОтборПоОбособленнымПодразделениям <> Неопределено Тогда
			
			// Добавим строку в дерево настроек для настройки из дополнительных алгоритмов.
			СтрокаДерева = ДеревоНастроек.Добавить();
			
			СтрокаДерева.ОбъектНаблюдения 	= ОписаниеЗапроса.ОбъектНаблюдения;
			СтрокаДерева.Отбор 				= ОбщегоНазначения.ЗначениеВСтрокуXML(ОтборПоОбособленнымПодразделениям);
			СтрокаДерева.Аналитика 			= ОписаниеЗапроса.Аналитика;
			СтрокаДерева.ГруппаНастроек 	= 1;
			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(ПримененнаяНастройка, ОтборПоОбособленнымПодразделениям, Ложь);
			
		КонецЕсли;
		
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, ПримененнаяНастройка, Ложь);
		
		// Передадим значения параметров.
		Для Каждого КлючИЗначение Из ПараметрыЗапроса Цикл
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.Настройки, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		ПараметрКонецПериода = Неопределено;
		// Добавим дополнительные параметры.
		Если ПараметрыЗапроса.Свойство("КонецПериода", ПараметрКонецПериода) Тогда
			
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.Настройки, "КонецПериодаГраница", Новый Граница(КонецДня(ПараметрКонецПериода), ВидГраницы.Включая));
			
		КонецЕсли;
		
		// Добавим поля для получения только тех характеристик, которые требуется указать в форме статистики.
		Для Каждого Характеристика Из Характеристики Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки, Характеристика.Характеристика);
		КонецЦикла;
		
		КомпоновщикНастроек.Восстановить();
		НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
		
		// Получим данные
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки   = КомпоновщикМакета.Выполнить(
			СхемаКомпоновки,
			НастройкиДляКомпоновкиМакета,
			, // ДанныеРасшифровки
			, // МакетОформления
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
		ПодготовитьВнешниеДанные(МакетКомпоновки, ВнешниеДанные);
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеДанные);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		РезультатЗапроса = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Если РезультатЗапроса.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыЗапроса.Группировка Тогда
			
			ПоляОтбора = Новый Массив;
			
			Для Каждого ПолеРезультата Из РезультатЗапроса.Колонки Цикл
				
				ДоступноеПолеОтбора = НастройкиДляКомпоновкиМакета.ДоступныеПоляВыбора.Элементы.Найти(ПолеРезультата.Имя);
				
				Если ДоступноеПолеОтбора <> Неопределено И НЕ ДоступноеПолеОтбора.Ресурс Тогда
					
					ПоляОтбора.Добавить(Строка(ДоступноеПолеОтбора.Поле));
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
				
				ЗначенияАналитики = Новый Массив;
				ЗначенияАналитики.Добавить(РезультатЗапроса.Индекс(СтрокаРезультата) + 1);
				Для Каждого ПолеОтбора Из ПоляОтбора Цикл
					ЗначенияАналитики.Добавить(СтрокаРезультата[ПолеОтбора]);
				КонецЦикла;
				
				ЗначениеАналитики = СтрСоединить(ЗначенияАналитики, ", ");
				
				Для Каждого Характеристика Из Характеристики Цикл
					НовыйПоказатель = Показатели.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйПоказатель, Характеристика);
					НовыйПоказатель.Значение = СтрокаРезультата[Характеристика.Характеристика];
					НовыйПоказатель.Аналитика = "" + НовыйПоказатель.ДополнительныйАлгоритм + Формат(РезультатЗапроса.Индекс(СтрокаРезультата),"ЧГ=");
					
					ПримененнаяНастройкаГруппировки = Новый ОтборКомпоновкиДанных;
					КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(ПримененнаяНастройкаГруппировки, ПримененнаяНастройка, Ложь);
					
					Для Каждого ПолеОтбора Из ПоляОтбора Цикл
						Если ПолеОтбора <> Характеристика.Характеристика Тогда
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПримененнаяНастройкаГруппировки, ПолеОтбора, СтрокаРезультата[ПолеОтбора]);
						КонецЕсли;
					КонецЦикла;
					
					НовыйПоказатель.Аналитика = ЗначениеАналитики;
					НовыйПоказатель.ПримененнаяНастройка = ОбщегоНазначения.ЗначениеВСтрокуXML(ПримененнаяНастройкаГруппировки);
					
					ДеревоНастроекГруппировки = ДеревоНастроек.Скопировать();
					
					СтрокаДерева = ДеревоНастроекГруппировки.Добавить();
					
					СтрокаДерева.ОбъектНаблюдения 	= ОписаниеЗапроса.ОбъектНаблюдения;
					СтрокаДерева.Отбор 				= ОбщегоНазначения.ЗначениеВСтрокуXML(ПримененнаяНастройкаГруппировки);
					СтрокаДерева.Аналитика 			= ЗначениеАналитики;
					СтрокаДерева.ГруппаНастроек 	= 2;
					
					НовыйПоказатель.ДеревоНастроек = ДеревоНастроекГруппировки;
					
				КонецЦикла;
			КонецЦикла;
			
			// Удалим исходные характеристики
			Для Каждого Характеристика Из Характеристики Цикл
				Показатели.Удалить(Характеристика);
			КонецЦикла;
			
		Иначе
			
			// Запомним итоговую настройку
			ПримененнаяНастройкаВXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ПримененнаяНастройка);
			
			Для Каждого Характеристика Из Характеристики Цикл
#Удаление				
				Характеристика.Значение = РезультатЗапроса[0][Характеристика.Характеристика]; // Результат содержит не более одной строки.
				// Значения сохраняемые для расшифровки отчета
				Характеристика.ДеревоНастроек 		= ДеревоНастроек;
				Характеристика.ПримененнаяНастройка = ПримененнаяНастройкаВXML;
#КонецУдаления				
#Вставка				
				Колонки = РезультатЗапроса.Колонки;
				Если не Колонки.Найти(Характеристика.Характеристика) = Неопределено Тогда
					Характеристика.Значение = РезультатЗапроса[0][Характеристика.Характеристика]; // Результат содержит не более одной строки.
					// Значения сохраняемые для расшифровки отчета
					Характеристика.ДеревоНастроек 		= ДеревоНастроек;
					Характеристика.ПримененнаяНастройка = ПримененнаяНастройкаВXML;
				КонецЕсли;
#КонецВставки			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Некоторые показатели рассчитываются в результате применения доп. алгоритмов после основного расчета (в частности, вычитание).
	// В этом случае для результирующего показателя уже будет заполнена расшифровка (см. ПрименитьПослеРасчетаПоказателей()).
	// Для таких показателей вводим особый признак, чтобы далее при заполнении контейнера статистики не дублировать расшифровку.
	Показатели.Колонки.Добавить("РасшифровкаЗаполнена", Новый ОписаниеТипов("Булево")); 
	
	Перечисления.ДополнительныеАлгоритмыЗаполненияФормСтатистики.ПрименитьПослеРасчетаПоказателей(Показатели, ТаблицаРасшифровки);
	
	Показатели.Индексы.Удалить(ИндексОтбораХарактеристик);
	Показатели.Колонки.Удалить("РазделИсточникаДанных");
	
КонецПроцедуры
