
//&Вместо("ЗаполнитьОперативныеВзаиморасчеты")
//Процедура ВИЛС_ЗаполнитьОперативныеВзаиморасчеты(ОсновныеПараметры) Экспорт
//	
//	#Область ИнициализацияЗапросаИПеременных
//	
//	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
//	ВалютаУправленческогоУчета     = Константы.ВалютаУправленческогоУчета.Получить();
//	Организация                    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновныеПараметры.АналитикаУчетаПоПартнерам, "Организация");
//	
//	//Если график исполнения в договоре, то вместо графика заказа будет уточняться график договора.
//	//Если пользователь каким-то образом ввел заказы с графиками по такому договору, то все этапы таких заказов будут отнесены к графику договора
//	//и закрываться будут по ФИФО независимо от привязки накладных к заказам
//	Если ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
//		ГрафикИсполненияДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновныеПараметры.ОбъектРасчетов,"ГрафикИсполненияДоговора");
//		ГрафикВДоговоре = ЗначениеЗаполнено(ГрафикИсполненияДоговора);
//	Иначе
//		ГрафикИсполненияДоговора = Неопределено;
//		ГрафикВДоговоре = ЛОЖЬ;
//	КонецЕсли;
//	
//	РазмерПорцииЗаписи = РазмерПорцииЗаписи();
//	ХозяйственныеОперацииНеОтгрузка = ХозяйственныеОперацииНеОтгрузка();
//	
//	//Хозяйственные операции для заполнения.
//	ХозяйственныеОперации = Новый Соответствие; 
//	ХозяйственныеОперации.Вставить("ПереносАванса", Перечисления.ХозяйственныеОперации.ПереносАванса);
//	
//	Если ОсновныеПараметры.ЭтоРасчетыСКлиентами Тогда
//		
//		ХозяйственныеОперации.Вставить("ЗачетАванса",             Перечисления.ХозяйственныеОперации.ЗачетАвансаКлиента);
//		ХозяйственныеОперации.Вставить("ПогашениеЗадолженности",  Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиКлиента);
//		ХозяйственныеОперации.Вставить("ВозвратАванса",           Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
//		ХозяйственныеОперации.Вставить("ПереоценкаПоложительная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль);
//		ХозяйственныеОперации.Вставить("ПереоценкаОтрицательная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток);
//		ХозяйственныеОперации.Вставить("Планирование",            Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента);
//		
//		РасчетыПоЗаказу = ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказКлиента")
//						ИЛИ ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
//		//++ НЕ УТКА
//		РасчетыПоЗаказу = РасчетыПоЗаказу ИЛИ ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказДавальца");
//		//-- НЕ УТКА
//		
//		ИмяРегистраРасчетов = "РасчетыСКлиентамиПоСрокам";
//		ИмяРегистраПланаОплат = "РасчетыСКлиентамиПланОплат";
//		ИмяРегистраПланаОтгрузкиПоставки = "РасчетыСКлиентамиПланОтгрузок";
//		
//		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
//	Иначе
//		
//		ХозяйственныеОперации.Вставить("ЗачетАванса",             Перечисления.ХозяйственныеОперации.ЗачетАвансаПоставщику);
//		ХозяйственныеОперации.Вставить("ПогашениеЗадолженности",  Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиПоставщику);
//		ХозяйственныеОперации.Вставить("ВозвратАванса",           Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
//		ХозяйственныеОперации.Вставить("ПереоценкаПоложительная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток);
//		ХозяйственныеОперации.Вставить("ПереоценкаОтрицательная", Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль);
//		ХозяйственныеОперации.Вставить("Планирование",            Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику);
//		
//		РасчетыПоЗаказу = ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказПоставщику");
//		//++ НЕ УТ
//		РасчетыПоЗаказу = РасчетыПоЗаказу ИЛИ ТипЗнч(ОсновныеПараметры.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказПереработчику");
//		//-- НЕ УТ
//		
//		ИмяРегистраРасчетов = "РасчетыСПоставщикамиПоСрокам";
//		ИмяРегистраПланаОплат = "РасчетыСПоставщикамиПланОплат";
//		ИмяРегистраПланаОтгрузкиПоставки = "РасчетыСПоставщикамиПланПоставок";
//		
//		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
//	КонецЕсли;
//	
//	ГлобальныеПеременные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОсновныеПараметры);
//	ГлобальныеПеременные.Вставить("ЕжедневнаяПереоценка", Константы.ПереоцениватьВалютныеСредстваПоДням.Получить());
//	//Для уточнения плана оплат - в переменной хранится последний момент времени плана оплат,
//	//чтобы при добавлении записи в план оплат можно было сразу определить есть ли планы оплат с датой больше, чем добавляемая запись.
//	ГлобальныеПеременные.Вставить("МаксимальныйПорядокПланаОплат", "");
//	ГлобальныеПеременные.Вставить("ГрафикВДоговоре",               ГрафикВДоговоре);
//	ГлобальныеПеременные.Вставить("ПорядокПереоценки",             Новый Соответствие);
//	ГлобальныеПеременные.Вставить("РазмерПорцииЗаписи",            РазмерПорцииЗаписи);
//	ГлобальныеПеременные.Вставить("Организация",                   Организация);
//	ГлобальныеПеременные.Вставить("ХозяйственныеОперации",         ХозяйственныеОперации);
//	
//	Запрос                         = Новый Запрос;
//	Менеджер                       = Новый МенеджерВременныхТаблиц;
//	Запрос.МенеджерВременныхТаблиц = Менеджер;
//	
//	Запрос.УстановитьПараметр("ОбъектРасчетов",             ГлобальныеПеременные.ОбъектРасчетов);
//	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",  ГлобальныеПеременные.АналитикаУчетаПоПартнерам);
//	Запрос.УстановитьПараметр("ВалютаРасчетов",             ГлобальныеПеременные.ВалютаРасчетов);
//	Запрос.УстановитьПараметр("ЭтоРасчетыСКлиентами",       ГлобальныеПеременные.ЭтоРасчетыСКлиентами);
//	Запрос.УстановитьПараметр("Регистратор",                ГлобальныеПеременные.Регистратор);
//	Запрос.УстановитьПараметр("Порядок",                    ГлобальныеПеременные.Порядок);
//	
//	Если ЗначениеЗаполнено(ГлобальныеПеременные.Порядок) Тогда
//		НачалоДняПорядка = Дата(Лев(ГлобальныеПеременные.Порядок,8));
//	Иначе
//		НачалоДняПорядка = Дата(1,1,1,1,1,2);
//	КонецЕсли;
//	Запрос.УстановитьПараметр("НачалоДняПорядка",           НачалоДняПорядка);
//	
//	Запрос.УстановитьПараметр("ВалютаУпр",                  ВалютаУправленческогоУчета);
//	Запрос.УстановитьПараметр("ВалютаРегл",                 ВалютаРегламентированногоУчета);
//	ПорядокЗачетаПоДатеПлатежа = Константы.ПорядокЗачетаДокументовПоДатеОперации.Получить() = 1;
//	Запрос.УстановитьПараметр("ПорядокЗачетаПоДатеПлатежа", ПорядокЗачетаПоДатеПлатежа);
//	
//	Запрос.УстановитьПараметр("Организация",                Организация);
//	Запрос.УстановитьПараметр("ГрафикВДоговоре",            ГрафикВДоговоре);
//	Запрос.УстановитьПараметр("ГрафикИсполненияДоговора",   ГрафикИсполненияДоговора);
//	Запрос.УстановитьПараметр("РасчетыПоЗаказу",            РасчетыПоЗаказу);
//	Запрос.УстановитьПараметр("РазмерПорцииЗаписи",         РазмерПорцииЗаписи);
//	Запрос.УстановитьПараметр("ТипРасчетов",                ТипРасчетов);
//	
//	Запрос.УстановитьПараметр("СписокТиповЗаказов",         СписокТиповРегистраторовПланов());
//	Запрос.УстановитьПараметр("НепересчитываемыеХО",        НепересчитываемыеХозяйственныеОперации());
//	
//	#КонецОбласти
//	
//	//Движения до начала пересчета и остатки.
//	СформироватьВТДанныхРегистровДоНачалаРасчетов(Запрос, ГлобальныеПеременные);
//	//Данные регистров с порядком меньше порядка начала расчета, далее дополняются.
//	ТаблицаРасчетовПоСрокам     = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраРасчетов);
//	ТаблицаПланОплат            = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраПланаОплат);
//	ТаблицаПланОтгрузокПоставок = ЗаписиДоНачалаРасчета(Запрос, ГлобальныеПеременные, ИмяРегистраПланаОтгрузкиПоставки);

//	//Движения после начала пересчета и остатки до начала пересчета для распределения.
//	РасчетыОтгрузкиПоставки     = ПолучитьОтгрузкиПоставки(Запрос, ГлобальныеПеременные);
//	Если ПорядокЗачетаПоДатеПлатежа Тогда
//		РасчетыОтгрузкиПоставки.Индексы.Добавить("ЕстьОстаток, ПорядокЗачетаПоДатеПлатежа");
//	КонецЕсли;
//	
//	//Учтены только приходы по заказам, графикам и предоплатным накладным.
//	//Остальные расходы и приходы добавляются при распределении фактических взаиморасчетов.
//	ПланыОплат                 = ПолучитьПланыОплат(Запрос, ГлобальныеПеременные);
//	ПланыОтгрузокПоставок      = ПолучитьПланыОтгрузокПоставок(Запрос, ГлобальныеПеременные);
//	РасчетыОплаты              = ПолучитьОплаты(Запрос, ГлобальныеПеременные);
//	
//	НужнаПереоценка = (ГлобальныеПеременные.ВалютаРасчетов <> ВалютаРегламентированногоУчета 
//			ИЛИ ГлобальныеПеременные.ВалютаРасчетов <> ВалютаУправленческогоУчета)
//		И РасчетыОтгрузкиПоставки.Количество() > 0
//		И НЕ ОсновныеПараметры.НачальноеЗаполнение;
//	
//	Если НужнаПереоценка Тогда
//		ДатаНачалаКурсов = Мин(РасчетыОтгрузкиПоставки[0].Период,
//									?(РасчетыОплаты.Количество() > 0,
//										РасчетыОплаты[0].Период,
//										РасчетыОтгрузкиПоставки[0].Период));
//		ТаблицаКурсовВалют = ПолучитьКурсыВалют(Запрос, ДатаНачалаКурсов, ГлобальныеПеременные);
//		ГлобальныеПеременные.Вставить("ТаблицаКурсовВалют", ТаблицаКурсовВалют);
//		
//		ДокументыРасчетаКурсовыхРазниц = Документы.РасчетКурсовыхРазниц.ДокументыПереоценки(Организация,
//			?(РасчетыОтгрузкиПоставки.Количество() > 0, РасчетыОтгрузкиПоставки[0].ДатаВозникновения, ТекущаяДатаСеанса()),
//			ТекущаяДатаСеанса(),
//			ГлобальныеПеременные.ЭтоРасчетыСКлиентами);
//	КонецЕсли;
//	
//	ГлобальныеПеременные.Вставить("ДокументыРасчетаКурсовыхРазниц", ДокументыРасчетаКурсовыхРазниц);
//	
//	//Добавляем приходные записи планов отгрузок.
//	Для Каждого Стр Из ПланыОтгрузокПоставок Цикл
//		Если НЕ Стр.ПриходДобавлен Тогда
//			НовСтр = ТаблицаПланОтгрузокПоставок.Добавить();
//			НовСтр.ВидДвижения               = ВидДвиженияНакопления.Приход;
//			НовСтр.ДокументРегистратор       = Стр.Регистратор;
//			НовСтр.ДокументПлан              = Стр.Регистратор;
//			НовСтр.Период                    = Стр.Период;
//			НовСтр.ДатаВозникновения         = Стр.ДатаВозникновения;
//			НовСтр.ДатаПлановогоПогашения    = Стр.ДатаПлановогоПогашения;
//			НовСтр.Сумма                     = Стр.КОтгрузкеПоставке;
//			НовСтр.ПорядокЗачета             = Стр.ПорядокОперации;
//			НовСтр.ПорядокОперации           = Стр.ПорядокОперации;
//		КонецЕсли;
//	КонецЦикла;
//	
//	//Для определения курса корректировки реализации в минус.
//	//Ключ     - ДокументСсылка.РеализациТоваровУслуг, ДокументСсылка.АктВыполненныхРабот
//	//Значение - Структура
//	//     * СуммаДокумента, СуммаДокументаРегл, СуммаДокументаУпр - нужны для определения среднего курса реализации при проведении корректировок.
//	ДанныеНакладных = Новый Соответствие;
//	ТаблицаДанныхНакладных = ПолучитьДанныеНакладных(Запрос);
//	Для Каждого Строка Из ТаблицаДанныхНакладных Цикл
//		ДанныеНакладных.Вставить(Строка.Накладная,
//									СтруктураСумм(Строка.Сумма,
//													Строка.СуммаРегл,
//													Строка.СуммаУпр));
//	КонецЦикла;
//	ГлобальныеПеременные.Вставить("ДанныеНакладных", ДанныеНакладных);
//	
//	ЗаписейОплаты           = РасчетыОплаты.Количество();
//	ЗаписейОтгрузкиПоставки = РасчетыОтгрузкиПоставки.Количество();
//	ЗаписейОбработать       = ЗаписейОплаты + ЗаписейОтгрузкиПоставки;
//	
//	Индексы = Новый Структура;
//	//Индекс текущей обрабатываемой строки отгрузок.
//	Индексы.Вставить("ИндексОтгрузкиПоставки", 0);
//	//Индекс текущей обрабатываемой строки оплат.
//	Индексы.Вставить("ИндексОплаты", 0);
//	
//	//Для распределения копеек в рамках документа.
//	ТекущийДокументОплаты           = Неопределено;
//	ТекущийДокументОтгрузкиПоставки = Неопределено;
//	
//	//Сколько строк отгрузки пропущено для зачета корректировкой реализации.
//	ПропускОтгрузкиПоставки = 0;
//	
//	#Область РасчетФактическойЗадолженности
//	
//	Пока Индексы.ИндексОплаты + Индексы.ИндексОтгрузкиПоставки < ЗаписейОбработать Цикл
//		
//		Если Индексы.ИндексОплаты <= ЗаписейОплаты - 1 И Индексы.ИндексОтгрузкиПоставки <= ЗаписейОтгрузкиПоставки - 1 Тогда 
//			
//			СтрокаОплаты           = РасчетыОплаты[Индексы.ИндексОплаты];
//			СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[Индексы.ИндексОтгрузкиПоставки];
//			
//			//Оплата раньше отгрузки.
//			Если СтрокаОплаты.ПорядокОперации < СтрокаОтгрузкиПоставки.ПорядокОперации 
//				//В пределах регистратора (при расчетах по накладным) должен происходить зачет аванса.
//				ИЛИ СтрокаОплаты.Регистратор = СтрокаОтгрузкиПоставки.Регистратор Тогда
//				
//				//Накладную к корректировке не нашли, возвращаемся по стеку отгрузок/поставок и снимаем флаг Корректировка у оплаты.
//				Если ПропускОтгрузкиПоставки <> 0 И СтрокаОплаты.ЭтоКорректировка Тогда
//					ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
//					Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
//					ПропускОтгрузкиПоставки = 0;
//					Продолжить;
//				КонецЕсли;
//				
//				//Приход предоплаты.
//				Если НЕ СтрокаОплаты.ПриходДобавлен И СтрокаОтгрузкиПоставки.Сумма <> 0 Тогда
//					ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
//					ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОплаты, "Оплата");
//				КонецЕсли;
//				
//				//Уменьшаем план отгрузки, если есть.
//				Если НЕ СтрокаОтгрузкиПоставки.ПланОтгрузокПоставокСписан Тогда
//					СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, СтрокаОтгрузкиПоставки, ПланыОтгрузокПоставок);
//				КонецЕсли;
//				
//				Если СтрокаОтгрузкиПоставки.Сумма <> 0 Тогда
//					
//					//При порядке зачета по датам платежа могут быть документы отгрузки/поставки приоритетнее текущего
//					//Поищем их и увеличим пропуск строк отгрузки поставки
//					Если ПропускОтгрузкиПоставки = 0 И ПорядокЗачетаПоДатеПлатежа 
//						И Индексы.ИндексОтгрузкиПоставки < ЗаписейОтгрузкиПоставки - 1 Тогда
//						
//						ПорядкиЗачета = РасчетыОтгрузкиПоставки.Скопировать(Новый Структура("ЕстьОстаток", ИСТИНА),"ПорядокЗачетаПоДатеПлатежа");
//						ПорядкиЗачета.Сортировать("ПорядокЗачетаПоДатеПлатежа ВОЗР");
//						СтрокаПорядков = РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("ЕстьОстаток, ПорядокЗачетаПоДатеПлатежа", ИСТИНА, ПорядкиЗачета[0].ПорядокЗачетаПоДатеПлатежа))[0];
//						Индекс = РасчетыОтгрузкиПоставки.Индекс(СтрокаПорядков);
//						
//						Если Индекс <> Индексы.ИндексОтгрузкиПоставки Тогда
//							ПропускОтгрузкиПоставки = Индекс - Индексы.ИндексОтгрузкиПоставки;
//							Индексы.ИндексОтгрузкиПоставки = Индекс;
//							Продолжить;
//						КонецЕсли;
//						
//					КонецЕсли;
//					
//					//Переброс аванса на расчетный документ - накладную.
//					НеОтгрузка = ХозяйственныеОперацииНеОтгрузка.Найти(СтрокаОтгрузкиПоставки.ХозяйственнаяОперация) <> Неопределено;
//					ДвойнаяЗаписьНеНужна = НеОтгрузка;
//					
//					Если ТекущийДокументОплаты <> СтрокаОплаты.РасчетныйДокумент Тогда
//						ПредоплатаРаспределеноРегл = 0;
//						ПредоплатаРаспределеноУпр  = 0;
//						ТекущийДокументОплаты      = СтрокаОплаты.РасчетныйДокумент;
//					КонецЕсли;
//					
//					Если ТекущийДокументОтгрузкиПоставки <> СтрокаОтгрузкиПоставки.РасчетныйДокумент Тогда
//						ДолгРаспределеноРегл       = 0;
//						ДолгРаспределеноУпр        = 0;
//						ТекущийДокументОтгрузкиПоставки = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
//					КонецЕсли;
//					
//					//Добавляем запись списания предоплаты.
//					НовСтр_Предоплата_Расход                          = ТаблицаРасчетовПоСрокам.Добавить();
//					НовСтр_Предоплата_Расход.ВидДвижения              = ВидДвиженияНакопления.Расход;
//					НовСтр_Предоплата_Расход.ДокументРегистратор      = СтрокаОтгрузкиПоставки.Регистратор;
//					НовСтр_Предоплата_Расход.ВалютаДокумента          = СтрокаОтгрузкиПоставки.ВалютаДокумента;
//					НовСтр_Предоплата_Расход.Период                   = СтрокаОтгрузкиПоставки.Период;
//					НовСтр_Предоплата_Расход.РасчетныйДокумент        = СтрокаОплаты.РасчетныйДокумент;
//					НовСтр_Предоплата_Расход.ДатаВозникновения        = СтрокаОплаты.ДатаВозникновения;
//					НовСтр_Предоплата_Расход.ДатаПлановогоПогашения   = Дата(1,1,1);
//					НовСтр_Предоплата_Расход.ПорядокЗачета            = СтрокаОплаты.ПорядокЗачетаПоДатеПлатежа;
//					НовСтр_Предоплата_Расход.ПорядокОперации          = СтрокаОтгрузкиПоставки.ПорядокОперации;
//					НовСтр_Предоплата_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
//					НовСтр_Предоплата_Расход.СвязанныйДокумент        = СтрокаОплаты.СвязанныйДокумент;
//					
//					НовСтр_Предоплата_Расход.КорОбъектРасчетов        = СтрокаОплаты.КорОбъектРасчетов;
//					НовСтр_Предоплата_Расход.КорАналитикаУчетаПоПартнерам = СтрокаОплаты.КорАналитикаУчетаПоПартнерам;
//					
//					СуммаСписания = Мин(СтрокаОплаты.Сумма, СтрокаОтгрузкиПоставки.Сумма);
//					
//					//Возврат аванса с ручным курсом отражаем по курсу возврата. Взаимозачет всегда по своему курсу.
//					Если (СтрокаОтгрузкиПоставки.ЭтоВозвратАванса ИЛИ СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности)
//						И СтрокаОтгрузкиПоставки.РучнойКурсРегл Тогда
//						ПредоплатаРеглПредв = СтрокаОтгрузкиПоставки.СуммаРегл / СтрокаОтгрузкиПоставки.Сумма * СуммаСписания;
//					//Остальные авансы по курсу аванса.
//					Иначе
//						ПредоплатаРеглПредв = СтрокаОплаты.СуммаРегл / СтрокаОплаты.Сумма * СуммаСписания;
//					КонецЕсли;
//					
//					Если (СтрокаОтгрузкиПоставки.ЭтоВозвратАванса ИЛИ СтрокаОтгрузкиПоставки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности)
//						И СтрокаОтгрузкиПоставки.РучнойКурсУпр Тогда
//						ПредоплатаУпрПредв = СтрокаОтгрузкиПоставки.СуммаУпр / СтрокаОтгрузкиПоставки.Сумма * СуммаСписания;
//					Иначе
//						ПредоплатаУпрПредв = СтрокаОплаты.СуммаУпр / СтрокаОплаты.Сумма * СуммаСписания;
//					КонецЕсли;
//					
//					Если НеОтгрузка Тогда
//						НовСтр_Предоплата_Расход.ХозяйственнаяОперация = СтрокаОтгрузкиПоставки.ХозяйственнаяОперация;
//					Иначе
//						НовСтр_Предоплата_Расход.ХозяйственнаяОперация = ХозяйственныеОперации["ЗачетАванса"];
//					КонецЕсли;
//					
//					НовСтр_Предоплата_Расход.Предоплата     = СуммаСписания;
//					НовСтр_Предоплата_Расход.ПредоплатаРегл = Окр(ПредоплатаРеглПредв + ПредоплатаРаспределеноРегл - Окр(ПредоплатаРаспределеноРегл, 2), 2);
//					НовСтр_Предоплата_Расход.ПредоплатаУпр  = Окр(ПредоплатаУпрПредв + ПредоплатаРаспределеноУпр - Окр(ПредоплатаРаспределеноУпр, 2), 2);
//					
//					ПредоплатаРаспределеноРегл = ПредоплатаРаспределеноРегл + ПредоплатаРеглПредв;
//					ПредоплатаРаспределеноУпр  = ПредоплатаРаспределеноУпр  + ПредоплатаУпрПредв;
//					
//					//Уменьшаем строку оплаты на сумму зачета
//					СтрокаОплаты.Сумма         = СтрокаОплаты.Сумма     - НовСтр_Предоплата_Расход.Предоплата;
//					СтрокаОплаты.СуммаРегл     = СтрокаОплаты.СуммаРегл - НовСтр_Предоплата_Расход.ПредоплатаРегл; 
//					СтрокаОплаты.СуммаУпр      = СтрокаОплаты.СуммаУпр  - НовСтр_Предоплата_Расход.ПредоплатаУпр;
//					
//					Если НЕ ДвойнаяЗаписьНеНужна Тогда
//						//Отражаем приход на сумму долга по курсу предоплаты.
//						НовСтр_Долг_Приход = ТаблицаРасчетовПоСрокам.Добавить();
//						ЗаполнитьЗначенияСвойств(НовСтр_Долг_Приход, НовСтр_Предоплата_Расход , ,"Предоплата, ПредоплатаУпр, ПредоплатаРегл, КорОбъектРасчетов, КорАналитикаУчетаПоПартнерам");
//						
//						НовСтр_Долг_Приход.ВидДвижения                   = ВидДвиженияНакопления.Приход;
//						НовСтр_Долг_Приход.Период                        = СтрокаОтгрузкиПоставки.Период;
//						НовСтр_Долг_Приход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.Период;
//						НовСтр_Долг_Приход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
//						НовСтр_Долг_Приход.РасчетныйДокумент             = СтрокаОтгрузкиПоставки.Регистратор;
//						НовСтр_Долг_Приход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
//						НовСтр_Долг_Приход.ХозяйственнаяОперация         = СтрокаОтгрузкиПоставки.ХозяйственнаяОперация;
//						//возврат ДС, статья должна быть
//						НовСтр_Долг_Приход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
//						НовСтр_Долг_Приход.СвязанныйДокумент             = Неопределено;
//						
//						НовСтр_Долг_Приход.Долг                          = НовСтр_Предоплата_Расход.Предоплата;
//						
//						Если СтрокаОтгрузкиПоставки.РучнойКурсУпр ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса Тогда
//							НовСтр_Долг_Приход.ДолгУпр                   = СтрокаОтгрузкиПоставки.КурсУпр * СуммаСписания;
//						Иначе
//							НовСтр_Долг_Приход.ДолгУпр                   = НовСтр_Предоплата_Расход.ПредоплатаУпр;
//						КонецЕсли;
//						Если СтрокаОтгрузкиПоставки.РучнойКурсРегл ИЛИ СтрокаОтгрузкиПоставки.ЭтоВозвратАванса Тогда
//							НовСтр_Долг_Приход.ДолгРегл                  = СтрокаОтгрузкиПоставки.КурсРегл * СуммаСписания;
//						Иначе
//							НовСтр_Долг_Приход.ДолгРегл                  = НовСтр_Предоплата_Расход.ПредоплатаРегл;
//						КонецЕсли;
//						
//						//Переносим предоплату на расчетный документ отгрузки.
//						НовСтр_Долг_Расход = ТаблицаРасчетовПоСрокам.Добавить();
//						ЗаполнитьЗначенияСвойств(НовСтр_Долг_Расход, НовСтр_Долг_Приход);
//						НовСтр_Долг_Расход.ВидДвижения                   = ВидДвиженияНакопления.Расход;
//						НовСтр_Долг_Расход.ХозяйственнаяОперация         = ХозяйственныеОперации["ЗачетАванса"];
//						НовСтр_Долг_Расход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
//						НовСтр_Долг_Расход.РасчетныйДокумент             = СтрокаОтгрузкиПоставки.Регистратор;
//						НовСтр_Долг_Расход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.Период;
//						НовСтр_Долг_Расход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
//						НовСтр_Долг_Расход.ДокументРегистратор           = СтрокаОтгрузкиПоставки.Регистратор;
//						НовСтр_Долг_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОтгрузкиПоставки.СтатьяДвиженияДенежныхСредств;
//						
//						НовСтр_Долг_Расход.Долг                          = НовСтр_Предоплата_Расход.Предоплата;
//						НовСтр_Долг_Расход.ДолгУпр                       = НовСтр_Предоплата_Расход.ПредоплатаУпр;
//						НовСтр_Долг_Расход.ДолгРегл                      = НовСтр_Предоплата_Расход.ПредоплатаРегл;
//						
//					КонецЕсли;
//					
//					Если СтрокаОтгрузкиПоставки.РучнойКурсРегл И НЕ ДвойнаяЗаписьНеНужна Тогда
//						//Остаток должен быть уменьшен ровно на ту сумму, на которую уже сформирован приход в двойной записи.
//						ДолгРеглПредв = НовСтр_Долг_Приход.ДолгРегл;
//					Иначе
//						//Иначе пропорционально уменьшаем остаток строки.
//						ДолгРеглПредв = СтрокаОтгрузкиПоставки.КурсРегл * СуммаСписания;
//					КонецЕсли;
//					
//					Если СтрокаОтгрузкиПоставки.РучнойКурсУпр И НЕ ДвойнаяЗаписьНеНужна Тогда
//						ДолгУпрПредв = НовСтр_Долг_Приход.ДолгУпр;
//					Иначе
//						ДолгУпрПредв = СтрокаОтгрузкиПоставки.КурсУпр * СуммаСписания;
//					КонецЕсли;
//					
//					Если ГлобальныеПеременные.ДанныеНакладных[СтрокаОтгрузкиПоставки.Регистратор] = Неопределено Тогда
//						ГлобальныеПеременные.ДанныеНакладных.Вставить(СтрокаОтгрузкиПоставки.Регистратор, СтруктураСумм());
//					КонецЕсли;
//					
//					СтрокаОтгрузкиПоставки.Сумма     = СтрокаОтгрузкиПоставки.Сумма - СуммаСписания;
//					СтрокаОтгрузкиПоставки.СуммаРегл = СтрокаОтгрузкиПоставки.СуммаРегл - Окр(ДолгРеглПредв + ДолгРаспределеноРегл - Окр(ДолгРаспределеноРегл,2),2);
//					СтрокаОтгрузкиПоставки.СуммаУпр  = СтрокаОтгрузкиПоставки.СуммаУпр - Окр(ДолгУпрПредв + ДолгРаспределеноУпр - Окр(ДолгРаспределеноУпр,2),2);
//					
//					ДолгРаспределеноРегл = ДолгРаспределеноРегл + ДолгРеглПредв;
//					ДолгРаспределеноУпр  = ДолгРаспределеноУпр  + ДолгУпрПредв;
//					
//					ДанныеНакладной                    = ГлобальныеПеременные.ДанныеНакладных[СтрокаОтгрузкиПоставки.Регистратор];
//					ДанныеНакладной.СуммаДокумента     = ДанныеНакладной.СуммаДокумента     + СуммаСписания;
//					ДанныеНакладной.СуммаДокументаРегл = ДанныеНакладной.СуммаДокументаРегл + НовСтр_Предоплата_Расход.ПредоплатаРегл; //-
//					ДанныеНакладной.СуммаДокументаУпр  = ДанныеНакладной.СуммаДокументаУпр  + НовСтр_Предоплата_Расход.ПредоплатаУпр;
//					
//					//Уменьшаем график оплаты условной задолженности на разницу суммы зачтенного аванса и строк накладной сверх заказа.
//					Если Не СтрокаОплаты.ЭтоОстаток Тогда
//						ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, СтрокаОплаты, -СуммаСписания, ПланыОплат);
//					КонецЕсли;
//					
//					//Уточняем график на сумму списания за минусом товаров сверхзаказа
//					Если СуммаСписания < СтрокаОтгрузкиПоставки.КОплате Тогда
//						СтрокаОтгрузкиПоставки.КОплате = СтрокаОтгрузкиПоставки.КОплате - СуммаСписания;
//					Иначе
//						ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, СтрокаОтгрузкиПоставки, -(СуммаСписания - СтрокаОтгрузкиПоставки.КОплате), ПланыОплат, СтрокаОтгрузкиПоставки.Заказ);
//						СтрокаОтгрузкиПоставки.КОплате = 0;
//					КонецЕсли;
//					
//					ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, СтрокаОтгрузкиПоставки, СуммаСписания, ПланыОплат, СтрокаОтгрузкиПоставки.Регистратор);
//					
//					Если СтрокаОплаты.Сумма = 0 Тогда
//						Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
//						Если Окр(СтрокаОплаты.СуммаРегл, 2) <> 0 ИЛИ Окр(СтрокаОплаты.СуммаУпр, 2) <> 0 Тогда
//							ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки.Период,
//								СтрокаОплаты, "Предоплата", -Окр(СтрокаОплаты.СуммаРегл, 2), -Окр(СтрокаОплаты.СуммаУпр, 2));
//						КонецЕсли;
//					КонецЕсли;
//				КонецЕсли;
//				
//				Если СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
//					СтрокаОтгрузкиПоставки.ЕстьОстаток = ЛОЖЬ;
//					Если ПропускОтгрузкиПоставки <> 0 Тогда
//						Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
//						ПропускОтгрузкиПоставки = 0;
//					Иначе
//						Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
//					КонецЕсли;
//					Если СтрокаОтгрузкиПоставки.СуммаРегл <> 0 ИЛИ СтрокаОтгрузкиПоставки.СуммаУпр <> 0 Тогда
//						ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НачалоДня(СтрокаОплаты.Период),
//							СтрокаОтгрузкиПоставки, "Долг", -Окр(СтрокаОтгрузкиПоставки.СуммаРегл, 2), -Окр(СтрокаОтгрузкиПоставки.СуммаУпр, 2));
//					КонецЕсли;
//				КонецЕсли;
//				
//				//Если порядок зачета по дате платежа - возвращаемся к нужной строке.
//				Если ПропускОтгрузкиПоставки <> 0 Тогда
//					Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
//					ПропускОтгрузкиПоставки = 0;
//				КонецЕсли;
//				
//			//Отгрузка раньше оплаты.
//			Иначе
//				//Обычная оплата.
//				Если НЕ СтрокаОплаты.ЭтоКорректировка Тогда
//					
//					//Добавляем строку прихода долга по отгрузке/поставке.
//					Если НЕ СтрокаОтгрузкиПоставки.ПриходДобавлен И СтрокаОтгрузкиПоставки.Сумма <> 0 Тогда
//						
//						ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОтгрузкиПоставки);
//						ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка");
//						
//						Если Не СтрокаОтгрузкиПоставки.ЭтоОстаток Тогда
//							//Уточняется план только на сумму по заказу.
//							ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, СтрокаОтгрузкиПоставки, -(СтрокаОтгрузкиПоставки.Сумма - СтрокаОтгрузкиПоставки.КОплате), ПланыОплат, СтрокаОтгрузкиПоставки.Заказ);
//							//Добавляются записи плана на всю сумму включая уточнение и сверхзаказа.
//							ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, СтрокаОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Сумма, ПланыОплат, СтрокаОтгрузкиПоставки.Регистратор);
//						КонецЕсли;
//					КонецЕсли;
//					
//					//Списываем план отгрузки если есть.
//					Если НЕ СтрокаОтгрузкиПоставки.ПланОтгрузокПоставокСписан Тогда
//						СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, СтрокаОтгрузкиПоставки, ПланыОтгрузокПоставок);
//					КонецЕсли;
//					
//					Если СтрокаОтгрузкиПоставки.Сумма <> 0 Тогда
//						
//						//При порядке зачета по датам платежа могут быть документы отгрузки/поставки приобритетнее текущего
//						//Поищем их и увеличим пропуск строк отгрузки поставки
//						Если ПропускОтгрузкиПоставки = 0 И ПорядокЗачетаПоДатеПлатежа 
//							И Индексы.ИндексОтгрузкиПоставки < ЗаписейОтгрузкиПоставки - 1 Тогда
//							
//							ПорядкиЗачета = РасчетыОтгрузкиПоставки.Скопировать(Новый Структура("ЕстьОстаток", ИСТИНА),"ПорядокЗачетаПоДатеПлатежа, ПорядокОперации");
//							ПорядкиЗачета.Сортировать("ПорядокЗачетаПоДатеПлатежа ВОЗР");
//							МинимальныйПорядок = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
//							Для Каждого СтрокаПорядка Из ПорядкиЗачета Цикл
//								Если СтрокаПорядка.ПорядокОперации < СтрокаОплаты.ПорядокОперации Тогда
//									МинимальныйПорядок = СтрокаПорядка.ПорядокЗачетаПоДатеПлатежа;
//									Прервать;
//								КонецЕсли;
//							КонецЦикла;
//							
//							СтрокаПорядка = РасчетыОтгрузкиПоставки.НайтиСтроки(Новый Структура("ЕстьОстаток, ПорядокЗачетаПоДатеПлатежа", Истина, МинимальныйПорядок))[0];
//							Индекс = РасчетыОтгрузкиПоставки.Индекс(СтрокаПорядка);
//							
//							Если Индекс <> Индексы.ИндексОтгрузкиПоставки Тогда
//								ПропускОтгрузкиПоставки = Индекс - Индексы.ИндексОтгрузкиПоставки;
//								Индексы.ИндексОтгрузкиПоставки = Индекс;
//								Продолжить;
//							КонецЕсли;
//							
//						КонецЕсли;
//						
//						//Переоценка накладной до даты оплаты.
//						Если НужнаПереоценка Тогда
//							ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, СтрокаОплаты);
//						КонецЕсли;
//						
//						//Если расчетный документ накладная изменился, то сбрасываем служебные реквизиты распределения копеек.
//						Если ТекущийДокументОтгрузкиПоставки <> СтрокаОтгрузкиПоставки.РасчетныйДокумент Тогда
//							ДолгРаспределеноРегл       = 0;
//							ДолгРаспределеноУпр        = 0;
//							ТекущийДокументОтгрузкиПоставки = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
//						КонецЕсли;
//						
//						//Добавляем строку погашения задолженности.
//						НовСтр_Долг_Расход = ТаблицаРасчетовПоСрокам.Добавить();
//						НовСтр_Долг_Расход.ВидДвижения                   = ВидДвиженияНакопления.Расход;
//						НовСтр_Долг_Расход.ДокументРегистратор           = СтрокаОплаты.Регистратор;
//						//Взаимозачет считаем взаимозачетом
//						Если СтрокаОплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности Тогда
//							НовСтр_Долг_Расход.ХозяйственнаяОперация         = СтрокаОплаты.ХозяйственнаяОперация;
//						Иначе
//							НовСтр_Долг_Расход.ХозяйственнаяОперация         = ХозяйственныеОперации["ПогашениеЗадолженности"];
//						КонецЕсли;
//						НовСтр_Долг_Расход.ВалютаДокумента               = СтрокаОплаты.ВалютаДокумента;
//						НовСтр_Долг_Расход.Период                        = СтрокаОплаты.Период;
//						НовСтр_Долг_Расход.ПорядокОперации               = СтрокаОплаты.ПорядокОперации;
//						НовСтр_Долг_Расход.СтатьяДвиженияДенежныхСредств = СтрокаОплаты.СтатьяДвиженияДенежныхСредств;
//						НовСтр_Долг_Расход.РасчетныйДокумент             = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
//						НовСтр_Долг_Расход.ДатаВозникновения             = СтрокаОтгрузкиПоставки.ДатаВозникновения;
//						НовСтр_Долг_Расход.ДатаПлановогоПогашения        = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
//						НовСтр_Долг_Расход.ПорядокЗачета                 = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
//						
//						СуммаСписания = Мин(СтрокаОплаты.Сумма, СтрокаОтгрузкиПоставки.Сумма);
//						
//						//Списываем долг по курсу аванса.
//						ДолгРегл = СтрокаОплаты.СуммаРегл / СтрокаОплаты.Сумма * СуммаСписания;
//						ДолгУпр  = СтрокаОплаты.СуммаУпр / СтрокаОплаты.Сумма * СуммаСписания;
//						
//						НовСтр_Долг_Расход.Долг     = СуммаСписания;
//						НовСтр_Долг_Расход.ДолгРегл = Окр(ДолгРегл + ДолгРаспределеноРегл - Окр(ДолгРаспределеноРегл,2),2);
//						НовСтр_Долг_Расход.ДолгУпр  = Окр(ДолгУпр + ДолгРаспределеноУпр - Окр(ДолгРаспределеноУпр,2),2);
//						
//						ДолгРаспределеноРегл = ДолгРаспределеноРегл + ДолгРегл;
//						ДолгРаспределеноУпр  = ДолгРаспределеноУпр + ДолгУпр;
//						
//						//Уменьшаем строку оплаты на зачтенную сумму.
//						СтрокаОплаты.Сумма       = СтрокаОплаты.Сумма     - СуммаСписания;
//						СтрокаОплаты.СуммаРегл   = СтрокаОплаты.СуммаРегл - НовСтр_Долг_Расход.ДолгРегл;
//						СтрокаОплаты.СуммаУпр    = СтрокаОплаты.СуммаУпр  - НовСтр_Долг_Расход.ДолгУпр;
//						
//						//Уменьшаем строку отгрузки/поставки на зачтенную сумму.
//						СтрокаОтгрузкиПоставки.Сумма     = СтрокаОтгрузкиПоставки.Сумма     - СуммаСписания;
//						СтрокаОтгрузкиПоставки.СуммаРегл = СтрокаОтгрузкиПоставки.СуммаРегл - НовСтр_Долг_Расход.ДолгРегл;
//						СтрокаОтгрузкиПоставки.СуммаУпр  = СтрокаОтгрузкиПоставки.СуммаУпр  - НовСтр_Долг_Расход.ДолгУпр;
//						
//						//Закрываем план оплаты накладной, которую зачли.
//						ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, СтрокаОплаты, -СуммаСписания, ПланыОплат, НовСтр_Долг_Расход.РасчетныйДокумент);
//						
//						Если СтрокаОплаты.Сумма = 0 Тогда
//							Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
//						КонецЕсли;
//						
//					КонецЕсли;
//					
//					Если СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
//						СтрокаОтгрузкиПоставки.ЕстьОстаток = ЛОЖЬ;
//						
//						Если ПропускОтгрузкиПоставки <> 0 Тогда
//							Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
//							ПропускОтгрузкиПоставки = 0;
//						Иначе
//							Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
//						КонецЕсли;
//						
//						Если СтрокаОтгрузкиПоставки.СуммаРегл <> 0 ИЛИ СтрокаОтгрузкиПоставки.СуммаУпр <> 0 Тогда
//							ДобавитьЗаписьПереоценки(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НачалоДня(СтрокаОплаты.Период),
//								СтрокаОтгрузкиПоставки, "Долг", -Окр(СтрокаОтгрузкиПоставки.СуммаРегл, 2), -Окр(СтрокаОтгрузкиПоставки.СуммаУпр, 2));
//						КонецЕсли;
//					КонецЕсли;
//					
//					//Если порядок зачета по дате платежа - возвращаемся к нужной строке.
//					Если ПропускОтгрузкиПоставки <> 0 Тогда
//						Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
//						ПропускОтгрузкиПоставки = 0;
//					КонецЕсли;
//					
//				//Корректировка накладной в минус.
//				Иначе
//					
//					//Если в таблице отгрузок/поставок еще не дошли до связанного документа, пропускаем текущий.
//					Если (СтрокаОплаты.СвязанныйДокумент <> СтрокаОтгрузкиПоставки.Регистратор
//						ИЛИ (СтрокаОплаты.СвязанныйДокумент = СтрокаОтгрузкиПоставки.Регистратор
//								И СтрокаОтгрузкиПоставки.КОтгрузкеПоставке <> 0 
//								И СтрокаОтгрузкиПоставки.Сумма = 0))
//						И Индексы.ИндексОтгрузкиПоставки + 1 <= ЗаписейОтгрузкиПоставки - 1 Тогда
//						
//						ПропускОтгрузкиПоставки         = ПропускОтгрузкиПоставки + 1;
//						Индексы.ИндексОтгрузкиПоставки  = Индексы.ИндексОтгрузкиПоставки + 1;
//					
//					//Если это корректировка и накладная еще не оплачена полностью, то расчетным документом должна являться накладная.
//					ИначеЕсли СтрокаОплаты.СвязанныйДокумент = СтрокаОтгрузкиПоставки.Регистратор
//						И СтрокаОтгрузкиПоставки.Сумма > 0 Тогда
//						
//						//Добавляем строку прихода по долгу для сторнируемой накладной.
//						Если НЕ СтрокаОтгрузкиПоставки.ПриходДобавлен И СтрокаОтгрузкиПоставки.Сумма <> 0 Тогда
//							ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка");
//							Если Не СтрокаОтгрузкиПоставки.ЭтоОстаток Тогда
//								//Уточняем план заказа, если есть на сумму без учета сверхзаказа.
//								ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, СтрокаОтгрузкиПоставки, -(СтрокаОтгрузкиПоставки.Сумма - СтрокаОтгрузкиПоставки.КОплате), ПланыОплат, СтрокаОтгрузкиПоставки.Заказ);
//								//Добавляем в планы график накладной на всю сумму.
//								ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, СтрокаОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Сумма, ПланыОплат, СтрокаОтгрузкиПоставки.Регистратор);
//							КонецЕсли;
//						КонецЕсли;
//						
//						//Уменьшим план отгрузок и поставок, если есть.
//						Если НЕ СтрокаОтгрузкиПоставки.ПланОтгрузокПоставокСписан Тогда
//							СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, СтрокаОтгрузкиПоставки, ПланыОтгрузокПоставок);
//						КонецЕсли;
//						
//						Если СтрокаОтгрузкиПоставки.Сумма <> 0 Тогда
//						
//							//Переоценка накладной до даты оплаты.
//							Если НужнаПереоценка И НачалоМесяца(СтрокаОтгрузкиПоставки.ДатаВозникновения) < НачалоМесяца(СтрокаОплаты.ДатаВозникновения) Тогда
//								ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, СтрокаОплаты, Ложь);
//							КонецЕсли;
//							
//							СуммаСторно  = Мин(СтрокаОтгрузкиПоставки.Сумма, СтрокаОплаты.Сумма);
//							НовСтр_Сторно = ТаблицаРасчетовПоСрокам.Добавить();
//							НовСтр_Сторно.ВидДвижения = ВидДвиженияНакопления.Расход;
//							
//							НовСтр_Сторно.ДокументРегистратор   = СтрокаОплаты.Регистратор;
//							НовСтр_Сторно.РасчетныйДокумент     = СтрокаОтгрузкиПоставки.РасчетныйДокумент;
//							НовСтр_Сторно.ХозяйственнаяОперация = СтрокаОплаты.ХозяйственнаяОперация;
//							НовСтр_Сторно.ВалютаДокумента       = СтрокаОплаты.ВалютаДокумента;
//							НовСтр_Сторно.СвязанныйДокумент     = СтрокаОплаты.СвязанныйДокумент;
//							
//							НовСтр_Сторно.Долг = СуммаСторно;
//							Если СтрокаОплаты.РучнойКурсРегл Тогда
//								НовСтр_Сторно.ДолгРегл = СуммаСторно * СтрокаОплаты.СуммаРегл / СтрокаОплаты.Сумма;
//							Иначе
//								НовСтр_Сторно.ДолгРегл = СуммаСторно * 
//									(ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокументаРегл 
//										/ ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокумента);
//							КонецЕсли;
//									
//							Если СтрокаОплаты.РучнойКурсУпр Тогда
//								НовСтр_Сторно.ДолгУпр = СуммаСторно * СтрокаОплаты.СуммаУпр / СтрокаОплаты.Сумма;
//							Иначе
//								НовСтр_Сторно.ДолгУпр = СуммаСторно * 
//									(ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокументаУпр 
//										/ ГлобальныеПеременные.ДанныеНакладных[СтрокаОплаты.СвязанныйДокумент].СуммаДокумента);
//							КонецЕсли;
//							
//							НовСтр_Сторно.Период                   = СтрокаОплаты.Период;
//							НовСтр_Сторно.ДатаПлановогоПогашения   = СтрокаОтгрузкиПоставки.ДатаПлановогоПогашения;
//							НовСтр_Сторно.ДатаВозникновения        = СтрокаОтгрузкиПоставки.ДатаВозникновения;
//							НовСтр_Сторно.ПорядокЗачета            = СтрокаОтгрузкиПоставки.ПорядокЗачетаПоДатеПлатежа;
//							НовСтр_Сторно.ПорядокОперации          = СтрокаОплаты.ПорядокОперации;
//							
//							//Уменьшаем строку оплаты на сумму сторно.
//							СтрокаОплаты.Сумма     = СтрокаОплаты.Сумма     - НовСтр_Сторно.Долг;
//							СтрокаОплаты.СуммаРегл = СтрокаОплаты.СуммаРегл - НовСтр_Сторно.ДолгРегл;
//							СтрокаОплаты.СуммаУпр  = СтрокаОплаты.СуммаУпр  - НовСтр_Сторно.ДолгУпр;
//							
//							//Уменьшаем строку отгрузки на сумму сторно.
//							СтрокаОтгрузкиПоставки.Сумма     = СтрокаОтгрузкиПоставки.Сумма     - НовСтр_Сторно.Долг;
//							СтрокаОтгрузкиПоставки.СуммаРегл = СтрокаОтгрузкиПоставки.СуммаРегл - НовСтр_Сторно.ДолгРегл; 
//							СтрокаОтгрузкиПоставки.СуммаУпр  = СтрокаОтгрузкиПоставки.СуммаУпр  - НовСтр_Сторно.ДолгУпр;
//							
//							//Уменьшаем график оплаты накладной, если есть.
//							ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, СтрокаОплаты, -СуммаСторно, ПланыОплат, НовСтр_Сторно.РасчетныйДокумент);
//							
//							Если СтрокаОплаты.Сумма = 0 Тогда
//								Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
//							Иначе
//								//Остатка для сторно по реализации больше нет, строка сторно становится обычной оплатой.
//								ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
//							КонецЕсли;
//							
//						КонецЕсли;
//						
//						//Если часть строк отгрузки пропущена - возвращаемся.
//						Если ПропускОтгрузкиПоставки <> 0 Тогда
//							Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
//							ПропускОтгрузкиПоставки = 0;
//						//Если отгрузка скорректировалась в 0 то идем к следующей строке.
//						ИначеЕсли СтрокаОтгрузкиПоставки.Сумма = 0 Тогда
//							СтрокаОтгрузкиПоставки.ЕстьОстаток = ЛОЖЬ;
//							Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
//						КонецЕсли;
//						
//					//Накладная уже оплачена или её нет, рассматриваем эту корректировку как обычную оплату.
//					Иначе
//						ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
//						//Если часть строк отгрузки пропущена - возвращаемся.
//						Если ПропускОтгрузкиПоставки <> 0 Тогда
//							Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки - ПропускОтгрузкиПоставки;
//							ПропускОтгрузкиПоставки = 0;
//						КонецЕсли;
//					КонецЕсли;
//				КонецЕсли;
//			КонецЕсли;
//			
//		//Оплаты распределены, остальные отгрузки в приход.
//		ИначеЕсли Индексы.ИндексОплаты = ЗаписейОплаты И Индексы.ИндексОтгрузкиПоставки <= ЗаписейОтгрузкиПоставки - 1 Тогда 
//			
//			СтрокаОтгрузкиПоставки = РасчетыОтгрузкиПоставки[Индексы.ИндексОтгрузкиПоставки];
//			
//			Если НЕ СтрокаОтгрузкиПоставки.ПриходДобавлен  И СтрокаОтгрузкиПоставки.Сумма <> 0 Тогда
//				
//				ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОтгрузкиПоставки);
//				
//				Если ГлобальныеПеременные.ДанныеНакладных[СтрокаОтгрузкиПоставки.Регистратор] = Неопределено Тогда
//					ГлобальныеПеременные.ДанныеНакладных.Вставить(СтрокаОтгрузкиПоставки.Регистратор, 
//						СтруктураСумм(СтрокаОтгрузкиПоставки.Сумма, СтрокаОтгрузкиПоставки.СуммаРегл, СтрокаОтгрузкиПоставки.СуммаУпр));
//				КонецЕсли;
//				
//				ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки, "ОтгрузкаПоставка");
//				
//				Если Не СтрокаОтгрузкиПоставки.ЭтоОстаток Тогда
//					ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, СтрокаОтгрузкиПоставки, -(СтрокаОтгрузкиПоставки.Сумма - СтрокаОтгрузкиПоставки.КОплате), ПланыОплат, СтрокаОтгрузкиПоставки.Заказ);
//					ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, СтрокаОтгрузкиПоставки, СтрокаОтгрузкиПоставки.Сумма, ПланыОплат, СтрокаОтгрузкиПоставки.Регистратор);
//				КонецЕсли;
//			КонецЕсли;
//			
//			Если НЕ СтрокаОтгрузкиПоставки.ПланОтгрузокПоставокСписан Тогда
//				СписатьПланОтгрузкиПоставки(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, СтрокаОтгрузкиПоставки, ПланыОтгрузокПоставок);
//			КонецЕсли;
//			
//			Если НужнаПереоценка Тогда
//				ПереоценитьДолг(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОтгрузкиПоставки);
//			КонецЕсли;
//			
//			Индексы.ИндексОтгрузкиПоставки = Индексы.ИндексОтгрузкиПоставки + 1;
//			
//		//Отгрузки распределены, остальные оплаты в приход.
//		ИначеЕсли Индексы.ИндексОплаты <= ЗаписейОплаты - 1 И Индексы.ИндексОтгрузкиПоставки = ЗаписейОтгрузкиПоставки Тогда
//			
//			СтрокаОплаты = РасчетыОплаты[Индексы.ИндексОплаты];
//			
//			ПересчитатьСуммыЕслиЭтоКорректировка(ГлобальныеПеременные, СтрокаОплаты);
//			
//			Если НЕ СтрокаОплаты.ПриходДобавлен Тогда
//				ДобавитьПриход(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, СтрокаОплаты, "Оплата");
//			КонецЕсли;
//			
//			Если НЕ СтрокаОплаты.ЭтоОстаток Тогда
//				ДобавитьЗаписьКРасчетуПланаОплат(ГлобальныеПеременные, СтрокаОплаты, -СтрокаОплаты.Сумма, ПланыОплат);
//			КонецЕсли;
//			
//			Индексы.ИндексОплаты = Индексы.ИндексОплаты + 1;
//			
//		КонецЕсли;
//	КонецЦикла;
//	
//	#КонецОбласти
//	
//	#Область ПланыОплат
//	
//	Если ПланыОплат.Количество() > 0 Тогда
//		
//		ПланыОплат.Свернуть("Регистратор, ДокументПлан ,ВариантОплаты, Период, ДатаВозникновения, ДатаПлановогоПогашения, ПорядокОперации, ПорядокЗачетаПоДатеПлатежа, ХозяйственнаяОперация, ПриходДобавлен","КОплате, Оплачено");
//		ПланыОплат.Сортировать("ПорядокОперации ВОЗР, ПорядокЗачетаПоДатеПлатежа ВОЗР");
//		
//		счПриход = 0;
//		счРасход = 0;
//		РаспределеноСтрок = 0;
//		ПриходЭтоКОплате = Истина;
//		Пока счПриход < ПланыОплат.Количество() ИЛИ счРасход < ПланыОплат.Количество() Цикл
//			
//			Если счРасход > ПланыОплат.Количество()-1 Тогда
//				Если РаспределеноСтрок = 0 Тогда
//					Прервать;
//				Иначе
//					РаспределеноСтрок = 0;
//				КонецЕсли;
//				счПриход = счПриход + 1;
//				счРасход = 0;
//			КонецЕсли;
//			
//			Если счПриход > ПланыОплат.Количество()-1 Тогда
//				Прервать;
//			КонецЕсли;
//			
//			Если ПланыОплат[счПриход].КОплате > 0 И ПланыОплат[счРасход].Оплачено > 0
//				ИЛИ ПланыОплат[счРасход].КОплате > 0 И ПланыОплат[счПриход].Оплачено > 0 Тогда
//				РаспределеноСтрок = РаспределеноСтрок + 1;
//				ПриходЭтоКОплате = ПланыОплат[счПриход].КОплате > 0;
//				
//				Если ПланыОплат[счПриход].КОплате > 0 Тогда
//					СуммаСписанияКОплате = Мин(ПланыОплат[счПриход].КОплате, ПланыОплат[счРасход].Оплачено);
//					СуммаСписанияОплачено = 0;
//					ХозОперацияПланирования =  ГлобальныеПеременные.ХозяйственныеОперации["Планирование"];
//				Иначе
//					СуммаСписанияКОплате = 0;
//					СуммаСписанияОплачено = Мин(ПланыОплат[счПриход].Оплачено, ПланыОплат[счРасход].КОплате);
//					ХозОперацияПланирования =  ПланыОплат[счПриход].ХозяйственнаяОперация;
//				КонецЕсли;
//				
//				Если ПланыОплат[счПриход].Регистратор <> ПланыОплат[счРасход].Регистратор Тогда
//					//Приход по плану и расход по плану
//					Если ПланыОплат[счПриход].ПорядокОперации <= ПланыОплат[счРасход].ПорядокОперации  Тогда
//						ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, ПланыОплат[счПриход], ХозОперацияПланирования, СуммаСписанияКОплате, СуммаСписанияОплачено);
//						ДобавитьРасходПланаОплат(ТаблицаПланОплат, ПланыОплат[счПриход], ПланыОплат[счРасход], СуммаСписанияКОплате, СуммаСписанияОплачено);
//					Иначе
//						ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, ПланыОплат[счРасход], ПланыОплат[счРасход].ХозяйственнаяОперация, СуммаСписанияКОплате, СуммаСписанияОплачено);
//						ДобавитьРасходПланаОплат(ТаблицаПланОплат, ПланыОплат[счРасход], ПланыОплат[счПриход], СуммаСписанияКОплате, СуммаСписанияОплачено);
//					КонецЕсли;
//				КонецЕсли;
//				
//				Если ПланыОплат[счПриход].КОплате > 0 Тогда
//					ПланыОплат[счПриход].КОплате = ПланыОплат[счПриход].КОплате - СуммаСписанияКОплате;
//					ПланыОплат[счРасход].Оплачено = ПланыОплат[счРасход].Оплачено - СуммаСписанияКОплате;
//				Иначе
//					ПланыОплат[счРасход].КОплате = ПланыОплат[счРасход].КОплате - СуммаСписанияОплачено;
//					ПланыОплат[счПриход].Оплачено = ПланыОплат[счПриход].Оплачено - СуммаСписанияОплачено;
//				КонецЕсли;
//				
//				Если ПланыОплат[счРасход].КОплате = 0 И ПланыОплат[счРасход].Оплачено = 0 Тогда
//					ПланыОплат.Удалить(счРасход);
//				КонецЕсли;
//				
//				Если ПланыОплат[счПриход].КОплате = 0 И ПланыОплат[счПриход].Оплачено = 0 Тогда
//					ПланыОплат.Удалить(счПриход);
//					//Если тип прихода меняется, сбрасываем счетчик Расхода.
//					Если ПриходЭтоКОплате И счПриход < ПланыОплат.Количество()
//						И ПланыОплат[счПриход].Оплачено > 0 И счРасход <> 0 Тогда
//						счРасход = 0;
//					ИначеЕсли счРасход > 0 Тогда
//						счРасход = счРасход - 1;
//					КонецЕсли;
//				КонецЕсли;
//			ИначеЕсли ПланыОплат[счПриход].КОплате = 0 И ПланыОплат[счПриход].Оплачено = 0 Тогда
//				ПланыОплат.Удалить(счПриход);
//				Если ПриходЭтоКОплате И счПриход < ПланыОплат.Количество() И ПланыОплат[счПриход].Оплачено > 0 И счРасход <> 0 Тогда
//					счРасход = 0;
//				ИначеЕсли счРасход > 0 Тогда
//					счРасход = счРасход - 1;
//				КонецЕсли;
//			Иначе
//				счРасход = счРасход + 1;
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//		//Нераспределенные остатки
//		счПриход = 0;
//		счРасход = 0;
//		
//		Пока счПриход < ПланыОплат.Количество() Цикл
//			Если ПланыОплат[счПриход].КОплате > 0 Тогда
//				ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, ПланыОплат[счПриход], ГлобальныеПеременные.ХозяйственныеОперации["Планирование"], ПланыОплат[счПриход].КОплате);
//			КонецЕсли;
//			счПриход = счПриход + 1;
//		КонецЦикла;
//		
//		Пока счРасход < ПланыОплат.Количество() Цикл
//			Если ПланыОплат[счРасход].Оплачено > 0 Тогда
//				ПроверитьДобавитьПриходПланаОплат(ТаблицаПланОплат, ПланыОплат[счРасход], ПланыОплат[счРасход].ХозяйственнаяОперация, 0, ПланыОплат[счРасход].Оплачено);
//			КонецЕсли;
//			счРасход = счРасход + 1;
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//	#КонецОбласти
//	
//	#Область ФиксацияРезультатов
//	
//	НаборЗаписейПоСрокам = РегистрыНакопления[ИмяРегистраРасчетов].СоздатьНаборЗаписей();
//	НаборЗаписейПланОплат = РегистрыНакопления[ИмяРегистраПланаОплат].СоздатьНаборЗаписей();
//	НаборЗаписейПланОтгрузокПоставок = РегистрыНакопления[ИмяРегистраПланаОтгрузкиПоставки].СоздатьНаборЗаписей();
//	
//	ТаблицаРасчетовПоСрокам.Свернуть("Период, Регистратор, ВидДвижения, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, ДокументРегистратор,
//			|РасчетныйДокумент, ХозяйственнаяОперация, ДатаПлановогоПогашения, ДатаВозникновения, ПорядокЗачета, ПорядокОперации,
//			|ВалютаДокумента, СвязанныйДокумент, СтатьяДвиженияДенежныхСредств, КорОбъектРасчетов, КорАналитикаУчетаПоПартнерам",
//			"Предоплата, ПредоплатаРегл, ПредоплатаУпр, Долг, ДолгРегл, ДолгУпр");
//	
//	ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
//	ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
//	ТаблицаРасчетовПоСрокам.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
//	ТаблицаРасчетовПоСрокам.Индексы.Добавить("Регистратор");
//	
//	Если НЕ ОсновныеПараметры.НачальноеЗаполнение И ОсновныеПараметры.ЗаписыватьИзменения Тогда
//		
//		Если ОсновныеПараметры.Порядок <> "" Тогда
//			НаборЗаписейПоСрокам.ДополнительныеСвойства.Вставить("Порядок",ОсновныеПараметры.Порядок);
//		КонецЕсли;
//		
//		#Область ПроверкаИзмененийРегистров
//		
//		Если ОсновныеПараметры.Свойство("ДополнительныеСвойстваПроведения") И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено Тогда
//			Запрос.Текст = "
//			|ВЫБРАТЬ *
//			|ПОМЕСТИТЬ ВтДвиженияПосле
//			|ИЗ  &ТаблицаПоСрокам КАК ДвиженияПосле
//			|;
//			|ВЫБРАТЬ
//			|	ВложенныйЗапрос.Период                        КАК Период,
//			|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
//			|	ВложенныйЗапрос.ОбъектРасчетов                КАК ОбъектРасчетов,
//			|	ВложенныйЗапрос.Валюта                        КАК Валюта,
//			|	ВложенныйЗапрос.РасчетныйДокумент             КАК РасчетныйДокумент,
//			|	ВложенныйЗапрос.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
//			|	ВложенныйЗапрос.ДатаВозникновения             КАК ДатаВозникновения,
//			|	
//			|	ВложенныйЗапрос.ПорядокЗачета                 КАК ПорядокЗачета,
//			|	ВложенныйЗапрос.ПорядокОперации               КАК ПорядокОперации,
//			|	ВложенныйЗапрос.ВалютаДокумента               КАК ВалютаДокумента,
//			|	ВложенныйЗапрос.СвязанныйДокумент             КАК СвязанныйДокумент,
//			|	ВложенныйЗапрос.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
//			|	ВложенныйЗапрос.КорОбъектРасчетов             КАК КорОбъектРасчетов,
//			|	ВложенныйЗапрос.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
//			|	ВложенныйЗапрос.ДокументРегистратор           КАК ДокументРегистратор,
//			|	ВложенныйЗапрос.КорАналитикаУчетаПоПартнерам  КАК КорАналитикаУчетаПоПартнерам,
//			|	
//			|	СУММА(ВложенныйЗапрос.Предоплата)                    КАК Предоплата,
//			|	СУММА(ВложенныйЗапрос.ПредоплатаРегл)                КАК ПредоплатаРегл,
//			|	СУММА(ВложенныйЗапрос.ПредоплатаУпр)                 КАК ПредоплатаУпр,
//			|	СУММА(ВложенныйЗапрос.Долг)                          КАК Долг,
//			|	СУММА(ВложенныйЗапрос.ДолгРегл)                      КАК ДолгРегл,
//			|	СУММА(ВложенныйЗапрос.ДолгУпр)                       КАК ДолгУпр
//			|ПОМЕСТИТЬ ТаблицаИзмененийРасчетыСКлиентамиПоСрокам
//			|ИЗ
//			|	(ВЫБРАТЬ
//			|		РасчетыПоСрокам.Период                        КАК Период,
//			|		РасчетыПоСрокам.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
//			|		РасчетыПоСрокам.ОбъектРасчетов                КАК ОбъектРасчетов,
//			|		РасчетыПоСрокам.Валюта                        КАК Валюта,
//			|		РасчетыПоСрокам.РасчетныйДокумент             КАК РасчетныйДокумент,
//			|		РасчетыПоСрокам.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
//			|		РасчетыПоСрокам.ДатаВозникновения             КАК ДатаВозникновения,
//			|		
//			|		РасчетыПоСрокам.ПорядокЗачета                 КАК ПорядокЗачета,
//			|		РасчетыПоСрокам.ПорядокОперации               КАК ПорядокОперации,
//			|		РасчетыПоСрокам.ВалютаДокумента               КАК ВалютаДокумента,
//			|		РасчетыПоСрокам.СвязанныйДокумент             КАК СвязанныйДокумент,
//			|		РасчетыПоСрокам.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
//			|		РасчетыПоСрокам.КорОбъектРасчетов             КАК КорОбъектРасчетов,
//			|		РасчетыПоСрокам.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
//			|		РасчетыПоСрокам.ДокументРегистратор           КАК ДокументРегистратор,
//			|		РасчетыПоСрокам.КорАналитикаУчетаПоПартнерам  КАК КорАналитикаУчетаПоПартнерам,
//			|		
//			|		РасчетыПоСрокам.Предоплата                    КАК Предоплата,
//			|		РасчетыПоСрокам.ПредоплатаРегл                КАК ПредоплатаРегл,
//			|		РасчетыПоСрокам.ПредоплатаУпр                 КАК ПредоплатаУпр,
//			|		РасчетыПоСрокам.Долг                          КАК Долг,
//			|		РасчетыПоСрокам.ДолгРегл                      КАК ДолгРегл,
//			|		РасчетыПоСрокам.ДолгУпр                       КАК ДолгУпр
//			|		
//			|	ИЗ
//			|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыПоСрокам
//			|	ГДЕ
//			|		РасчетыПоСрокам.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
//			|		И РасчетыПоСрокам.ОбъектРасчетов = &ОбъектРасчетов
//			|		И РасчетыПоСрокам.Валюта = &ВалютаРасчетов
//			|		И РасчетыПоСрокам.ДокументРегистратор В (&МассивДокументов)
//			|		И НЕ РасчетыПоСрокам.Регистратор В (&МассивПолныхРегистраторовРасчетыСКлиентамиПоСрокам)
//			|		И РасчетыПоСрокам.Активность
//			|	
//			|	ОБЪЕДИНИТЬ ВСЕ
//			|	
//			|	ВЫБРАТЬ
//			|		ДвиженияПосле.Период                        КАК Период,
//			|		ДвиженияПосле.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
//			|		ДвиженияПосле.ОбъектРасчетов                КАК ОбъектРасчетов,
//			|		ДвиженияПосле.Валюта                        КАК Валюта,
//			|		ДвиженияПосле.РасчетныйДокумент             КАК РасчетныйДокумент,
//			|		ДвиженияПосле.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
//			|		ДвиженияПосле.ДатаВозникновения             КАК ДатаВозникновения,
//			|		
//			|		ДвиженияПосле.ПорядокЗачета                 КАК ПорядокЗачета,
//			|		ДвиженияПосле.ПорядокОперации               КАК ПорядокОперации,
//			|		ДвиженияПосле.ВалютаДокумента               КАК ВалютаДокумента,
//			|		ДвиженияПосле.СвязанныйДокумент             КАК СвязанныйДокумент,
//			|		ДвиженияПосле.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
//			|		ДвиженияПосле.КорОбъектРасчетов             КАК КорОбъектРасчетов,
//			|		ДвиженияПосле.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
//			|		ДвиженияПосле.ДокументРегистратор           КАК ДокументРегистратор,
//			|		ВЫБОР КОГДА ДвиженияПосле.КорАналитикаУчетаПоПартнерам = Неопределено
//			|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
//			|			ИНАЧЕ ДвиженияПосле.КорАналитикаУчетаПоПартнерам
//			|		КОНЕЦ                                       КАК КорАналитикаУчетаПоПартнерам,
//			|		
//			|		-ДвиженияПосле.Предоплата                    КАК Предоплата,
//			|		-ДвиженияПосле.ПредоплатаРегл                КАК ПредоплатаРегл,
//			|		-ДвиженияПосле.ПредоплатаУпр                 КАК ПредоплатаУпр,
//			|		-ДвиженияПосле.Долг                          КАК Долг,
//			|		-ДвиженияПосле.ДолгРегл                      КАК ДолгРегл,
//			|		-ДвиженияПосле.ДолгУпр                       КАК ДолгУпр
//			|	ИЗ
//			|		ВтДвиженияПосле КАК ДвиженияПосле) КАК ВложенныйЗапрос
//			|СГРУППИРОВАТЬ ПО
//			|	Период,
//			|	АналитикаУчетаПоПартнерам,
//			|	ОбъектРасчетов,
//			|	Валюта,
//			|	РасчетныйДокумент,
//			|	ДатаПлановогоПогашения,
//			|	ДатаВозникновения,
//			|	ПорядокЗачета,
//			|	ПорядокОперации,
//			|	ВалютаДокумента,
//			|	СвязанныйДокумент,
//			|	СтатьяДвиженияДенежныхСредств,
//			|	КорОбъектРасчетов,
//			|	ХозяйственнаяОперация,
//			|	ДокументРегистратор,
//			|	КорАналитикаУчетаПоПартнерам
//			|ИМЕЮЩИЕ
//			|	СУММА(ВложенныйЗапрос.Предоплата) <> 0
//			|	ИЛИ СУММА(ВложенныйЗапрос.ПредоплатаРегл) <> 0
//			|	ИЛИ СУММА(ВложенныйЗапрос.ПредоплатаУпр) <> 0
//			|	ИЛИ СУММА(ВложенныйЗапрос.Долг) <> 0
//			|	ИЛИ СУММА(ВложенныйЗапрос.ДолгРегл) <> 0
//			|	ИЛИ СУММА(ВложенныйЗапрос.ДолгУпр) <> 0";
//			
//			Если НЕ ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
//				Запрос.Текст = СтрЗаменить(Запрос.Текст,"РасчетыСКлиентами", "РасчетыСПоставщиками");
//			КонецЕсли;
//			
//			МассивДокументов = ТаблицаРасчетовПоСрокам.ВыгрузитьКолонку("ДокументРегистратор");
//			МассивДокументов.Добавить(ОсновныеПараметры.Регистратор);
//			
//			Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
//			Запрос.УстановитьПараметр("ТаблицаПоСрокам", ТаблицаРасчетовПоСрокам);
//			Запрос.Выполнить();
//			
//			Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
//				
//				Запрос.УстановитьПараметр("НеотражаемыйДокумент", ОсновныеПараметры.Регистратор);
//				
//				ТекстАктуализацииОтражения =
//				"ВЫБРАТЬ
//				|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор
//				|ИЗ
//				|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений
//				|
//				|ГДЕ
//				|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
//				|
//				|СГРУППИРОВАТЬ ПО
//				|	ТаблицаИзменений.ДокументРегистратор";
//						
//				//++ НЕ УТ
//				ТекстАктуализацииОтражения =
//				"ВЫБРАТЬ
//				|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор,
//				|	ТаблицаИзменений.Период КАК Период,
//				|	ТаблицаИзменений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
//				|ИЗ
//				|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений
//				|
//				|ГДЕ
//				|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
//				|
//				|СГРУППИРОВАТЬ ПО
//				|	ТаблицаИзменений.ДокументРегистратор,
//				|	ТаблицаИзменений.Период,
//				|	ТаблицаИзменений.АналитикаУчетаПоПартнерам";
//				//-- НЕ УТ
//					
//				Запрос.Текст = ТекстАктуализацииОтражения;
//				
//				ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
//				
//				#Область ПроверкаДатыЗапрета
//				
//				ЗапросПроверкиДатыЗапрета = Новый Запрос("
//				|ВЫБРАТЬ
//				|	ЕСТЬNULL(МИНИМУМ(ТаблицаИзменений.Период),ДАТАВРЕМЯ(3999,1,1)) КАК Период
//				|ИЗ
//				|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК ТаблицаИзменений");
//				
//				ЗапросПроверкиДатыЗапрета.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
//				ВыборкаМинимальногоПериода = ЗапросПроверкиДатыЗапрета.Выполнить().Выбрать();
//				Если ВыборкаМинимальногоПериода.Следующий() Тогда
//					ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
//					
//					НоваяСтрока = ДанныеДляПроверки.Добавить();
//					НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
//					НоваяСтрока.Раздел = "ВзаимозачетыСписанияЗадолженности";
//					
//					НоваяСтрока = ДанныеДляПроверки.Добавить();
//					НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
//					НоваяСтрока.Раздел = "ПродажиВозвратыОтКлиентов";
//					
//					НоваяСтрока = ДанныеДляПроверки.Добавить();
//					НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
//					НоваяСтрока.Раздел = "РегламентныеОперации";
//					
//					ОписаниеОшибки = НСтр("ru = 'Изменяемые данные взаиморасчетов находятся в закрытом периоде.';
//											|en = 'Mutual settlements data being changed is in the closed period.'");
//					Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, НаборЗаписейПоСрокам) Тогда
//						Отказ = Истина;
//						ВызватьИсключение ОписаниеОшибки;
//					КонецЕсли;
//				КонецЕсли;
//				
//				#КонецОбласти
//				
//				//++ НЕ УТ
//				#Область ЗаданияКРасчетуРезервыПоСомнительнымДолгам
//				
//				ИмяТаблицыИзменений = НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ПодготовитьТаблицуИзмененийПоАналитикеУчетаПоПартнерам(
//					Запрос, "ТаблицаИзмененийРасчетыСКлиентамиПоСрокам");
//				НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.СформироватьЗаданияКЗакрытиюМесяцаПриИзмененииРасчетов(Запрос, ИмяТаблицыИзменений);
//				УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос, ИмяТаблицыИзменений);
//				
//				#КонецОбласти
//				//-- НЕ УТ
//				
//				//++ НЕ УТ
//				РеглУчетПроведениеСервер.ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВРеглУчете(ТаблицаИзменений);
//				//-- НЕ УТ
//				//++ НЕ УТКА
//				МеждународныйУчетПроведениеСервер.ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВМеждународномУчете(ТаблицаИзменений);
//				//-- НЕ УТКА
//				
//				Запрос.Текст =
//				"ВЫБРАТЬ РАЗЛИЧНЫЕ
//				|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
//				|	Изменения.РасчетныйДокумент                    КАК Документ,
//				|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
//				|ИЗ
//				|	ТаблицаИзмененийРасчетыСКлиентамиПоСрокам КАК Изменения";
//				
//				ИзмененияНДСУП = Запрос.Выполнить().Выгрузить();
//				
//				СтруктураВременныеТаблицы = Новый Структура("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
//				ДляПроведения = Новый Структура("СтруктураВременныеТаблицы", СтруктураВременныеТаблицы);
//				ДополнительныеСвойства = Новый Структура("ДляПроведения", ДляПроведения);
//				ЗакрытиеМесяцаСервер.ОтразитьЗаданияКЗакрытиюМесяца(ГлобальныеПеременные.Регистратор, ДополнительныеСвойства);
//				
//			Иначе
//				
//				Запрос.УстановитьПараметр("НеотражаемыйДокумент", ОсновныеПараметры.Регистратор);
//				
//				ТекстАктуализацииОтражения =
//				"ВЫБРАТЬ
//				|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор
//				|ИЗ
//				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК ТаблицаИзменений
//				|
//				|ГДЕ
//				|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
//				|
//				|СГРУППИРОВАТЬ ПО
//				|	ТаблицаИзменений.ДокументРегистратор";
//				
//				//++ НЕ УТ
//				ТекстАктуализацииОтражения =
//				"ВЫБРАТЬ
//				|	ТаблицаИзменений.ДокументРегистратор КАК Регистратор,
//				|	ТаблицаИзменений.Период КАК Период,
//				|	ТаблицаИзменений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
//				|ИЗ
//				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК ТаблицаИзменений
//				|
//				|ГДЕ
//				|	ТаблицаИзменений.ДокументРегистратор <> &НеотражаемыйДокумент
//				|
//				|СГРУППИРОВАТЬ ПО
//				|	ТаблицаИзменений.ДокументРегистратор,
//				|	ТаблицаИзменений.Период,
//				|	ТаблицаИзменений.АналитикаУчетаПоПартнерам";
//				//-- НЕ УТ
//					
//				Запрос.Текст = ТекстАктуализацииОтражения;
//					
//				ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
//				
//				#Область ПроверкаДатыЗапрета
//				
//				ЗапросПроверкиДатыЗапрета = Новый Запрос("
//				|ВЫБРАТЬ
//				|	ЕСТЬNULL(МИНИМУМ(ТаблицаИзменений.Период),ДАТАВРЕМЯ(3999,1,1)) КАК Период
//				|ИЗ
//				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК ТаблицаИзменений");
//				
//				ЗапросПроверкиДатыЗапрета.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
//				ВыборкаМинимальногоПериода = ЗапросПроверкиДатыЗапрета.Выполнить().Выбрать();
//				Если ВыборкаМинимальногоПериода.Следующий() Тогда
//					ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
//					// begin fix Suetin 16.09.2019 16:16:19
//					Если ТипЗнч(ОсновныеПараметры.Регистратор) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
//						//#Вставка
//						НоваяСтрока = ДанныеДляПроверки.Добавить();
//						НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
//						НоваяСтрока.Раздел = "Заказы";
//						//#КонецВставк	
//					Иначе
//					// end fix Suetin 16.09.2019 16:16:26
//					НоваяСтрока = ДанныеДляПроверки.Добавить();
//					НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
//					НоваяСтрока.Раздел = "ВзаимозачетыСписанияЗадолженности";
//					
//					НоваяСтрока = ДанныеДляПроверки.Добавить();
//					НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
//					НоваяСтрока.Раздел = "ЗакупкиВозвратыПоставщикамПеремещенияСборки";
//					
//					НоваяСтрока = ДанныеДляПроверки.Добавить();
//					НоваяСтрока.Дата   = НачалоДня(ВыборкаМинимальногоПериода.Период);
//					НоваяСтрока.Раздел = "РегламентныеОперации";
//					КонецЕсли;	// fix Suetin 16.09.2019 16:16:26				
//					ОписаниеОшибки = НСтр("ru = 'Изменяемые данные взаиморасчетов находятся в закрытом периоде.';
//											|en = 'Mutual settlements data being changed is in the closed period.'");
//					Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, НаборЗаписейПоСрокам) Тогда
//						Отказ = Истина;
//						ВызватьИсключение ОписаниеОшибки;
//					КонецЕсли;
//				КонецЕсли;
//				
//				#КонецОбласти
//				
//				//++ НЕ УТ
//				#Область ЗаданияКРасчетуРезервыПоСомнительнымДолгам
//				
//				ИмяТаблицыИзменений = НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ПодготовитьТаблицуИзмененийПоАналитикеУчетаПоПартнерам(
//					Запрос, "ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам");
//				НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.СформироватьЗаданияКЗакрытиюМесяцаПриИзмененииРасчетов(Запрос, ИмяТаблицыИзменений);
//				УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос, ИмяТаблицыИзменений);
//				
//				#КонецОбласти
//				//-- НЕ УТ
//				
//				//++ НЕ УТ
//				РеглУчетПроведениеСервер.ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВРеглУчете(ТаблицаИзменений);
//				//-- НЕ УТ
//				//++ НЕ УТКА
//				МеждународныйУчетПроведениеСервер.ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВМеждународномУчете(ТаблицаИзменений);
//				//-- НЕ УТКА
//				Запрос.Текст =
//				"ВЫБРАТЬ РАЗЛИЧНЫЕ
//				|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
//				|	Изменения.ДокументРегистратор                          КАК Документ,
//				|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
//				|ИЗ
//				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК Изменения
//				|
//				|ОБЪЕДИНИТЬ
//				|
//				|ВЫБРАТЬ РАЗЛИЧНЫЕ
//				|	НАЧАЛОПЕРИОДА(Изменения.Период, МЕСЯЦ)         КАК Период,
//				|	Изменения.РасчетныйДокумент                    КАК Документ,
//				|	Изменения.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
//				|ИЗ
//				|	ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам КАК Изменения";
//				
//				ИзмененияНДСУП = Запрос.Выполнить().Выгрузить();
//				
//				СтруктураВременныеТаблицы = Новый Структура("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
//				ДляПроведения = Новый Структура("СтруктураВременныеТаблицы", СтруктураВременныеТаблицы);
//				ДополнительныеСвойства = Новый Структура("ДляПроведения", ДляПроведения);
//				ЗакрытиеМесяцаСервер.ОтразитьЗаданияКЗакрытиюМесяца(ГлобальныеПеременные.Регистратор, ДополнительныеСвойства);
//				
//			КонецЕсли;
//			
//			УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос, "ВтДвиженияПосле");
//			
//		КонецЕсли;
//		
//		#КонецОбласти
//		
//		ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаРасчетовПоСрокам, НаборЗаписейПоСрокам);
//		
//		Если ОсновныеПараметры.Свойство("ДополнительныеСвойстваПроведения") И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено Тогда
//			Если ГлобальныеПеременные.ЭтоРасчетыСКлиентами Тогда
//				УчетНДСУП.ОтразитьВУчетеНДСИзменениеРасчетовСКлиентами(ИзмененияНДСУП);
//				// Уничтожаем временную таблицу изменений, т.к. могут записываться разные наборы записей с одним менеджером запросов.
//				УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос, "ТаблицаИзмененийРасчетыСКлиентамиПоСрокам");
//			Иначе
//				УчетНДСУП.ОтразитьВУчетеНДСИзменениеРасчетовСПоставщиками(ИзмененияНДСУП);
//				// Уничтожаем временную таблицу изменений, т.к. могут записываться разные наборы записей с одним менеджером запросов.
//				УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос, "ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам");
//			КонецЕсли;
//		КонецЕсли;
//		
//		УдалитьСистемныеКорректировкиРегистров(НачалоДняПорядка, Организация);
//		
//	КонецЕсли;
//	
//	ТаблицаПланОплат.Свернуть("Период, Регистратор, ВидДвижения, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Валюта, ДокументРегистратор,
//			|ДокументПлан, ХозяйственнаяОперация, ДатаПлановогоПогашения, ДатаВозникновения, ВариантОплаты, ПорядокЗачета, ПорядокОперации",
//			"КОплате, Оплачено");
//	
//	ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
//	ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
//	ТаблицаПланОплат.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
//	ТаблицаПланОплат.Индексы.Добавить("Регистратор");
//	
//	Если ОсновныеПараметры.ЗаписыватьИзменения Тогда
//		ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаПланОплат, НаборЗаписейПланОплат);
//	КонецЕсли;
//	
//	ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.АналитикаУчетаПоПартнерам, "АналитикаУчетаПоПартнерам");
//	ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.ОбъектРасчетов,            "ОбъектРасчетов");
//	ТаблицаПланОтгрузокПоставок.ЗаполнитьЗначения(ГлобальныеПеременные.ВалютаРасчетов,            "Валюта");
//	ТаблицаПланОтгрузокПоставок.Индексы.Добавить("Регистратор");
//	
//	Если ОсновныеПараметры.ЗаписыватьИзменения Тогда
//		ЗаписатьПорционно(ГлобальныеПеременные, ТаблицаПланОтгрузокПоставок, НаборЗаписейПланОтгрузокПоставок);
//	КонецЕсли;
//	
//	Если ПланыОбмена.ГлавныйУзел() = Неопределено И НЕ ОсновныеПараметры.НачальноеЗаполнение И ОсновныеПараметры.ЗаписыватьИзменения Тогда
//		УдалитьНеиспользуемыеРегистраторыРасчетов(Запрос, ИмяРегистраРасчетов, ИмяРегистраПланаОплат, ИмяРегистраПланаОтгрузкиПоставки);
//	КонецЕсли;
//	
//	Если НЕ ОсновныеПараметры.НачальноеЗаполнение И ОсновныеПараметры.ДополнительныеСвойстваПроведения <> Неопределено Тогда
//		ОсновныеПараметры.ДополнительныеСвойстваПроведения.ДляПроведения.Вставить(
//			?(ГлобальныеПеременные.ЭтоРасчетыСКлиентами, "РасчетыСКлиентами", "РасчетыСПоставщиками")+"ПоСрокам",
//			ТаблицаРасчетовПоСрокам);
//	КонецЕсли;
//	
//	#КонецОбласти
//	
//КонецПроцедуры
