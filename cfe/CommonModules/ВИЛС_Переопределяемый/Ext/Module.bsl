&Вместо("ВернутьСледующего")
Функция ВИЛС_ВернутьСледующего(Предмет) 
	УстановитьПривилегированныйРежим(Истина);
	Прокси = ИнтеграцияС1СДокументооборот.ПолучитьПрокси(,"Клещ Антон Николаевич","Qwe12345",Ложь);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetTasksTreeRequest");
	
	Запрос.query = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetTasksTreeQuery");
	
	Target = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	Target.id = Строка(Предмет.УникальныйИдентификатор());
	Target.type = Предмет.Метаданные().ПолноеИмя();
	Target.name = Строка(Предмет);
	
	Запрос.query.externalTarget.Добавить(Target);
	Если Запрос.query.Свойства().Получить("withExecuted") <> Неопределено Тогда
		Запрос.query.withExecuted = Истина;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	ДеревоБизнесПроцессы = Ответ.businessProcesses;
	Ответственный = "";
	ПостроитьДеревоЗадачИзОтветаВебСервиса(ДеревоБизнесПроцессы,Ответственный);
	//Сообщить(Ответственный);
	Возврат Ответственный;
КонецФункции

&Вместо("ВернутьПредыдущего")
Функция ВИЛС_ВернутьПредыдущего(СсылкаНаОбъект) Экспорт
	
	Попытка
		Прокси = ИнтеграцияС1СДокументооборот.ПолучитьПрокси(,"Клещ Антон Николаевич","Qwe12345",Ложь);
	Исключение
		Возврат Неопределено; // Если нет соединения, вернем статус Ложь 
	КонецПопытки;
	
	Если Прокси = Неопределено Тогда
		Возврат Неопределено; // Если пользователь не авторизован в ДО, вернем Ложь.
	КонецЕсли;
	
	ExternalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	ExternalObject.id = Строка(СсылкаНаОбъект.УникальныйИдентификатор());
	ExternalObject.type = СсылкаНаОбъект.Метаданные().ПолноеИмя();
	ExternalObject.name = Строка(СсылкаНаОбъект);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
	Запрос.externalObjects.Добавить(ExternalObject);
	
	Запрос.columnSet.Добавить("visas");
	
	Результат = Прокси.execute(Запрос);
	
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Результат, "DMError") Тогда 
		Возврат Неопределено; // Произошла ошибка во время выполнения запроса
	КонецЕсли;	
	
	Если Результат.documents.Количество() > 0 Тогда 
		ОбъектВозврата = Результат.documents[0];
	Иначе 
		Возврат Неопределено; // Нужного документа не оказалось
	КонецЕсли;
	
	ПоследнийСогласовавший = Справочники.Пользователи.ПустаяСсылка();
	//Сообщить(ОбъектВозврата.visas.Количество());
	Если ОбъектВозврата.visas.Количество() <> 0 Тогда
		ПоследнийСогласовавший = ВернутьПоследнегоСогласовавшего(ОбъектВозврата.visas);
	КонецЕсли;
	
	
	
	Возврат ПоследнийСогласовавший;
КонецФункции

&Вместо("ВИЛС_СборДанныхПоСогласованию")
Процедура ВИЛС_ВИЛС_СборДанныхПоСогласованию() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект КАК Ключ
	//|ИЗ
	//|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
	//|ГДЕ
	//|	ТИПЗНАЧЕНИЯ(ОбъектыИнтегрированныеС1СДокументооборотом.Объект) = ТИП(Документ.ЗаявкаНаРасходованиеДенежныхСредств)
	//|	И НЕ ВЫРАЗИТЬ(ОбъектыИнтегрированныеС1СДокументооборотом.Объект КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	//|";
		"ВЫБРАТЬ
		|	Заявка.Ссылка КАК Ключ
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКВыплате.Остатки КАК ДенежныеСредства
		|		ПО (ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств = Заявка.Ссылка)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЕСТЬNULL(ДенежныеСредства.СуммаОстаток, 0) <= 0
		|					И Заявка.Проведен
		|					И Заявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ = ЛОЖЬ
		|	И Заявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
		|	И Заявка.Проведен";

	Строки = Запрос.Выполнить().Выгрузить();
	Попытка
		Для Каждого Строка Из Строки Цикл
			Следующий = ВернутьСледующего(Строка.Ключ);
			Предыдуший = ВернутьПредыдущего(Строка.Ключ);
			ПользовательРоль = Справочники.Пользователи.НайтиПоНаименованию(СокрЛП(Следующий));
			
			Если ПользовательРоль = Справочники.Пользователи.ПустаяСсылка() Тогда 
				ПользовательРоль = СокрЛП(Следующий);
			КонецЕсли;
			
			ДокОбъект = Строка.Ключ.ПолучитьОбъект();
			ДокОбъект.ОбменДанными.Загрузка = Истина;
			ТребуетсяЗапись = Ложь;
			
			Если не ДокОбъект.ВИЛС_Исполнитель = ПользовательРоль Тогда
				ДокОбъект.ВИЛС_Исполнитель = ПользовательРоль;
				ТребуетсяЗапись = Истина;
			КонецЕсли;
			
			Если не ДокОбъект.КтоРешил = Предыдуший Тогда
				ДокОбъект.КтоРешил = Предыдуший;
				ТребуетсяЗапись = Истина;
			КонецЕсли;
			
			Если ТребуетсяЗапись Тогда
				ДокОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		СтруктураСобытия = Новый Структура;
		СтруктураСобытия.Вставить("ИмяСобытия","Синхронизация с ДО");
		СтруктураСобытия.Вставить("ПредставлениеУровня","Ошибка");
		СтруктураСобытия.Вставить("Комментарий",ОписаниеОшибки());
		СтруктураСобытия.Вставить("ДатаСобытия",ТекущаяДата());
		СобытияДляЖурналаРегистрации = Новый СписокЗначений;
		СобытияДляЖурналаРегистрации.Добавить(СтруктураСобытия);
		ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СобытияДляЖурналаРегистрации);
	КонецПопытки;
КонецПроцедуры