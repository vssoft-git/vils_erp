#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// begin fix Suetin 06.03.2019 12:15:13 Заполнение Порядка расчетов по умолчанию изменено на По договорам
&После("ОбработкаЗаполнения")
Процедура ВИЛС_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ПорядокРасчетов)
			Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	КонецЕсли;	
КонецПроцедуры

&Вместо("ОбработкаПроверкиЗаполнения")
Процедура ВИЛС_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем Ошибки;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Дата начала действия договора должна быть не меньше, чем дата договора.
	Если ЗначениеЗаполнено(Дата) И ЗначениеЗаполнено(ДатаНачалаДействия) Тогда
		
		Если НачалоДня(Дата) > ДатаНачалаДействия Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата начала действия договора должна быть не меньше даты договора';
								|en = 'Contract effective date cannot be less than the contract date'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, 
				"ДатаНачалаДействия",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Дата окончания действия договора должна быть не меньше, чем дата договора.
	Если ЗначениеЗаполнено(Дата) И ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда	
		
		Если НачалоДня(Дата) > ДатаОкончанияДействия Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата окончания действия договора должна быть не меньше даты договора';
								|en = 'Contract expiration date cannot be less than the contract date'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, 
				"ДатаОкончанияДействия",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Дата окончания действия договора должна быть не меньше, чем дата начала действия.
	Если ЗначениеЗаполнено(ДатаНачалаДействия) И ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда	
		
		Если ДатаНачалаДействия > ДатаОкончанияДействия Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата окончания действия договора должна быть не меньше даты начала действия';
								|en = 'Contract expiration date cannot be less than contract effective date'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, 
				"ДатаОкончанияДействия",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Партнер");
	
	Если НЕ ЗначениеЗаполнено(Партнер) Тогда
		
		ТекстОшибки = НСтр("ru = 'Поле ""%1"" не заполнено';
							|en = 'The ""%1"" field is not filled in'");
		ЗаголовокПартнер = ПартнерыИКонтрагенты.ЗаголовокРеквизитаПартнерВЗависимостиОтХозяйственнойОперации(ХозяйственнаяОперация);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ЗаголовокПартнер);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, 
			"Партнер",
			,
			Отказ);
		
	КонецЕсли;
	
	Если Не УчетАгентскогоНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидАгентскогоДоговора");
	КонецЕсли;
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если ЗначениеЗаполнено(НаправлениеДеятельности)
		ИЛИ НЕ НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	//++ НЕ УТ
	Если Не ДоговорСУчастникомГОЗ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ГосударственныйКонтракт");
	КонецЕсли;
	
	Если Не ПлатежиПо275ФЗ Или (ТипДоговора <> Перечисления.ТипыДоговоров.СПоставщиком) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ТипПлатежаФЗ275");
	КонецЕсли;
	
	Если ПлатежиПо275ФЗ И ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком Тогда
		
		ДенежныеСредстваСервер.ОбработкаПроверкиЗаполненияПодтверждающиеДокументы(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Ошибки);
		ДенежныеСредстваСервер.ПроверитьЗаполнениеРеквизитовПлатежаГОЗ(ЭтотОбъект, Отказ);
		
		Если ДоговорСУчастникомГОЗ Тогда
			Если ЗначениеЗаполнено(БанковскийСчет) И ЗначениеЗаполнено(ГосударственныйКонтракт)
				И ГосударственныйКонтракт <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ГосударственныйКонтракт") Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Государственный контракт, к которому привязан банковский счет, не должен отличаться от контракта, выбранного в договоре.';
						|en = 'State contract to which the bank account is linked cannot differ from the contract selected in the contract.'"),
					ЭтотОбъект,
					"БанковскийСчет",,
					Отказ);
			КонецЕсли;
			Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) И ЗначениеЗаполнено(ГосударственныйКонтракт)
				И ГосударственныйКонтракт <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента, "ГосударственныйКонтракт") Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Государственный контракт, к которому привязан банковский счет, не должен отличаться от контракта, выбранного в договоре.';
						|en = 'State contract to which the bank account is linked cannot differ from the contract selected in the contract.'"),
					ЭтотОбъект,
					"БанковскийСчетКонтрагента",,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПлатежиПо275ФЗ И ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем Тогда
		
		Если ЗначениеЗаполнено(БанковскийСчет) И ЗначениеЗаполнено(ГосударственныйКонтракт)
			И ГосударственныйКонтракт <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ГосударственныйКонтракт") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Государственный контракт, к которому привязан банковский счет, не должен отличаться от контракта, выбранного в договоре.';
					|en = 'State contract to which the bank account is linked cannot differ from the contract selected in the contract.'"),
				ЭтотОбъект,
				"БанковскийСчет",,
				Отказ);
		КонецЕсли;
		Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) И ЗначениеЗаполнено(ГосударственныйКонтракт)
			И ГосударственныйКонтракт <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента, "ГосударственныйКонтракт") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Государственный контракт, к которому привязан банковский счет, не должен отличаться от контракта, выбранного в договоре.';
					|en = 'State contract to which the bank account is linked cannot differ from the contract selected in the contract.'"),
				ЭтотОбъект,
				"БанковскийСчетКонтрагента",,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	ИспользоватьОформлениеЗакупок = (ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
		Или ТипДоговора = Перечисления.ТипыДоговоров.ВвозИзЕАЭС
		Или ТипДоговора = Перечисления.ТипыДоговоров.Импорт);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой")
		Или СпособДоставки = Перечисления.СпособыДоставки.ОпределяетсяВРаспоряжении
		Или Не ИспользоватьОформлениеЗакупок Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособДоставки");
		//#Удаление
		//МассивНепроверяемыхРеквизитов.Добавить("ПеревозчикПартнер");
		//МассивНепроверяемыхРеквизитов.Добавить("АдресДоставкиПеревозчика");
		//#КонецУдаления
	КонецЕсли;
	//#Вставка
	МассивНепроверяемыхРеквизитов.Добавить("ПеревозчикПартнер");
	МассивНепроверяемыхРеквизитов.Добавить("АдресДоставкиПеревозчика");
	//#КонецВставки
	ДоставкаТоваров.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	
	Если НалогообложениеНДСОпределяетсяВДокументе 
		Или ТипДоговора = Перечисления.ТипыДоговоров.Импорт
		Или ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НалогообложениеНДС");
	КонецЕсли;
	
	Если ЗакупкаПодДеятельностьОпределяетсяВДокументе
		Или (ТипДоговора <> Перечисления.ТипыДоговоров.СПоставщиком
			И ТипДоговора <> Перечисления.ТипыДоговоров.СПереработчиком
			И ТипДоговора <> Перечисления.ТипыДоговоров.СПоклажедателем) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗакупкаПодДеятельность");
	КонецЕсли;
	
	Если ТипДоговора <> Перечисления.ТипыДоговоров.СПоклажедателем Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПорядокОформленияСписанияНедостачПринятыхНаХранениеТоваров");
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// end fix Suetin 06.03.2019 12:15:17
#КонецОбласти

#КонецЕсли