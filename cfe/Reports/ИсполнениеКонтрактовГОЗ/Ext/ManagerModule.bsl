#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

&Вместо("ТаблицаПравилРасчетаПоказателей")	
Функция ВИЛС_ТаблицаПравилРасчетаПоказателей(ПараметрыОтчета)
	
	// Счета учета финансирования
	СчетаУчетаРасчетыСКлиентами = СчетаУчетаРасчетыСКлиентами();
	СчетаУчетаКредитыИЗаймы = СчетаУчетаКредитыИЗаймы();
	СчетаУчетаПроцентыПоКредитамИЗаймам = СчетаУчетаПроцентыПоКредитамИЗаймам();
	СчетаУчетаЗадолженностьПередПоставщиками = СчетаУчетаЗадолженностьПередПоставщиками();
	
	// Счета учета денежных средств
	СчетаУчетаДенеженыеСредстваНаСчетах = СчетаУчетаДенеженыеСредстваНаСчетах();
	СчетаУчетаДепозиты = СчетаУчетаДепозиты();
	СчетаУчетаАвансыВыданныеПоставщикам = СчетаУчетаАвансыВыданныеПоставщикам();
	СчетаУчетаДенежныхСредстваВПути = СчетаУчетаДенежныхСредстваВПути();
	
	// Счета учета запасов
	СчетаУчетаМатериалыНаСкадах = СчетаУчетаМатериалыНаСкадах();
	СчетаУчетаНДСВходящий = СчетаУчетаНДСВходящий();
	СчетаУчетаПолуфабрикатыНаСкладах = СчетаУчетаПолуфабрикатыНаСкладах();
	СчетаУчетаМатериалыВПереработчике = СчетаУчетаМатериалыВПереработчике();
	СчетаУчетаРасходыБудущихПериодов = СчетаУчетаРасходыБудущихПериодов();
	СчетаУчетаСредстваПроизводства = СчетаУчетаСредстваПроизводства();
	
	// Счета учета производства
	СчетаУчетаПроизводство = СчетаУчетаПроизводство();
	СчетаУчетаОбщепроизводственныеЗатраты = СчетаУчетаОбщепроизводственныеЗатраты();
	СчетаУчетаОбщехозяйственныеЗатраты = СчетаУчетаОбщехозяйственныеЗатраты();
	
	СчетаУчетаГотоваяПродукция = СчетаУчетаГотоваяПродукция();
	
	КорСчетаУчетаПрочихПроизводственныхЗатрат = КорСчетаУчетаПрочихПроизводственныхЗатрат();
	
	// Продажи
	СчетаУчетаНДССПродаж = СчетаУчетаНДССПродаж();
	СчетаУчетаНДССАвансовКлиентам = СчетаУчетаНДССАвансовКлиентам();
	СчетаУчетаНДССАвансовПоставщикам = СчетаУчетаНДССАвансовПоставщикам();
	СчетаУчетаРасчетовПоНДС = СчетаУчетаРасчетовПоНДС();
	СчетаУчетаУправленческихРасходов = СчетаУчетаУправленческихРасходов();
	СчетаУчетаКоммерческиеРасходы = СчетаУчетаКоммерческиеРасходы();
	СчетаУчетаВыручкаОтПродаж = СчетаУчетаВыручкаОтПродаж();
	СчетаУчетаСебестоимостьПродаж = СчетаУчетаСебестоимостьПродаж();
	СчетаУчетаПрочиеРасходы = СчетаУчетаПрочиеРасходы();
	СчетаУчетаПрочиеДоходы = СчетаУчетаПрочиеДоходы();
	
	ПравилаРасчетаПоказателей = Новый ТаблицаЗначений;
	ПравилаРасчетаПоказателей.Колонки.Добавить("ГруппаПоказателей1",   Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("ГруппаПоказателей2",   Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("Пассивный",            Новый ОписаниеТипов("Булево"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("КодПоказателя",        Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("ЭтоГруппа",            Новый ОписаниеТипов("Булево"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("Заголовок",            Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("ЦелевойПараметр",      Новый ОписаниеТипов("Строка"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("Обороты",              Новый ОписаниеТипов("СписокЗначений"));
	ПравилаРасчетаПоказателей.Колонки.Добавить("ПоказателиРеглОтчета", Новый ОписаниеТипов("СписокЗначений"));
	
#Область ФинансированиеКонтракта

	// 100 "Финансирование контракта"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "";
	НовоеПравило.КодПоказателя      = "100";
	НовоеПравило.ЭтоГруппа          = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Финансирование контракта';
									|en = 'Contract funding'");
	НовоеПравило.ЦелевойПараметр = "ОбъемФинансированияКонтракта";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000001000001, П000001000002, П000001000003");
	
	// 101 "Средства, полученные от заказчика"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "";
	НовоеПравило.КодПоказателя      = "101";
	НовоеПравило.Пассивный          = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Средства, полученные от заказчика';
									|en = 'Funds received from the customer'");
	НовоеПравило.ЦелевойПараметр = "ОбъемФинансированияКонтракта";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000001100001, П000001100002, П000001100003, П000001100004, П000001100006, П000001100007");
	
	ИсключаемыеКорСчета = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеКорСчета, СчетаУчетаВыручкаОтПродаж);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеКорСчета, СчетаУчетаРасчетыСКлиентами);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеКорСчета, СчетаУчетаПрочиеРасходы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеКорСчета, СчетаУчетаПрочиеДоходы);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаРасчетыСКлиентами;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ИсключаемыйКорСчет = ИсключаемыеКорСчета;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 102 "Кредиты банка"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "";
	НовоеПравило.КодПоказателя = "102";
	НовоеПравило.Пассивный     = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Кредиты банка';
									|en = 'Bank credits'");
	НовоеПравило.ЦелевойПараметр = "ОбъемКредитования";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000001200001, П000001200002, П000001200003, П000001200004, П000001200006, П000001200007");
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаКредитыИЗаймы;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 102 "Задолженность по процентам по кредитам"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "";
	НовоеПравило.КодПоказателя = "103";
	НовоеПравило.Пассивный     = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Задолженность по процентам по кредитам';
									|en = 'Interest debt under credits'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000001300003, П000001300004, П000001300006, П000001300007");
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроцентыПоКредитамИЗаймам;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 104 "Задолженность перед поставщиками"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "100";
	НовоеПравило.ГруппаПоказателей2 = "";
	НовоеПравило.КодПоказателя = "104";
	НовоеПравило.Пассивный     = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Задолженность перед поставщиками';
									|en = 'Accounts payable'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000001400003, П000001400004, П000001400005, П000001400006, П000001400007");
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаЗадолженностьПередПоставщиками;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
#КонецОбласти
	
#Область РаспределениеСредствКонтракта

	// 200 "Распределение ресурсов контракта"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "";
	НовоеПравило.КодПоказателя      = "200";
	НовоеПравило.ЭтоГруппа          = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Распределение ресурсов контракта';
									|en = 'Allocation of contract resources'");
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002000003");

	#Область ДенежныеСредства
	
	// 210 "Денежные средства"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "210";
	НовоеПравило.КодПоказателя      = "210";
	НовоеПравило.ЭтоГруппа          = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Распределение ресурсов контракта';
									|en = 'Allocation of contract resources'");
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002100003, П000002100004, П000002100005, П000002100006, П000002100007, П000002100008, П000002100009");
	
	// 211 "Денежные средства на отдельных счетах"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "210";
	НовоеПравило.КодПоказателя = "211";
	НовоеПравило.Заголовок = НСтр("ru = 'Денежные средства на отдельных счетах';
									|en = 'Cash on separate accounts'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002110003, П000002110004, П000002110006, П000002110007, П000002110008, П000002110009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаДенеженыеСредстваНаСчетах;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ИсключаемыйКорСчет = СчетаУчетаДенежныхСредстваВПути;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаДенеженыеСредстваНаСчетах;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаДенежныхСредстваВПути;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);

	// 212 "Денежные средства на депозитах в банке"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "210";
	НовоеПравило.КодПоказателя = "212";
	НовоеПравило.Заголовок = НСтр("ru = 'Денежные средства на депозитах в банке';
									|en = 'Cash on deposit bank accounts'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002120003, П000002120004, П000002120007");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаДепозиты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 213 "Авансы, выданные поставщикам"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "210";
	НовоеПравило.КодПоказателя = "213";
	НовоеПравило.Заголовок = НСтр("ru = 'Авансы, выданные поставщикам';
									|en = 'Advance payments to suppliers'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002130003, П000002130004, П000002130005, П000002130006, П000002130007, П000002130009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаАвансыВыданныеПоставщикам;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	#КонецОбласти
	
	#Область Запасы
	
	// 220 "Запасы"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "220";
	НовоеПравило.КодПоказателя      = "220";
	НовоеПравило.ЭтоГруппа          = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Запасы';
									|en = 'Inventory'");
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002200003, П000002200004, П000002200005, П000002200006, П000002200007, П000002200008, П000002200009");
	
	// 221 "Материалы на складах"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "220";
	НовоеПравило.КодПоказателя = "221";
	НовоеПравило.Заголовок = НСтр("ru = 'Материалы на складах';
									|en = 'Materials in warehouses'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002210003, П000002210004, П000002210005, П000002210006, П000002210007, П000002210008, П000002210009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаМатериалыНаСкадах;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 222 "НДС входящий"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "220";
	НовоеПравило.КодПоказателя = "222";
	НовоеПравило.Заголовок = НСтр("ru = 'НДС входящий';
									|en = 'Incoming VAT'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002220003, П000002220004, П000002220007, П000002220009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДСВходящий;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 223 "Полуфабрикаты на складах"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "220";
	НовоеПравило.КодПоказателя = "223";
	НовоеПравило.Заголовок = НСтр("ru = 'Полуфабрикаты на складах';
									|en = 'Semi-finished products at warehouses'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002230003, П000002230004, П000002230005, П000002230006, П000002230007, П000002230008, П000002230009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПолуфабрикатыНаСкладах;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 224 "Материалы, переданные в переработку"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "220";
	НовоеПравило.КодПоказателя = "224";
	НовоеПравило.Заголовок = НСтр("ru = 'Материалы, переданные в переработку';
									|en = 'Materials transferred to tolling'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002240003, П000002240004, П000002240007, П000002240009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаМатериалыВПереработчике;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 225 "Расходы будущих периодов"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "220";
	НовоеПравило.КодПоказателя = "225";
	НовоеПравило.Заголовок = НСтр("ru = 'Расходы будущих периодов';
									|en = 'Deferred expenses'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002250003, П000002250004, П000002250007");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаРасходыБудущихПериодов;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	//begin fix Клещ А.Н. 14.10.2019 
	МассивИсключаемыхСчетов = Новый Массив;
	МассивИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	МассивИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	ОтборОборотов.ИсключаемыйКорСчет = МассивИсключаемыхСчетов;
	//end fix Клещ А.Н. 14.10.2019
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 226 "Средства производства"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "220";
	НовоеПравило.КодПоказателя = "226";
	НовоеПравило.Заголовок = НСтр("ru = 'Средства производства';
									|en = 'Production means'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002260003, П000002260004, П000002260005, П000002260006, П000002260007, П000002260008, П000002260009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаСредстваПроизводства;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	#КонецОбласти
	
	#Область Производство
	
	// 230 "Производство"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя      = "230";
	НовоеПравило.ЭтоГруппа          = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Производство';
									|en = 'Manufacturing'");
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002300003, П000002300004, П000002300005, П000002300006, П000002300007, П000002300008, П000002300009");
	
	// 231 "Затраты на материалы"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "231";
	НовоеПравило.Заголовок = НСтр("ru = 'Затраты на материалы';
									|en = 'Material costs'");
	НовоеПравило.ЦелевойПараметр = "ЗатратыНаМатериалы";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002310001, П000002310002, П000002310003, П000002310004, П000002310005, П000002310006, П000002310007, П000002310008, П000002310009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыНаСкадах;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыВПереработчике;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаГотоваяПродукция;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыВПереработчике;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "КонтрактыГОЗ";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "ИнаяДеятельность";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	////begin fix Клещ А.Н. 15.10.2019  
	//ОтборОборотов = ОтборОборотов();
	//
	//МассивСчетов20 = Новый Массив;
	//МассивСчетов20.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	//ОтборОборотов.Счет = МассивСчетов20;
	//ОтборОборотов.НаправлениеДеятельности = "Контракт";
	//МассивСчетов21 = Новый Массив;
	//МассивСчетов21.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	//ОтборОборотов.КорСчет = МассивСчетов21;
	////ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	//ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	//ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	////end fix Клещ А.Н. 15.10.2019
	
	// 232 "Затраты на оплату труда"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "232";
	НовоеПравило.Заголовок = НСтр("ru = 'Затраты на оплату труда';
									|en = 'Labor compensation costs'");
	НовоеПравило.ЦелевойПараметр = "ЗатратыНаОплатуТруда";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002320001, П000002320002, П000002320003, П000002320006");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ТипыЗатрат = Новый Массив;
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.СдельнаяОплатаТруда);
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Прочее);
	ОтборОборотов.Субконто1 = ТипыЗатрат;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасчетыПоОплатеТруда();
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ТипыЗатрат = Новый Массив;
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.СдельнаяОплатаТруда);
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Прочее);
	ОтборОборотов.Субконто1 = ТипыЗатрат;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРезервовОтпусков();
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	//begin fix Клещ А.Н. 14.10.2019  
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ТипыЗатрат = Новый Массив;
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.СдельнаяОплатаТруда);
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Прочее);
	ОтборОборотов.Субконто1 = ТипыЗатрат;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасходыБудущихПериодов;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	//end fix Клещ А.Н. 14.10.2019
	
	//begin fix Клещ А.Н. 24.10.2019
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.КорНаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
	МассивВидовРасходов = Новый Массив;
	МассивВидовРасходов.Добавить(Перечисления.ВидыРасходовНУ.ОплатаТруда);
	ОтборОборотов.ОтборСубконто2ВидРасходов = МассивВидовРасходов;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	//end fix Клещ А.Н. 24.10.2019

	// 233 "Прочие производственные затраты"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "233";
	НовоеПравило.Заголовок = НСтр("ru = 'Прочие производственные затраты';
									|en = 'Other manufacturing costs'");
	НовоеПравило.ЦелевойПараметр = "ПрочиеПроизводственныеЗатраты";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002330001, П000002330002, П000002330003, П000002330004, П000002330005, П000002330006, П000002330007, П000002330008, П000002330009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыНаСкадах;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	//begin fix Клещ А.Н. 24.10.2019 
	МассивВидовРасходов = Новый Массив;
	МассивВидовРасходов.Добавить(Перечисления.ВидыРасходовНУ.ОплатаТруда);
	ОтборОборотов.ИсключаемыеОтборСубконто2ВидРасходов = МассивВидовРасходов;
	//end fix Клещ А.Н. 24.10.2019
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыВПереработчике;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	//begin fix Клещ А.Н. 24.10.2019 
	ОтборОборотов.ИсключаемыеОтборСубконто2ВидРасходов = МассивВидовРасходов;
	//end fix Клещ А.Н. 24.10.2019
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = КорСчетаУчетаПрочихПроизводственныхЗатрат;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	//begin fix Клещ А.Н. 24.10.2019 
	ОтборОборотов.ИсключаемыеОтборСубконто2ВидРасходов = МассивВидовРасходов;
	//end fix Клещ А.Н. 24.10.2019
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "КонтрактыГОЗ";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	//begin fix Клещ А.Н. 24.10.2019 
	ОтборОборотов.ИсключаемыеОтборСубконто2ВидРасходов = МассивВидовРасходов;
	//end fix Клещ А.Н. 24.10.2019
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "ИнаяДеятельность";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	//begin fix Клещ А.Н. 24.10.2019 
	ОтборОборотов.ИсключаемыеОтборСубконто2ВидРасходов = МассивВидовРасходов;
	//end fix Клещ А.Н. 24.10.2019
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасходыБудущихПериодов;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	//begin fix Клещ А.Н. 24.10.2019 
	ОтборОборотов.ИсключаемыеОтборСубконто2ВидРасходов = МассивВидовРасходов;
	//end fix Клещ А.Н. 24.10.2019
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ТипыЗатрат = Новый Массив;
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Работы);
	ТипыЗатрат.Добавить(Перечисления.ТипыЗатратРегл.Прочее);
	ОтборОборотов.Субконто1 = ТипыЗатрат;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаЗадолженностьПередПоставщиками;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	//begin fix Клещ А.Н. 24.10.2019 
	ОтборОборотов.ИсключаемыеОтборСубконто2ВидРасходов = МассивВидовРасходов;
	//end fix Клещ А.Н. 24.10.2019
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 234 "Общепроизводственные затраты"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "234";
	НовоеПравило.Заголовок = НСтр("ru = 'Общепроизводственные затраты';
	|en = 'General manufacturing costs'");
	НовоеПравило.ЦелевойПараметр = "ОбщепроизводственныеЗатраты";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002340001, П000002340002, П000002340003, П000002340006");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.КорСчет = СчетаУчетаОбщепроизводственныеЗатраты;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 235 "Общехозяйственные затраты"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "235";
	НовоеПравило.Заголовок = НСтр("ru = 'Общехозяйственные затраты';
									|en = 'General business costs'");
	НовоеПравило.ЦелевойПараметр = "ОбщехозяйственныеЗатраты";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002350001, П000002350002, П000002350003, П000002350006");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.Прочее;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаОбщехозяйственныеЗатраты;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 236 "Полуфабрикаты собственного производства, внутренние работы"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "236";
	НовоеПравило.Заголовок = НСтр("ru = 'Полуфабрикаты собственного производства, внутренние работы';
									|en = 'Own-produced semi-finished products, in-house works'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002360003, П000002360004");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.Субконто1 = Перечисления.ТипыЗатратРегл.МатериальныеЗатраты;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПолуфабрикатыНаСкладах;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(Перечисления.ТипыЗатратРегл.Работы);
	МассивСубконто.Добавить(Перечисления.ТипыЗатратРегл.МатериальныеЗатраты);
	ОтборОборотов.Субконто1 = МассивСубконто;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.ИзменяетсяПодразделение = Истина;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 237 "Выпуск полуфабрикатов, внутренних работ"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "237";
	НовоеПравило.Заголовок = НСтр("ru = 'Выпуск полуфабрикатов, внутренних работ';
									|en = 'Release of semi-finished products, in-house works'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002370003, П000002370007");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПолуфабрикатыНаСкладах;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыНаСкадах;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	МассивКорСубконто = Новый Массив;
	МассивКорСубконто.Добавить(Перечисления.ТипыЗатратРегл.Работы);
	МассивКорСубконто.Добавить(Перечисления.ТипыЗатратРегл.МатериальныеЗатраты);
	ОтборОборотов.КорСубконто1 = МассивКорСубконто;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ОтборОборотов.ИзменяетсяПодразделение = Истина;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 238 "Выпуск продукции"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "230";
	НовоеПравило.КодПоказателя = "238";
	НовоеПравило.Заголовок = НСтр("ru = 'Выпуск продукции';
									|en = 'Product release'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002380003, П000002380007");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаГотоваяПродукция;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаСебестоимостьПродаж;
	ОтборОборотов.КорНаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотКт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	#КонецОбласти
	
	#Область ГотоваяПродукцияНаСкладе
	
	// 240 "Готовая продукция на складе"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "240";
	НовоеПравило.КодПоказателя = "241";
	НовоеПравило.Заголовок = НСтр("ru = 'Готовая продукция на складе';
									|en = 'Finished products in warehouse'");
	НовоеПравило.ЦелевойПараметр = "";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000002400003, П000002400004, П000002400005, П000002400006, П000002400007, П000002400008, П000002400009");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаГотоваяПродукция;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	#КонецОбласти
	
#КонецОбласти

#Область ОтгрузкаПродукцииВыполнениеРабот

	// 300 Отгрузка продукции, выполнение работ"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "300";
	НовоеПравило.ГруппаПоказателей2 = "301";
	НовоеПравило.КодПоказателя = "301";
	НовоеПравило.Заголовок = НСтр("ru = 'Отгрузка продукции, выполнение работ';
									|en = 'Product shipment, work performance'");
	НовоеПравило.ЦелевойПараметр = "ОбъемФинансированияКонтракта";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000003000001, П000003000002, П000003000003");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаВыручкаОтПродаж;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоКт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// Корректировки, реализации материалов
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеДоходы;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоКт;
	ОтборОборотов.КорСчет = СчетаУчетаРасчетыСКлиентами;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);

	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаРасчетыСКлиентами;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоКт;
	ОтборОборотов.КорСчет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.Множитель = -1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 310 "Себестоимость реализованной продукции"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "310";
	НовоеПравило.КодПоказателя = "310";
	НовоеПравило.Заголовок = НСтр("ru = 'Себестоимость реализованной продукции';
									|en = 'Sold goods cost'");
	НовоеПравило.ЦелевойПараметр = "Затраты";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000003100001, П000003100002, П000003100003, П000003100004, П000003100006");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаСебестоимостьПродаж;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// Ошибки округления, корректировки реализации и реализации материалов, полуфабрикатов, списания задолженности
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПроизводство;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПроизводство;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПрочиеДоходы;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыНаСкадах;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаМатериалыВПереработчике;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаСредстваПроизводства;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПолуфабрикатыНаСкладах;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаГотоваяПродукция;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаАвансыВыданныеПоставщикам;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// Курсовые разницы
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаЗадолженностьПередПоставщиками;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 320 "Управленческие расходы"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "320";
	НовоеПравило.КодПоказателя = "320";
	НовоеПравило.Заголовок = НСтр("ru = 'Административно - управленческие расходы';
									|en = 'Administrative and management expenses'");
	НовоеПравило.ЦелевойПараметр = "УправленческиеРасходы";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000003200001, П000003200002, П000003200003, П000003200006");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаУправленческихРасходов;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 330 "Коммерческие расходы"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "330";
	НовоеПравило.КодПоказателя = "330";
	НовоеПравило.Заголовок = НСтр("ru = 'Коммерческие расходы';
									|en = 'Selling expenses '");
	НовоеПравило.ЦелевойПараметр = "КоммерческиеРасходы";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000003300001, П000003300002, П000003300003, П000003300004");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаПроизводства();//FIX Клещ А.Н. СчетаУчетаКоммерческиеРасходы;
	ОтборОборотов.КорСчет   = ПолучитьСчетКоммерческиеРасходы();
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";

	
	//	ОтборОборотов.Счет = ПолучитьСчетРасходовНаПродажу();//FIX Клещ А.Н.СчетаУчетаКоммерческиеРасходы;
	//ОтборОборотов.КорСчет   = ПолучитьСчетКоммерческиеРасходы();
	//ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	////ОтборОборотов.НаправлениеДеятельности = "Контракт";
	//ОтборОборотов.КорНаправлениеДеятельности = "Контракт";//FIX Клещ А.Н.ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 340 "Проценты по кредитам банка"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "340";
	НовоеПравило.КодПоказателя = "340";
	НовоеПравило.Заголовок = НСтр("ru = 'Проценты по кредитам банка';
									|en = 'Bank loan interest'");
	НовоеПравило.ЦелевойПараметр = "ПроцентыПоКредитам";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000003400001, П000003400002, П000003400003, П000003400004");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.КорСчет   = СчетаУчетаПроцентыПоКредитамИЗаймам;
	ОтборОборотов.ТипИтогов =  Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	// 350 "НДС с выручки от продаж"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "350";
	НовоеПравило.КодПоказателя = "350";
	НовоеПравило.Заголовок = НСтр("ru = 'НДС с выручки от продаж';
									|en = 'VAT from sales revenue'");
	НовоеПравило.ЦелевойПараметр = "СуммаНДС";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000003500003, П000003500006");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДССПродаж;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПрочиеДоходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.Множитель = -1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	#Область НДССАвансов
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДССАвансовКлиентам;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.Множитель = 1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаНДССАвансовКлиентам;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.Множитель = -1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДССАвансовПоставщикам;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.Множитель = 1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаНДССАвансовПоставщикам;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт;
	ОтборОборотов.Множитель = -1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	#КонецОбласти
	
	// 360 "Прибыль контракта"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "300";
	НовоеПравило.ГруппаПоказателей2 = "360";
	НовоеПравило.КодПоказателя = "360";
	НовоеПравило.Пассивный     = Истина;
	НовоеПравило.Заголовок = НСтр("ru = 'Прибыль контракта';
									|en = 'Contract profit'");
	НовоеПравило.ЦелевойПараметр = "ПрибыльКонтракта";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000003600001, П000003600002, П000003600003");
	
	МассивОтборовОборотов = Новый Массив;
	//+ Выручка
	ПравилоВыручка = ПравилаРасчетаПоказателей.Найти("301", "КодПоказателя");
	Для каждого Оборот Из ПравилоВыручка.Обороты Цикл
		ОтборОборотов = ОтборОборотов();
		ЗаполнитьЗначенияСвойств(ОтборОборотов, Оборот.Значение);
		МассивОтборовОборотов.Добавить(ОтборОборотов);
	КонецЦикла;
	//- Себестоимость готовой продукции/работ
	ПравилоСебестоимость = ПравилаРасчетаПоказателей.Найти("310", "КодПоказателя");
	Для каждого Оборот Из ПравилоСебестоимость.Обороты Цикл
		ОтборОборотов = ОтборОборотов();
		ЗаполнитьЗначенияСвойств(ОтборОборотов, Оборот.Значение);
		ОтборОборотов.Множитель = ОтборОборотов.Множитель * (-1);
		МассивОтборовОборотов.Добавить(ОтборОборотов);
	КонецЦикла;
	//- Управленческие расходы 
	ПравилоУправленческиеРасходы = ПравилаРасчетаПоказателей.Найти("320", "КодПоказателя");
	Для каждого Оборот Из ПравилоУправленческиеРасходы.Обороты Цикл
		ОтборОборотов = ОтборОборотов();
		ЗаполнитьЗначенияСвойств(ОтборОборотов, Оборот.Значение);
		ОтборОборотов.Множитель = ОтборОборотов.Множитель * (-1);
		МассивОтборовОборотов.Добавить(ОтборОборотов);
	КонецЦикла;
	//- Коммерческие расходы 
	ПравилоКоммерческиеРасходы = ПравилаРасчетаПоказателей.Найти("330", "КодПоказателя");
	Для каждого Оборот Из ПравилоКоммерческиеРасходы.Обороты Цикл
		Если Не (ТипЗнч(Оборот.Значение.Счет) = Тип("ПланСчетовСсылка.Хозрасчетный") и Не Оборот.Значение.Счет = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство    	// begin fix Suetin 19.11.2019 10:10:41
			и ТипЗнч(Оборот.Значение.КорСчет) = Тип("Массив") и Оборот.Значение.КорСчет.Найти(ПланыСчетов.Хозрасчетный.КоммерческиеРасходы) = Неопределено) Тогда 
			Продолжить;
		КонецЕсли;																																					// end fix Suetin 19.11.2019 10:10:54	
		ОтборОборотов = ОтборОборотов();
		ЗаполнитьЗначенияСвойств(ОтборОборотов, Оборот.Значение);
		ОтборОборотов.Множитель = ОтборОборотов.Множитель * (-1);
		МассивОтборовОборотов.Добавить(ОтборОборотов);
	КонецЦикла;
	//- Проценты по кредитам банка
	ПравилоПроцентыПоКредитам = ПравилаРасчетаПоказателей.Найти("340", "КодПоказателя");
	Для каждого Оборот Из ПравилоПроцентыПоКредитам.Обороты Цикл
		ОтборОборотов = ОтборОборотов();
		ЗаполнитьЗначенияСвойств(ОтборОборотов, Оборот.Значение);
		ОтборОборотов.Множитель = ОтборОборотов.Множитель * (-1);
		МассивОтборовОборотов.Добавить(ОтборОборотов);
	КонецЦикла;
	
	Для каждого ОтборОборотов Из МассивОтборовОборотов Цикл
		Если ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт Тогда
			ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоДт;
		ИначеЕсли ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.ОборотКт Тогда
			ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоКт;
		КонецЕсли;
		ДобавитьОборот(НовоеПравило, ОтборОборотов);
	КонецЦикла;
	
	//- НДС с выручки от продаж
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДССПродаж;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоДт;
	ОтборОборотов.Множитель = -1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаПрочиеРасходы;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоДт;
	ОтборОборотов.Множитель = -1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаРасчетовПоНДС;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.КорСчет = СчетаУчетаПрочиеДоходы;
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоДт;
	ОтборОборотов.Множитель = 1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДССАвансовКлиентам;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоДт;
	ОтборОборотов.Множитель = -1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаНДССАвансовПоставщикам;
	ОтборОборотов.НаправлениеДеятельности = "Контракт";
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоКт;
	ОтборОборотов.Множитель = 1;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	#КонецОбласти
	
	// 400 "(+) Привлечение ресурсов в контракт / (-) Перенаправление ресурсов контракта"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "400";
	НовоеПравило.ГруппаПоказателей2 = "400";
	НовоеПравило.КодПоказателя      = "400";
	НовоеПравило.ЭтоГруппа          = Истина;
	НовоеПравило.Заголовок = НСтр("ru = '(+) Привлечение ресурсов в контракт / (-) Перенаправление ресурсов контракта';
									|en = '(+) Raise resources to contract / (-) Forward contract resources'");
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000004000003, П000004000005, П000004000006, П000004000008, П000004000009");
	
	// 500 "Средства, списанные в счет прибыли контракта"
	НовоеПравило = ПравилаРасчетаПоказателей.Добавить(); 
	НовоеПравило.ГруппаПоказателей1 = "200";
	НовоеПравило.ГруппаПоказателей2 = "501";
	НовоеПравило.КодПоказателя = "501";
	НовоеПравило.Заголовок = НСтр("ru = 'Средства, списанные в счет прибыли контракта';
									|en = 'Funds written off to contract profit account'");
	НовоеПравило.ЦелевойПараметр = "СписаниеДенежныхСредствСОтдельногоСчета";
	ДобавитьПоказателиРеглОтчета(НовоеПравило, "П000005000001, П000005000002, П000005000003");
	
	ОтборОборотов = ОтборОборотов();
	ОтборОборотов.Счет = СчетаУчетаДенеженыеСредстваНаСчетах;
	ОтборОборотов.НаправлениеДеятельности    = "Контракт";
	ОтборОборотов.ТипИтогов = Перечисления.ТипыИтогов.СальдоКт;
	ТипыПлатежейФЗ275 = Новый Массив;
	ТипыПлатежейФЗ275.Добавить(Справочники.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю);
	ТипыПлатежейФЗ275.Добавить(Справочники.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю);
	ТипыПлатежейФЗ275.Добавить(Справочники.ТипыПлатежейФЗ275.СписаниеНаВозмещениеЗатратЗаСчетСобственныхСредств);
	ТипыПлатежейФЗ275.Добавить(Справочники.ТипыПлатежейФЗ275.ПеречислениеДенежныхСредствПослеЗавершенияГосконтракта);
	ОтборОборотов.ТипыПлатежейФЗ275 = ТипыПлатежейФЗ275;
	ДобавитьОбороты(НовоеПравило, ОтборОборотов, ПараметрыОтчета.Детализация);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КодПоказателя) Тогда
		ПравилаКУдалению = Новый Массив;
		Для каждого Правило Из ПравилаРасчетаПоказателей Цикл
			Если Правило.ГруппаПоказателей1 <> ПараметрыОтчета.КодПоказателя
				 И Правило.ГруппаПоказателей2 <> ПараметрыОтчета.КодПоказателя
				 И Правило.КодПоказателя <> ПараметрыОтчета.КодПоказателя Тогда
				ПравилаКУдалению.Добавить(Правило);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Правило Из ПравилаКУдалению Цикл
			ПравилаРасчетаПоказателей.Удалить(Правило);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПравилаРасчетаПоказателей;
	
КонецФункции

&Вместо("ДобавитьОборот")
Процедура ВИЛС_ДобавитьОборот(Правило, ОтборОборота)
	
	Оборот = Новый Структура;
	
	Оборот.Вставить("Счет",      ОтборОборота.Счет);
	
	МассивСубконто1 = Новый Массив;
	Если ТипЗнч(ОтборОборота.Субконто1) = Тип("Массив") Тогда
		МассивСубконто1 = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ОтборОборота.Субконто1);
	ИначеЕсли ЗначениеЗаполнено(ОтборОборота.Субконто1) Тогда
		МассивСубконто1.Добавить(ОтборОборота.Субконто1);
	КонецЕсли;
	Оборот.Вставить("Субконто1", МассивСубконто1);
	МассивНаправленийДеятельности = Новый СписокЗначений;
	Оборот.Вставить("НаправлениеДеятельности", ОтборОборота.НаправлениеДеятельности);
	
	МассивКорСчетов = Новый Массив;
	Если ТипЗнч(ОтборОборота.КорСчет) = Тип("Массив") Тогда
		МассивКорСчетов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ОтборОборота.КорСчет);
	ИначеЕсли ТипЗнч(ОтборОборота.КорСчет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		МассивКорСчетов.Добавить(ОтборОборота.КорСчет);
	КонецЕсли;
	Оборот.Вставить("КорСчет", МассивКорСчетов);
	
	МассивКорСубконто1 = Новый Массив;
	Если ТипЗнч(ОтборОборота.КорСубконто1) = Тип("Массив") Тогда
		МассивКорСубконто1 = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ОтборОборота.КорСубконто1);
	ИначеЕсли ЗначениеЗаполнено(ОтборОборота.КорСубконто1) Тогда
		МассивКорСубконто1.Добавить(ОтборОборота.КорСубконто1);
	КонецЕсли;
	Оборот.Вставить("КорСубконто1", МассивКорСубконто1);
	Оборот.Вставить("КорНаправлениеДеятельности", ОтборОборота.КорНаправлениеДеятельности);
	 
	МассивИсключаемыхКорСчетов = Новый Массив;
	Если ТипЗнч(ОтборОборота.ИсключаемыйКорСчет) = Тип("Массив") Тогда
		МассивИсключаемыхКорСчетов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ОтборОборота.ИсключаемыйКорСчет);
	ИначеЕсли ТипЗнч(ОтборОборота.ИсключаемыйКорСчет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		МассивИсключаемыхКорСчетов.Добавить(ОтборОборота.ИсключаемыйКорСчет);
	КонецЕсли;
	Оборот.Вставить("ИсключаемыйКорСчет", МассивИсключаемыхКорСчетов);
	
	Оборот.Вставить("ТипИтогов", ОтборОборота.ТипИтогов);
	Оборот.Вставить("Множитель", ОтборОборота.Множитель);
	
	Оборот.Вставить("ТипыПлатежейФЗ275", ОтборОборота.ТипыПлатежейФЗ275);
	Оборот.Вставить("ИзменяетсяПодразделение", ОтборОборота.ИзменяетсяПодразделение);
	
	//begin fix Клещ А.Н. 24.10.2019
	МассивВидовРасходов = Новый Массив;
	Если ТипЗнч(ОтборОборота.ОтборСубконто2ВидРасходов) = Тип("Массив") Тогда
		МассивВидовРасходов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ОтборОборота.ОтборСубконто2ВидРасходов);
	ИначеЕсли ТипЗнч(ОтборОборота.ОтборСубконто2ВидРасходов) = Тип("ПеречислениеСсылка.ВидыРасходовНУ") Тогда
		МассивВидовРасходов.Добавить(ОтборОборота.ОтборСубконто2ВидРасходов);
	КонецЕсли;
	Оборот.Вставить("ОтборСубконто2ВидРасходов",МассивВидовРасходов);
	
	МассивИсключаемыхВидовРасчетов = Новый Массив;
	Если ТипЗнч(ОтборОборота.ИсключаемыеОтборСубконто2ВидРасходов) = Тип("Массив") Тогда
		МассивИсключаемыхВидовРасчетов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ОтборОборота.ИсключаемыеОтборСубконто2ВидРасходов);
	ИначеЕсли ТипЗнч(ОтборОборота.ИсключаемыеОтборСубконто2ВидРасходов) = Тип("ПеречислениеСсылка.ВидыРасходовНУ") Тогда
		МассивИсключаемыхВидовРасчетов.Добавить(ОтборОборота.ИсключаемыеОтборСубконто2ВидРасходов);
	КонецЕсли;
	Оборот.Вставить("ИсключаемыеОтборСубконто2ВидРасходов",МассивИсключаемыхВидовРасчетов);
	//end fix Клещ А.Н. 24.10.2019

	
	МассивПодстрок = Новый Массив;
	Если Оборот.Множитель = -1 Тогда
		МассивПодстрок.Добавить(НСтр("ru = '(-)';
									|en = '(-)'"));
	КонецЕсли;
	МассивПодстрок.Добавить(Оборот.ТипИтогов);
	Если ТипЗнч(Оборот.Счет) = Тип("Массив") Тогда
		МассивПодстрок.Добавить(СтрСоединить(Оборот.Счет, ","));
	Иначе
		МассивПодстрок.Добавить(Оборот.Счет);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.Субконто1) Тогда
		ОтборСубконто = СтрШаблон(НСтр("ru = '(%1)';
										|en = '(%1)'"), СтрСоединить(Оборот.Субконто1, ","));
		МассивПодстрок.Добавить(ОтборСубконто);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.КорСчет) Тогда
		МассивПодстрок.Добавить(НСтр("ru = '/';
									|en = '/'"));
		МассивПодстрок.Добавить(СтрСоединить(Оборот.КорСчет, ","));
	ИначеЕсли Оборот.ТипИтогов = Перечисления.ТипыИтогов.Оборот
		  ИЛИ Оборот.ТипИтогов = Перечисления.ТипыИтогов.ОборотДт 
		  ИЛИ Оборот.ТипИтогов = Перечисления.ТипыИтогов.ОборотКт Тогда
		МассивПодстрок.Добавить(НСтр("ru = '/';
									|en = '/'"));
		МассивПодстрок.Добавить(НСтр("ru = 'все счета';
									|en = 'all accounts'"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.КорСубконто1) Тогда
		ОтборСубконто = СтрШаблон(НСтр("ru = '(%1)';
										|en = '(%1)'"), СтрСоединить(Оборот.КорСубконто1, ","));
		МассивПодстрок.Добавить(ОтборСубконто);
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.ИсключаемыйКорСчет) Тогда
		МассивПодстрок.Добавить(НСтр("ru = 'за исключением';
									|en = 'except'"));
		МассивПодстрок.Добавить(СтрСоединить(Оборот.ИсключаемыйКорСчет, ","));
	КонецЕсли;
	Если ЗначениеЗаполнено(Оборот.КорНаправлениеДеятельности) Тогда
		Если Оборот.КорНаправлениеДеятельности = "Контракт" Тогда
			МассивПодстрок.Добавить(НСтр("ru = '(в рамках контракта)';
										|en = '(under contract)'"));
		ИначеЕсли Оборот.КорНаправлениеДеятельности = "КонтрактыГОЗ" Тогда
			МассивПодстрок.Добавить(НСтр("ru = '(другие контракты ГОЗ)';
										|en = '(other SDP contracts)'"));
		Иначе
			МассивПодстрок.Добавить(НСтр("ru = '(иная деятельность)';
										|en = '(other activity)'"));
		КонецЕсли;
	КонецЕсли;
	
	Представление = СтрСоединить(МассивПодстрок, " ");
	
	Правило.Обороты.Добавить(Оборот, Представление);
	
КонецПроцедуры

&Вместо("ОтборОборотов")
Функция ВИЛС_ОтборОборотов()
	
	ОтборОборота = Новый Структура();
	ОтборОборота.Вставить("Счет");
	ОтборОборота.Вставить("Субконто1");
	ОтборОборота.Вставить("НаправлениеДеятельности");
	ОтборОборота.Вставить("КорСчет");
	ОтборОборота.Вставить("КорСубконто1");
	ОтборОборота.Вставить("КорНаправлениеДеятельности");
	ОтборОборота.Вставить("ИсключаемыйКорСчет");
	ОтборОборота.Вставить("ТипКорНаправлениеДеятельности");
	ОтборОборота.Вставить("ТипИтогов", Перечисления.ТипыИтогов.Оборот);
	ОтборОборота.Вставить("Множитель", 1);
	ОтборОборота.Вставить("ТипыПлатежейФЗ275");
	ОтборОборота.Вставить("ИзменяетсяПодразделение");
	//begin fix Клещ А.Н. 24.10.2019  
	ОтборОборота.Вставить("ОтборСубконто2ВидРасходов");
	ОтборОборота.Вставить("ИсключаемыеОтборСубконто2ВидРасходов");
	ОтборОборота.Вставить("ОтборКорНаправлениеДеятельности");
	//end fix Клещ А.Н. 24.10.2019
		
	Возврат ОтборОборота;
	
КонецФункции

&Вместо("ТекстЗапросаПоПравилу")
Функция ВИЛС_ТекстЗапросаПоПравилу(Правило, ПараметрыОтчета, Запрос)
	
	Фрагменты = Новый Массив;
	
	Шаблон =
	"ВЫБРАТЬ
	|	&НаправлениеДеятельности                         КАК НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Регистратор                  КАК Регистратор,
	|	ХозрасчетныйОбороты.Период                       КАК Период,
	|	ВЫРАЗИТЬ(""%ГруппаПоказателей1%"" КАК Строка(3)) КАК ГруппаПоказателей1,
	|	ВЫРАЗИТЬ(""%ГруппаПоказателей2%"" КАК Строка(3)) КАК ГруппаПоказателей2,
	|	ВЫРАЗИТЬ(""%КодПоказателя%""      КАК Строка(3)) КАК КодПоказателя,
	|	&Пассивный                                       КАК Пассивный,
	|	&ИндексОборота                                   КАК ИндексОборота,
	|	ВЫРАЗИТЬ(&ЗаголовокОборот КАК Строка(100))       КАК Оборот,
	|	&Множитель                                       КАК Множитель,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоКт) 
	|				ТОГДА &Множитель * (ХозрасчетныйОбороты.ОборотКт - ХозрасчетныйОбороты.ОборотДт)
	|			КОГДА &ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоДт) 
	|				ТОГДА &Множитель * (ХозрасчетныйОбороты.ОборотДт - ХозрасчетныйОбороты.ОборотКт)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СальдоНаТекущуюДату,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоКт) 
	|				ТОГДА &Множитель * (ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения - ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения)
	|			КОГДА &ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоДт) 
	|				ТОГДА &Множитель * (ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения - ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СальдоНаПлановуюДатуЗавершения,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотДт))  
	|				И &УсловиеКонтракт
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотДт 
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДт_НД,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотДт)) 
	|				И &УсловиеДругиеКонтрактыГОЗ
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотДт 
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДт_ГОЗ,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотДт)) 
	|				И &УсловиеИнаяДеятельность
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотДт 
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДт_Ввод,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотКт)) 
	|				И &УсловиеКонтракт
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотКт 
	|		ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКт_НД,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотКт)) 
	|				И &УсловиеДругиеКонтрактыГОЗ
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотКт 
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКт_ГОЗ,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА
	|				&ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотКт))  
	|				И &УсловиеИнаяДеятельность
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотКт 
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКт_Вывод,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотДт)) 
	|				И &УсловиеКонтракт
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения 
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДт_НаДатуЗавершения_НД,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотДт)) 
	|				И &УсловиеДругиеКонтрактыГОЗ
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения 
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДт_НаДатуЗавершения_ГОЗ,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотДт)) 
	|				И &УсловиеИнаяДеятельность
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения 
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДт_НаДатуЗавершения_Ввод,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотКт)) 
	|				И &УсловиеКонтракт
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения 
	|		ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКт_НаДатуЗавершения_НД,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА
	|				&ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотКт)) 
	|				И &УсловиеДругиеКонтрактыГОЗ
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения 
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКт_НаДатуЗавершения_ГОЗ,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА
	|				&ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотКт)) 
	|				И &УсловиеИнаяДеятельность
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения 
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКт_НаДатуЗавершения_Вывод
	|ИЗ
	|	ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Счет В (&Счет)
	|	И &ОтборСубконто1
	|	И &ОтборКорСчет
	|	И &ОтборКорСубконто1
	|	И &ОтборНаправлениеДеятельности
	|	И &ОтборКорНаправлениеДеятельности
	|	И &ОтборИсключаемыйКорСчет
	|	И &ОтборТипыПлатежейФЗ275
	|	И &ОтборИзменяетсяПодразделение
	//begin fix Клещ А.Н. 24.10.2019  
	|	И &ОтборСубконто2ВидРасходов
	|	И &ИсключаемыеОтборСубконто2ВидРасходов
	//end fix Клещ А.Н. 24.10.2019
	|
	|СГРУППИРОВАТЬ ПО
	|	&НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Регистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоКт) 
	|				ТОГДА &Множитель * (ХозрасчетныйОбороты.ОборотКт - ХозрасчетныйОбороты.ОборотДт)
	|			КОГДА &ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоДт) 
	|				ТОГДА &Множитель * (ХозрасчетныйОбороты.ОборотДт - ХозрасчетныйОбороты.ОборотКт)
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0
	|	ИЛИ СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоКт) 
	|				ТОГДА &Множитель * (ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения - ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения)
	|			КОГДА &ТипИтогов = ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.СальдоДт) 
	|				ТОГДА &Множитель * (ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения - ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения)
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0
	|	ИЛИ СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотДт)) 
	|				И &УсловиеКонтракт
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотДт 
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0
	|	ИЛИ СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотДт)) 
	|				И &УсловиеДругиеКонтрактыГОЗ
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотДт 
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0
	|	ИЛИ СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотДт)) 
	|				И &УсловиеИнаяДеятельность
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотДт 
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0
	|	ИЛИ СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотКт)) 
	|				И &УсловиеКонтракт
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотКт 
	|		ИНАЧЕ 0
	|		КОНЕЦ) <> 0
	|	ИЛИ СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотКт)) 
	|				И &УсловиеДругиеКонтрактыГОЗ
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотКт 
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0
	|	ИЛИ СУММА(
	|		ВЫБОР 
	|			КОГДА
	|				&ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотКт)) 
	|				И &УсловиеИнаяДеятельность
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотКт 
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0
	|	ИЛИ СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотДт)) 
	|				И &УсловиеКонтракт
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения 
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0
	|	ИЛИ СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотДт)) 
	|				И &УсловиеДругиеКонтрактыГОЗ
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения 
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0
	|	ИЛИ СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотДт)) 
	|				И &УсловиеИнаяДеятельность
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения 
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0
	|	ИЛИ СУММА(
	|		ВЫБОР 
	|			КОГДА &ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотКт)) 
	|				И &УсловиеКонтракт
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения 
	|		ИНАЧЕ 0
	|		КОНЕЦ) <> 0
	|	ИЛИ СУММА(
	|		ВЫБОР 
	|			КОГДА
	|				&ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотКт)) 
	|				И &УсловиеДругиеКонтрактыГОЗ
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения 
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0
	|	ИЛИ СУММА(
	|		ВЫБОР 
	|			КОГДА
	|				&ТипИтогов В (ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.Оборот), ЗНАЧЕНИЕ(Перечисление.ТипыИтогов.ОборотКт)) 
	|				И &УсловиеИнаяДеятельность
	|				ТОГДА &Множитель * ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения 
	|			ИНАЧЕ 0
	|		КОНЕЦ) <> 0
	|";
	
	КодПоказателя = Правило.КодПоказателя;

	Шаблон = СтрЗаменить(Шаблон, "%КодПоказателя%",     КодПоказателя);
	Шаблон = СтрЗаменить(Шаблон, "%ГруппаПоказателей1%", Правило.ГруппаПоказателей1);
	Шаблон = СтрЗаменить(Шаблон, "%ГруппаПоказателей2%", Правило.ГруппаПоказателей2);
	
	Параметр = СтрШаблон("Пассивный_%1", КодПоказателя);
	Шаблон = СтрЗаменить(Шаблон, "&Пассивный", "&" + Параметр);
	Запрос.УстановитьПараметр(Параметр, Правило.Пассивный);
	
	Шаблон = СтрЗаменить(Шаблон, "&НаправлениеДеятельности", ГруппировкаНаправлениеДеятельности(ПараметрыОтчета));
	Шаблон = СтрЗаменить(Шаблон, "&УсловиеКонтракт", УсловиеКонтракт(ПараметрыОтчета));
	Шаблон = СтрЗаменить(Шаблон, "&УсловиеДругиеКонтрактыГОЗ", УсловиеДругиеКонтрактыГОЗ(ПараметрыОтчета));
	Шаблон = СтрЗаменить(Шаблон, "&УсловиеИнаяДеятельность", УсловиеИнаяДеятельность(ПараметрыОтчета));
	Шаблон = СтрЗаменить(Шаблон, "&УсловиеИзменяетсяПодразделение", УсловиеИнаяДеятельность(ПараметрыОтчета));
	
	Для каждого Оборот Из Правило.Обороты Цикл
		
		ТекстОборот = Шаблон;
		
		ИндексОборота = Правило.Обороты.Индекс(Оборот);
		
		Параметр = СтрШаблон("ИндексОборота_%1_%2", КодПоказателя, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ИндексОборота", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, ИндексОборота);
		
		Параметр = СтрШаблон("Множитель_%1_%2", КодПоказателя, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&Множитель", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Значение.Множитель); 
		
		Параметр = СтрШаблон("ТипИтогов_%1_%2", КодПоказателя, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ТипИтогов", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Значение.ТипИтогов); 
		
		Параметр = СтрШаблон("ЗаголовокОборот_%1_%2", КодПоказателя, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ЗаголовокОборот", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Представление);
		
		Параметр = СтрШаблон("Счет_%1_%2", КодПоказателя, ИндексОборота);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&Счет", "&" + Параметр);
		Запрос.УстановитьПараметр(Параметр, Оборот.Значение.Счет);
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.Субконто1) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборСубконто1", "ИСТИНА // Субконто1");
		Иначе
			Параметр = СтрШаблон("Субконто1_%1_%2", КодПоказателя, ИндексОборота);
			ОтборСубконто1 = СтрШаблон("ХозрасчетныйОбороты.Субконто1 В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборСубконто1", ОтборСубконто1);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.Субконто1);
		КонецЕсли;
		
		//begin fix Клещ А.Н. 24.10.2019  
		Если Не ЗначениеЗаполнено(Оборот.Значение.ОтборСубконто2ВидРасходов) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборСубконто2ВидРасходов", "ИСТИНА // ОтборСубконто2ВидРасходов");
		Иначе
			Параметр = СтрШаблон("ОтборСубконто2ВидРасходов_%1_%2", КодПоказателя, ИндексОборота);
			ОтборСубконто2ВидРасходов = СтрШаблон("ХозрасчетныйОбороты.Субконто2.ВидРасходов В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборСубконто2ВидРасходов", ОтборСубконто2ВидРасходов);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.ОтборСубконто2ВидРасходов);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.ИсключаемыеОтборСубконто2ВидРасходов) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ИсключаемыеОтборСубконто2ВидРасходов", "ИСТИНА // ИсключаемыеОтборСубконто2ВидРасходов");
		Иначе
			Параметр = СтрШаблон("ИсключаемыеОтборСубконто2ВидРасходов_%1_%2", КодПоказателя, ИндексОборота);
			ИсключаемыеОтборСубконто2ВидРасходов = СтрШаблон("не ХозрасчетныйОбороты.Субконто2.ВидРасходов В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ИсключаемыеОтборСубконто2ВидРасходов", ИсключаемыеОтборСубконто2ВидРасходов);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.ИсключаемыеОтборСубконто2ВидРасходов);
		КонецЕсли;
		//end fix Клещ А.Н. 24.10.2019
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.КорСчет) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборКорСчет", "ИСТИНА // КорСчет");
		Иначе
			Параметр = СтрШаблон("КорСчет_%1_%2", КодПоказателя, ИндексОборота);
			ОтборКорСчет = СтрШаблон("ХозрасчетныйОбороты.КорСчет В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборКорСчет", ОтборКорСчет);
			Запрос.УстановитьПараметр(Параметр, БухгалтерскийУчет.СформироватьМассивСубсчетов(Оборот.Значение.КорСчет));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.КорСубконто1) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборКорСубконто1", "ИСТИНА // КорСубконто1");
		Иначе
			Параметр = СтрШаблон("КорСубконто1_%1_%2", КодПоказателя, ИндексОборота);
			ОтборКорСубконто1 = СтрШаблон("ХозрасчетныйОбороты.КорСубконто1 В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборКорСубконто1", ОтборКорСубконто1);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.КорСубконто1);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.ИсключаемыйКорСчет) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборИсключаемыйКорСчет", "ИСТИНА // КорСчет");
		Иначе
			Параметр = СтрШаблон("ИсключаемыйКорСчет_%1_%2", КодПоказателя, ИндексОборота);
			ОтборКорСчет = СтрШаблон("НЕ ХозрасчетныйОбороты.КорСчет В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборИсключаемыйКорСчет", ОтборКорСчет);
			Запрос.УстановитьПараметр(Параметр, БухгалтерскийУчет.СформироватьМассивСубсчетов(Оборот.Значение.ИсключаемыйКорСчет));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Оборот.Значение.ТипыПлатежейФЗ275) Тогда
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборТипыПлатежейФЗ275", "ИСТИНА // ТипыПлатежейФЗ275");
		Иначе
			Параметр = СтрШаблон("ТипыПлатежейФЗ275_%1_%2", КодПоказателя, ИндексОборота);
			ОтборТипыПлатежейФЗ275 = СтрШаблон("ХозрасчетныйОбороты.ТипПлатежаФЗ275 В (&%1)", Параметр);
			ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборТипыПлатежейФЗ275", ОтборТипыПлатежейФЗ275);
			Запрос.УстановитьПараметр(Параметр, Оборот.Значение.ТипыПлатежейФЗ275);
		КонецЕсли;
		
		ОтборНаправлениеДеятельности = ОтборНаправлениеДеятельности(ПараметрыОтчета, Оборот.Значение.НаправлениеДеятельности);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборНаправлениеДеятельности", ОтборНаправлениеДеятельности);
		
		ОтборКорНаправлениеДеятельности = ОтборКорНаправлениеДеятельности(ПараметрыОтчета, Оборот.Значение.КорНаправлениеДеятельности);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборКорНаправлениеДеятельности", ОтборКорНаправлениеДеятельности);
		
		ОтборИзменяетсяПодразделение = ОтборИзменяетсяПодразделение(Оборот.Значение.ИзменяетсяПодразделение);
		ТекстОборот = СтрЗаменить(ТекстОборот, "&ОтборИзменяетсяПодразделение", ОтборИзменяетсяПодразделение);
		
		Фрагменты.Добавить(ТекстОборот);
		
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(Фрагменты, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;
	
КонецФункции

&Вместо("ОтборКорНаправлениеДеятельности")
Функция ВИЛС_ОтборКорНаправлениеДеятельности(ПараметрыОтчета, КорНаправлениеДеятельности)
	
	Отбор = "ИСТИНА // КорНаправлениеДеятельности";
	
	Если ПараметрыОтчета.ВариантФормирования = 3 Тогда
		
		Если КорНаправлениеДеятельности = "Контракт" Тогда
			Отбор = "ХозрасчетныйОбороты.КорНаправлениеДеятельности = ХозрасчетныйОбороты.НаправлениеДеятельности";
		ИначеЕсли КорНаправлениеДеятельности = "КонтрактыГОЗ" Тогда
			Отбор = "(ХозрасчетныйОбороты.ТипКорНаправлениеДеятельности = ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.КонтрактГОЗ)
			         |         И ХозрасчетныйОбороты.КорНаправлениеДеятельности <> ХозрасчетныйОбороты.НаправлениеДеятельности)";
		ИначеЕсли КорНаправлениеДеятельности = "ИнаяДеятельность" Тогда
			Отбор = "ХозрасчетныйОбороты.ТипКорНаправлениеДеятельности В (ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.ИнаяДеятельность),
			         |                                                     ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.ПустаяСсылка))";
		КонецЕсли;
	Иначе
		Если КорНаправлениеДеятельности = "Контракт" Тогда
			Отбор = "ХозрасчетныйОбороты.КорНаправлениеДеятельности В (&ОтборНаправленияДеятельности)";
		ИначеЕсли КорНаправлениеДеятельности = "КонтрактыГОЗ" Тогда
			Отбор = "ХозрасчетныйОбороты.КорНаправлениеДеятельности В (&ОтборНаправленияДеятельностиДругиеКонтрактыГОЗ)";
		ИначеЕсли КорНаправлениеДеятельности = "ИнаяДеятельность" Тогда
			Отбор = "ХозрасчетныйОбороты.ТипКорНаправлениеДеятельности В (ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.ИнаяДеятельность),
			
			         |                                                     ЗНАЧЕНИЕ(Перечисление.ТипыНаправленийДеятельности.ПустаяСсылка))";
		//begin fix Клещ А.Н. 29.10.2019  
		ИначеЕсли КорНаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка() Тогда
			Отбор = "ХозрасчетныйОбороты.КорНаправлениеДеятельности = Значение(Справочник.НаправленияДеятельности.ПустаяСсылка)";
	    //end fix Клещ А.Н. 29.10.2019
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции


&Вместо("ПолучениеДанных")
Функция ВИЛС_ПолучениеДанных(ПараметрыОтчета, ПравилаРасчетаПоказателей, ЦелевыеПараметры = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	//begin fix Клещ А.Н. 25.10.2019  
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	//end fix Клещ А.Н. 25.10.2019
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто1,
	|	ХозрасчетныйОбороты.НаправлениеДеятельностиКор КАК КорНаправлениеДеятельности,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК ОборотДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК ОборотКт,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Период <= &ПлановаяДатаЗавершения
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотДт_НаДатуЗавершения,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Период <= &ПлановаяДатаЗавершения
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОборотКт_НаДатуЗавершения,
	|	ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОбороты.ПодразделениеКор КАК КорПодразделение
	|ПОМЕСТИТЬ ХозрасчетныйОборотыПредварительная
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			&Период,
	|			Регистратор,
	|			,
	|			,
	|			Организация В (&Организация)
	|				И (НаправлениеДеятельности В (&ОтборНаправленияДеятельности)
	|					ИЛИ НаправлениеДеятельностиКор В (&ОтборНаправленияДеятельности)),
	|			НЕ КорСчет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж), 
	|						  ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов)),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1,
	//begin fix Клещ А.Н. 25.10.2019  
	|	ХозрасчетныйОбороты.Субконто2,
	//end fix Клещ А.Н. 25.10.2019
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.НаправлениеДеятельности,
	|	ХозрасчетныйОбороты.НаправлениеДеятельностиКор,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ХозрасчетныйОбороты.ПодразделениеКор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС))
	|			ИЛИ ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты))
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.КорНаправлениеДеятельности, &ПустоеНД)
	|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности, &ПустоеНД)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС))
	|			ИЛИ ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты))
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.КорНаправлениеДеятельности.ТипНаправленияДеятельности, &ПустойТипНаправления)
	|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности.ТипНаправленияДеятельности, &ПустойТипНаправления)
	|	КОНЕЦ КАК ТипНаправлениеДеятельности,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	//begin fix Клещ А.Н. 25.10.2019  
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	//end fix Клещ А.Н. 25.10.2019
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС))
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности, &ПустоеНД)
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаДенежныхСредств)
	|				И ЕСТЬNULL(СписаниеДС.ТипПлатежаФЗ275, НЕОПРЕДЕЛЕНО) В (&ТипыПлатежейВРамкахКонтракта)
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности, &ПустоеНД)
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаДенежныхСредств)
	|				И ЕСТЬNULL(ПоступлениеДС.ХозяйственнаяОперация, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета)
	|			ТОГДА ПоступлениеДС.БанковскийСчетОтправитель.НаправлениеДеятельности
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаДенежныхСредств)
	|				И ЕСТЬNULL(СписаниеДС.ТипПлатежаФЗ275, НЕОПРЕДЕЛЕНО) В (&ТипыПлатежейВыводИзКонтракта)
	|			ТОГДА &ПустоеНД
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаЗадолженностьПередПоставщиками)
	|				И (ХозрасчетныйОбороты.КорСчет В (&СчетаУчетаПрочиеДоходы)
	|					ИЛИ ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам))
	|			ТОГДА &ПустоеНД
	|		КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты))
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности, &ПустоеНД)
	|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.КорНаправлениеДеятельности, &ПустоеНД)
	|	КОНЕЦ КАК КорНаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС))
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности.ТипНаправленияДеятельности, &ПустойТипНаправления)
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаДенежныхСредств)
	|				И ЕСТЬNULL(СписаниеДС.ТипПлатежаФЗ275, НЕОПРЕДЕЛЕНО) В (&ТипыПлатежейВРамкахКонтракта)
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности.ТипНаправленияДеятельности, &ПустойТипНаправления)
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаДенежныхСредств)
	|				И ЕСТЬNULL(ПоступлениеДС.ХозяйственнаяОперация, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета)
	|			ТОГДА ПоступлениеДС.БанковскийСчетОтправитель.НаправлениеДеятельности.ТипНаправленияДеятельности
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаДенежныхСредств)
	|				И ЕСТЬNULL(СписаниеДС.ТипПлатежаФЗ275, НЕОПРЕДЕЛЕНО) В (&ТипыПлатежейВыводИзКонтракта)
	|			ТОГДА &ПустойТипНаправления
	|		КОГДА ХозрасчетныйОбороты.Счет В (&СчетаУчетаЗадолженностьПередПоставщиками)
	|				И (ХозрасчетныйОбороты.КорСчет В (&СчетаУчетаПрочиеДоходы)
	|					ИЛИ ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам))
	|			ТОГДА &ПустойТипНаправления
	|		КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты))
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОбороты.НаправлениеДеятельности.ТипНаправленияДеятельности, &ПустойТипНаправления)
	|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.КорНаправлениеДеятельности.ТипНаправленияДеятельности, &ПустойТипНаправления)
	|	КОНЕЦ КАК ТипКорНаправлениеДеятельности,
	|	ХозрасчетныйОбороты.ОборотДт КАК ОборотДт,
	|	ХозрасчетныйОбороты.ОборотКт КАК ОборотКт,
	|	ХозрасчетныйОбороты.ОборотДт_НаДатуЗавершения КАК ОборотДт_НаДатуЗавершения,
	|	ХозрасчетныйОбороты.ОборотКт_НаДатуЗавершения КАК ОборотКт_НаДатуЗавершения,
	|	ЕСТЬNULL(СписаниеДС.ТипПлатежаФЗ275, НЕОПРЕДЕЛЕНО) КАК ТипПлатежаФЗ275,
	|	ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОбороты.КорПодразделение КАК КорПодразделение
	|
	|ПОМЕСТИТЬ ХозрасчетныйОбороты
	|ИЗ
	|	ХозрасчетныйОборотыПредварительная КАК ХозрасчетныйОбороты
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеДС
	|	ПО
	|		ХозрасчетныйОбороты.Регистратор = СписаниеДС.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеДС
	|	ПО
	|		ХозрасчетныйОбороты.Регистратор = ПоступлениеДС.Ссылка
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	КорСчет,
	|	КорНаправлениеДеятельности
	|";
	
	ТипыПлатежейВРамкахКонтракта = Новый Массив;
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.СписаниеНаОтдельныйСчет);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.СписаниеСуммКредитовПеречисленныхУполномоченнымБанком);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.СписаниеСвязанноеСРазмещениемНаДепозитеУполномоченногоБанка);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.РасчетыСИностраннымиИсполнителями);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.СписаниеНаВозмещениеЗатратЗаСчетСобственныхСредств);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ПеречислениеДенежныхСредствПослеЗавершенияГосконтракта);
	ТипыПлатежейВРамкахКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ПеречислениеМеждуОтдельнымиСчетамиКонтракта);
	
	ТипыПлатежейВыводИзКонтракта = Новый Массив;
	ТипыПлатежейВыводИзКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ВозвратНаРасчетныйСчетРанееПолученныхСумм);
	ТипыПлатежейВыводИзКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ВыплатыПоТрудовомуКодексуРФ);
	ТипыПлатежейВыводИзКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.СписаниеПоИсполнительнымДокументам);
	ТипыПлатежейВыводИзКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ОплатаТруда);
	ТипыПлатежейВыводИзКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.ОплатаТоваровРаботУслугПоРегулируемымЦенам);
	ТипыПлатежейВыводИзКонтракта.Добавить(Справочники.ТипыПлатежейФЗ275.УплатаНалоговИСборовТаможенныхПлатежейСтраховыхВзносов);
	
	Запрос.УстановитьПараметр("ТипыПлатежейВРамкахКонтракта", ТипыПлатежейВРамкахКонтракта);
	Запрос.УстановитьПараметр("ТипыПлатежейВыводИзКонтракта", ТипыПлатежейВыводИзКонтракта);
	
	СчетаУчетаДенежныхСредств = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаДенежныхСредств,  СчетаУчетаДенеженыеСредстваНаСчетах());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаДенежныхСредств,  СчетаУчетаДенежныхСредстваВПути());
	Запрос.УстановитьПараметр("СчетаУчетаДенежныхСредств",                СчетаУчетаДенежныхСредств);
	Запрос.УстановитьПараметр("СчетаУчетаЗадолженностьПередПоставщиками", СчетаУчетаЗадолженностьПередПоставщиками());
	Запрос.УстановитьПараметр("СчетаУчетаПрочиеДоходы",                   СчетаУчетаПрочиеДоходы());
	
	Запрос.УстановитьПараметр("ПустоеНД",                       Справочники.НаправленияДеятельности.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойТипНаправления",           Перечисления.ТипыНаправленийДеятельности.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация",                    ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Период",                         ПараметрыОтчета.Период);
	Запрос.УстановитьПараметр("ВариантФормирования",            ПараметрыОтчета.ВариантФормирования);
	Запрос.УстановитьПараметр("ОтборНаправленияДеятельности",   ПараметрыОтчета.ОтборНаправленияДеятельности);
	Запрос.УстановитьПараметр("ОтборНаправленияДеятельностиДругиеКонтрактыГОЗ", ПараметрыОтчета.ОтборНаправленияДеятельностиДругиеКонтрактыГОЗ);
	Если ПараметрыОтчета.ЕстьДанныеНаПлановуюДатуЗавершения Тогда
		Запрос.УстановитьПараметр("ПлановаяДатаЗавершения",             ЦелевыеПараметры.ПлановаяДатаЗавершения);
	Иначе
		Запрос.УстановитьПараметр("ПлановаяДатаЗавершения",             Дата(1,1,1,0,0,0));
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = "";
	Показатели = ПравилаРасчетаПоказателей.ВыгрузитьКолонку("КодПоказателя");
	Показатели = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Показатели);
	ДанныеПоказателей = Неопределено;
	Для каждого Показатель Из Показатели Цикл
		МассивОбъединений = Новый Массив;
		ПравилаПоРазделу = ПравилаРасчетаПоказателей.НайтиСтроки(Новый Структура("КодПоказателя", Показатель));
		Для каждого Правило Из ПравилаПоРазделу Цикл
			ТекстЗапросаПоПравилу = ТекстЗапросаПоПравилу(Правило, ПараметрыОтчета, Запрос);
			Если ТекстЗапросаПоПравилу <> "" Тогда
				МассивОбъединений.Добавить(ТекстЗапросаПоПравилу);
			КонецЕсли;
		КонецЦикла;
		Если МассивОбъединений.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Запрос.Текст = СтрСоединить(МассивОбъединений, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		Если ДанныеПоказателей = Неопределено Тогда
			ДанныеПоказателей = Запрос.Выполнить().Выгрузить();
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ДанныеПоказателей); 
		КонецЕсли;
	КонецЦикла;
	
	КолонкиСуммирования = 
		"СальдоНаТекущуюДату, СальдоНаПлановуюДатуЗавершения,
		|ОборотДт_НД, ОборотДт_ГОЗ, ОборотДт_Ввод, 
		|ОборотКт_НД, ОборотКт_ГОЗ, ОборотКт_Вывод, 
		|ОборотДт_НаДатуЗавершения_НД, ОборотДт_НаДатуЗавершения_ГОЗ, ОборотДт_НаДатуЗавершения_Ввод, 
		|ОборотКт_НаДатуЗавершения_НД, ОборотКт_НаДатуЗавершения_ГОЗ, ОборотКт_НаДатуЗавершения_Вывод";
	
	Если ПараметрыОтчета.Детализация = "ДоРегистратора" Тогда
		ДанныеПоказателей.Свернуть("НаправлениеДеятельности, ГруппаПоказателей1, ГруппаПоказателей2, КодПоказателя, Пассивный, Период, Регистратор, Множитель", КолонкиСуммирования);
	ИначеЕсли ПараметрыОтчета.Детализация = "ДоОборотов" Тогда
		ДанныеПоказателей.Свернуть("НаправлениеДеятельности, ГруппаПоказателей1, ГруппаПоказателей2, КодПоказателя, Пассивный, Оборот, ИндексОборота", КолонкиСуммирования);
	Иначе
		ДанныеПоказателей.Свернуть("НаправлениеДеятельности, ГруппаПоказателей1, ГруппаПоказателей2, КодПоказателя, Пассивный", КолонкиСуммирования);
	КонецЕсли;
	
	ДанныеПоказателей.Индексы.Добавить("ГруппаПоказателей1");
	ДанныеПоказателей.Индексы.Добавить("ГруппаПоказателей2");
	ДанныеПоказателей.Индексы.Добавить("КодПоказателя");
	
	Возврат ДанныеПоказателей;
	
КонецФункции

Функция ПолучитьСчетРасходовНаПродажу()
	
	Результат = Новый Массив ;
	Результат.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСчетКоммерческиеРасходы()
	
	Результат = Новый Массив ;
	Результат.Добавить(ПланыСчетов.Хозрасчетный.КоммерческиеРасходы);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСчетСебестоимостьПродажНеЕНВД()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_РасходыНаПродажу))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы))
	|";
	ТЗ = Запрос.Выполнить().Выгрузить();
	Результат = ТЗ.ВыгрузитьКолонку("Ссылка") ;
	Возврат Результат;
	
КонецФункции

Функция СчетаПроизводства()
	
Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	Возврат Результат;
	
КонецФункции
#КонецЕсли