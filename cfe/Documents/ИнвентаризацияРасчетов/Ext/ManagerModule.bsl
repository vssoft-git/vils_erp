#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

&Вместо("ЗаполнитьЗадолженностьПоОстаткам")
Процедура ВИЛС_ЗаполнитьЗадолженностьПоОстаткам(ПараметрыЗаполнения, АдресХранилища)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(ПараметрыЗаполнения.Дата), ВидГраницы.Включая));
	// begin fix Suetin 17.01.2019 16:46:39
	Запрос.УстановитьПараметр("Дата1Месяц",Новый Граница(КонецДня(ДобавитьМесяц(ПараметрыЗаполнения.Дата, -1)), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Дата2Месяц",Новый Граница(КонецДня(ДобавитьМесяц(ПараметрыЗаполнения.Дата, -2)), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОпределенияСрокаИстеченияСрокаДавности", Новый Граница(?(ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -36) < Дата(2005,12,31,23,59,59), Дата(2005,12,31,23,59,59), ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -36)), ВидГраницы.Включая) );
	Запрос.УстановитьПараметр("ДатаОпределенияСрокаИстеченияСрокаДавности1Месяц",Новый Граница(?(ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -37) < Дата(2005,12,31,23,59,59), Дата(2005,12,31,23,59,59), ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -37)), ВидГраницы.Включая) );
	Запрос.УстановитьПараметр("ДатаОпределенияСрокаИстеченияСрокаДавности2Месяц",Новый Граница(?(ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -38) < Дата(2005,12,31,23,59,59), Дата(2005,12,31,23,59,59), ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -38)), ВидГраницы.Включая) );
	// end fix Suetin 17.01.2019 16:46:18
	Запрос.УстановитьПараметр("Организация", ПараметрыЗаполнения.Организация);
	Запрос.УстановитьПараметр("МассивСчетов", ПараметрыЗаполнения.СчетаРасчетов);
	Запрос.УстановитьПараметр("ТаблицаЗадолженности", ПараметрыЗаполнения.ТаблицаЗадолженности);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияРасчетовЗадолженность.СчетРасчетов,
	|	ИнвентаризацияРасчетовЗадолженность.ДебиторКредитор,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_Договор,   				// fix Suetin 17.01.2019 13:02:14
	|	ИнвентаризацияРасчетовЗадолженность.Подтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.НеПодтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.ИстекСрокДавности,
	|	ИнвентаризацияРасчетовЗадолженность.ВидЗадолженности,
	|	ИнвентаризацияРасчетовЗадолженность.ВсегоДебиторская,
	|	ИнвентаризацияРасчетовЗадолженность.ВсегоКредиторская,        		// begin fix Suetin 06.02.2019 15:50:43
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_Подтверждено1Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_НеПодтверждено1Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_ИстекСрокДавности1Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_Подтверждено2Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_НеПодтверждено2Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_ИстекСрокДавности2Месяц   	// end fix Suetin 06.02.2019 15:50:48
	|ПОМЕСТИТЬ ЗадолженностьСтарая
	|ИЗ
	|	&ТаблицаЗадолженности КАК ИнвентаризацияРасчетовЗадолженность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоДебиторская,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНовая
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет В (&МассивСчетов), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ, 					// end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	// begin fix Suetin 17.01.2019 12:58:11	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено	//ИстекСрокДавности	//,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоДебиторская,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНоваяИстечениеСрокаДавности
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОпределенияСрокаИстеченияСрокаДавности, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)                   // end fix Suetin 17.01.2019 12:58:11
	|	) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,                  // end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоДебиторская,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНовая1Месяц
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата1Месяц, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ, 					// end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено	//ИстекСрокДавности	//,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоДебиторская,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНоваяИстечениеСрокаДавности1Месяц
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОпределенияСрокаИстеченияСрокаДавности1Месяц, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)                   // end fix Suetin 17.01.2019 12:58:11
	|	) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,                  // end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоДебиторская,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНовая2Месяц
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата2Месяц, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ, 					// end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено	//ИстекСрокДавности	//,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоДебиторская,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНоваяИстечениеСрокаДавности2Месяц
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОпределенияСрокаИстеченияСрокаДавности2Месяц, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,                  // end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// end fix Suetin 17.01.2019 12:58:17
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадолженностьНовая.ДебиторКредитор КАК ДебиторКредитор,
	|	ЗадолженностьНовая.ВИЛС_Договор КАК ВИЛС_Договор,        // fix Suetin 17.01.2019 14:35:22
	|	ЗадолженностьНовая.СчетРасчетов КАК СчетРасчетов,
	|	ЗадолженностьНовая.ВидЗадолженности,
	|	ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) КАК Подтверждено,
	|	ЕСТЬNULL(ЗадолженностьСтарая.НеПодтверждено, 0) КАК НеПодтверждено,        
	// begin fix Suetin 06.02.2019 15:44:57
	//|	ЕСТЬNULL(ЗадолженностьСтарая.ИстекСрокДавности, 0) КАК ИстекСрокДавности,  
	|   ВЫБОР КОГДА ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) < ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности.Подтверждено, 0) ТОГДА ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) ИНАЧЕ ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности.Подтверждено, 0) КОНЕЦ КАК ИстекСрокДавности,
	
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено1Месяц, ЗадолженностьНовая1Месяц.Подтверждено) КАК ВИЛС_Подтверждено1Месяц,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_НеПодтверждено1Месяц, 0) КАК ВИЛС_НеПодтверждено1Месяц,
	|   ВЫБОР КОГДА ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено1Месяц, ЗадолженностьНовая1Месяц.Подтверждено) < ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.Подтверждено, 0) ТОГДА ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено1Месяц, ЗадолженностьНовая1Месяц.Подтверждено) ИНАЧЕ ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.Подтверждено, 0) КОНЕЦ КАК ВИЛС_ИстекСрокДавности1Месяц,
	
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено2Месяц, ЗадолженностьНовая2Месяц.Подтверждено) КАК ВИЛС_Подтверждено2Месяц,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_НеПодтверждено2Месяц, 0) КАК ВИЛС_НеПодтверждено2Месяц,
	|   ВЫБОР КОГДА ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено2Месяц, ЗадолженностьНовая2Месяц.Подтверждено) < ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.Подтверждено, 0) ТОГДА ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено2Месяц, ЗадолженностьНовая2Месяц.Подтверждено) ИНАЧЕ ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.Подтверждено, 0) КОНЕЦ КАК ВИЛС_ИстекСрокДавности2Месяц,
	// end fix Suetin 06.02.2019 15:57:38
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВсегоДебиторская, ЗадолженностьНовая.ВсегоДебиторская) КАК ВсегоДебиторская,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВсегоКредиторская, ЗадолженностьНовая.ВсегоКредиторская) КАК ВсегоКредиторская,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВсегоДебиторская, ЗадолженностьНовая.ВсегоДебиторская) + ЕСТЬNULL(ЗадолженностьСтарая.ВсегоКредиторская, ЗадолженностьНовая.ВсегоКредиторская) = ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) КАК ЕстьПодтвержденнаяСумма,
	|	ЕСТЬNULL(ЗадолженностьСтарая.НеПодтверждено, 0) > 0 КАК ЕстьНеПодтвержденнаяСумма,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ИстекСрокДавности, 0) > 0 КАК ЕстьИстекСрокДавности,
	|	ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) > 0
	|		И ЕСТЬNULL(ЗадолженностьСтарая.НеПодтверждено, 0) > 0 КАК ЕстьЧастичноПодтвержденнаяСумма
	|ИЗ
	|	ЗадолженностьНовая КАК ЗадолженностьНовая
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьСтарая КАК ЗадолженностьСтарая
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьСтарая.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьСтарая.ДебиторКредитор        
	|			И ЗадолженностьНовая.ВИЛС_Договор = ЗадолженностьСтарая.ВИЛС_Договор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьСтарая.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНоваяИстечениеСрокаДавности КАК ЗадолженностьНоваяИстечениеСрокаДавности
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНоваяИстечениеСрокаДавности.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНоваяИстечениеСрокаДавности.ДебиторКредитор      
	|			И ЗадолженностьНовая.ВИЛС_Договор = ЗадолженностьНоваяИстечениеСрокаДавности.ВИЛС_Договор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНоваяИстечениеСрокаДавности.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНовая1Месяц КАК ЗадолженностьНовая1Месяц
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНовая1Месяц.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНовая1Месяц.ДебиторКредитор   
	|			И ЗадолженностьНовая.ВИЛС_Договор = ЗадолженностьНовая1Месяц.ВИЛС_Договор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНовая1Месяц.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНоваяИстечениеСрокаДавности1Месяц КАК ЗадолженностьНоваяИстечениеСрокаДавности1Месяц
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.ДебиторКредитор      
	|			И ЗадолженностьНовая.ВИЛС_Договор = ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.ВИЛС_Договор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНовая2Месяц КАК ЗадолженностьНовая2Месяц
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНовая2Месяц.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНовая2Месяц.ДебиторКредитор    
	|			И ЗадолженностьНовая.ВИЛС_Договор = ЗадолженностьНовая2Месяц.ВИЛС_Договор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНовая2Месяц.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНоваяИстечениеСрокаДавности2Месяц КАК ЗадолженностьНоваяИстечениеСрокаДавности2Месяц
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.ДебиторКредитор  
	|			И ЗадолженностьНовая.ВИЛС_Договор = ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.ВИЛС_Договор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.ВидЗадолженности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадолженностьНовая.СчетРасчетов.Порядок,
	|	ДебиторКредитор, ВИЛС_Договор      // fix Suetin 06.02.2019 14:13:32
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

&После("ДобавитьКомандыПечати")
Процедура ВИЛС_ДобавитьКомандыПечати(КомандыПечати)
	// РеестрДебиторскойЗадолженностиПриложение_7_1_180510
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрДебиторскойЗадолженностиПриложение_7_1";
	КомандаПечати.Представление = НСтр("ru = 'Реестр дебиторской задолженности. Приложение 7.1.'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	// РеестрКредиторскойЗадолженностиПриложение_7_1_180517
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрКредиторскойЗадолженностиПриложение_7_1";
	КомандаПечати.Представление = НСтр("ru = 'Реестр кредиторской задолженности. Приложение 7.1.'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	// РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180523
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2";
	КомандаПечати.Представление = НСтр("ru = 'Реестр просроченной дебиторской задолженности. Приложение 7.2.'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	// РеестрПросроченнойКредиторскойЗадолженностиПриложение_7_2_180517
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрПросроченнойКредиторскойЗадолженностиПриложение_7_2_180517";
	КомандаПечати.Представление = НСтр("ru = 'Реестр просроченной кредиторской задолженности. Приложение 7.2.'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	//// РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180523
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180523";
	//КомандаПечати.Представление = НСтр("ru = 'Реестр просроченной дебиторской задолженности. Приложение 7.2. ТЕСТ'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	//
	//// РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180702
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180702";
	//КомандаПечати.Представление = НСтр("ru = 'Реестр просроченной дебиторской задолженности. Приложение 7.2. ТЕСТ по заказам'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
КонецПроцедуры

&После("Печать")
Процедура ВИЛС_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрДебиторскойЗадолженностиПриложение_7_1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеестрДебиторскойЗадолженностиПриложение_7_1", НСтр("ru = 'Реестр дебиторской задолженности. Приложение 7.1.'"), 
			ПечатьРеестрДебиторскойЗадолженностиПриложение_7_1_180510(МассивОбъектов, ОбъектыПечати), , "Документ.ИнвентаризацияРасчетовСКонтрагентами.ПФ_MXL_РеестрДебиторскойЗадолженностиПриложение_7_1");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрКредиторскойЗадолженностиПриложение_7_1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеестрКредиторскойЗадолженностиПриложение_7_1", НСтр("ru = 'Реестр кредиторской задолженности. Приложение 7.1.'"), 
			ПечатьРеестрКредиторскойЗадолженностиПриложение_7_1_180510(МассивОбъектов, ОбъектыПечати), , "Документ.ИнвентаризацияРасчетовСКонтрагентами.ПФ_MXL_РеестрКредиторскойЗадолженностиПриложение_7_1");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2", НСтр("ru = 'Реестр просроченной дебиторской задолженности. Приложение 7.2.'"), 
			ПечатьРеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180523(МассивОбъектов, ОбъектыПечати), , "Документ.ИнвентаризацияРасчетовСКонтрагентами.ПФ_MXL_РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2");
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой Реестр дебиторской задолженности. 
//	Приложение 7.1. (табличный документ 1С:Предприятия)
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма приказа.
//
Функция ПечатьРеестрДебиторскойЗадолженностиПриложение_7_1_180510(Знач МассивОбъектов, Знач ОбъектыПечати)
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетовСконтрагентами_Дбт";
	Макет = ПолучитьМакет("ПФ_MXL_РеестрДебиторскойЗадолженностиПриложение_7_1");
	Возврат(ПечатьРеестрЗадолженностиПриложение_7_1(МассивОбъектов, ОбъектыПечати, ТабДокумент, "Дт", Макет));
КонецФункции

Функция ПечатьРеестрКредиторскойЗадолженностиПриложение_7_1_180510(Знач МассивОбъектов, Знач ОбъектыПечати)
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетовСконтрагентами_Крт";
	Макет = ПолучитьМакет("ПФ_MXL_РеестрКредиторскойЗадолженностиПриложение_7_1");
	Возврат(ПечатьРеестрЗадолженностиПриложение_7_1(МассивОбъектов, ОбъектыПечати, ТабДокумент, "Кт", Макет));
КонецФункции

Функция ПечатьРеестрЗадолженностиПриложение_7_1(Знач МассивОбъектов, Знач ОбъектыПечати, ТабДокумент, Знач ДтКт = "Дт", Знач Макет)
	ПервыйДокумент = Истина;
	
	Для каждого СсылкаОбъекта Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", СсылкаОбъекта);
		Запрос.Текст = ПолучитьТекстЗапроса(ДтКт);
		ДатаДокументаИнветаризации = КонецДня(СсылкаОбъекта.Дата);
		Запрос.УстановитьПараметр("КонПериода", 		Новый Граница(ДатаДокументаИнветаризации, ВидГраницы.Включая));
		//Запрос.УстановитьПараметр("КонПериода1", 		Новый Граница(ДатаДокументаИнветаризации, ВидГраницы.Включая));
		
		ПакетЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		ВыборкаШапка = ПакетЗапросов[0].Выбрать();
		Если НЕ ВыборкаШапка.Следующий() Тогда
			Возврат ТабДокумент;
		КонецЕсли;
		//ДатаДокументаИнветаризации = КонецДня(ВыборкаШапка.Дата);
		
		ВыборкаДокументов = ПакетЗапросов[4].Выгрузить();
		
		Область = Макет.ПолучитьОбласть("Шапка");
				
		ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаШапка);
		
		Область.Параметры.Дата  = Формат(ДатаДокументаИнветаризации, "ДФ=dd.MM.yyyy");	
		
		ТабДокумент.Вывести(Область);
		ТабДокумент.ФиксацияСверху = 5;
		
		СтруктураПоказателей = Новый Структура;
		СтруктураПоказателей.Вставить("НПП"								, 1);
		СтруктураПоказателей.Вставить("СуммаДЗБезРезерваИтого"			, 0);
		СтруктураПоказателей.Вставить("СуммаРезерва"					, 0);
		СтруктураПоказателей.Вставить("СуммаРезерваИтого"				, 0);
		СтруктураПоказателей.Вставить("СуммаДЗСРезервомИтого"			, 0);
		СтруктураПоказателей.Вставить("Колонка12ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка12ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка13ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка14ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка15ЧИтого"					, 0);   
		СтруктураПоказателей.Вставить("Колонка16ЧИтого"					, 0);    
		СтруктураПоказателей.Вставить("Колонка17ЧИтого"					, 0);    
		СтруктураПоказателей.Вставить("СуммаРезерваНУЧ"					, 0); 
		СтруктураПоказателей.Вставить("СуммаРезерваНУЧИтого"			, 0);  
		СтруктураПоказателей.Вставить("СуммаДЗБезРезерваПоСчетуИтого"	, 0); 
		СтруктураПоказателей.Вставить("СуммаРезерваПоСчетуИтого"		, 0);   
		СтруктураПоказателей.Вставить("СуммаДЗСРезервомПоСчетуИтого"	, 0);  
		СтруктураПоказателей.Вставить("Колонка12ЧПоСчетуИтого"			, 0);   
		СтруктураПоказателей.Вставить("Колонка13ЧПоСчетуИтого"			, 0);  
		СтруктураПоказателей.Вставить("Колонка14ЧПоСчетуИтого"			, 0);   
		СтруктураПоказателей.Вставить("Колонка15ЧПоСчетуИтого"			, 0);  
		СтруктураПоказателей.Вставить("Колонка16ЧПоСчетуИтого"			, 0);  
		СтруктураПоказателей.Вставить("Колонка17ЧПоСчетуИтого"			, 0);   
		СтруктураПоказателей.Вставить("СуммаРезерваНУЧПоСчетуИтого"		, 0);
		
		Выборка_3 			 = ПакетЗапросов[3].Выбрать();
		
		ТаблицаСтрокПоСчету = Новый ТаблицаЗначений();
		Колонки = ТаблицаСтрокПоСчету.Колонки;
		Колонки.Добавить("СчетИерархия");
		Колонки.Добавить("СчетГруппировка");
		Колонки.Добавить("СчетРасчетов");
		Колонки.Добавить("СтрокаИерархия");
		Колонки.Добавить("СтрокаГруппировка");
		Колонки.Добавить("СтрокаРасчетов");
		Колонки.Добавить("СтрокаДетальная");
		
		КоличествоВСтеке=0;
		ТекущийСчет				 = Неопределено;
		//ТекущийСчетПервогоУровня = Неопределено;
		//ТекущийСчетВторогоУровня = Неопределено;
		
		ВыборкаЗадолженность = ПакетЗапросов[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "СчетРасчетов");
		ВыбратьЭлементыВИерархии(ВыборкаЗадолженность, ТаблицаСтрокПоСчету, ВыборкаДокументов, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке);
		
		Если ТаблицаСтрокПоСчету.Количество() > 1 Тогда
			ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету");
			ОбластьСтрока.Параметры.Итого			 	= "Итого по счету: " + ТаблицаСтрокПоСчету[0].СчетИерархия;
			ОбластьСтрока.Параметры.СуммаДЗБезРезерва 	= СтруктураПоказателей.СуммаДЗБезРезерваПоСчетуИтого;
			ОбластьСтрока.Параметры.СуммаРезерва		= СтруктураПоказателей.СуммаРезерваПоСчетуИтого;
			ОбластьСтрока.Параметры.СуммаДЗСРезервом	= СтруктураПоказателей.СуммаДЗСРезервомПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка12Ч			= СтруктураПоказателей.Колонка12ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка13Ч			= СтруктураПоказателей.Колонка13ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка14Ч			= СтруктураПоказателей.Колонка14ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка15Ч			= СтруктураПоказателей.Колонка15ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка16Ч			= СтруктураПоказателей.Колонка16ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка17Ч			= СтруктураПоказателей.Колонка17ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.СуммаРезерваНУ		= СтруктураПоказателей.СуммаРезерваНУЧПоСчетуИтого;
			ТабДокумент.Вывести(ОбластьСтрока);
			ТабДокумент.НачатьГруппуСтрок("ИтогоПоСчету" + ТаблицаСтрокПоСчету[0].СчетИерархия, Ложь);
		
			ГруппировкаВыводилась = Ложь;
			Для Инд = 0 По ТаблицаСтрокПоСчету.Количество() - 1 Цикл
				Для Инд1 = 0 По ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов.Количество() - 1 Цикл
					ТабДокумент.Вывести(ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов[Инд1]);
					ТабДокумент.НачатьГруппуСтрок("ИтогоПодоговору" + ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов[Инд1].Параметры.ДоговорКонтрагента, Ложь);
					Для Инд2 = 0 По ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1].Количество() - 1 Цикл
						Если ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1][Инд2] = Неопределено Тогда Продолжить; КонецЕсли;
						ТабДокумент.Вывести(ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1][Инд2]);
					КонецЦикла;	          
					ТабДокумент.ЗакончитьГруппуСтрок();
				КонецЦикла;	
			КонецЦикла;
			ТабДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;	
				
		ОблИтого = Макет.ПолучитьОбласть("Итого");
		ОблИтого.Параметры.Итого			 = "Итого:";
		ОблИтого.Параметры.СуммаДЗБезРезерва = формат(СтруктураПоказателей.СуммаДЗБезРезерваИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.СуммаРезерва 	 = формат(СтруктураПоказателей.СуммаРезерваИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.СуммаДЗСРезервом  = формат(СтруктураПоказателей.СуммаДЗСРезервомИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка12Ч 	 	 = формат(СтруктураПоказателей.Колонка12ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка13Ч 	 	 = формат(СтруктураПоказателей.Колонка13ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка14Ч 	 	 = формат(СтруктураПоказателей.Колонка14ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка15Ч 	 	 = формат(СтруктураПоказателей.Колонка15ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка16Ч 	 	 = формат(СтруктураПоказателей.Колонка16ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка17Ч 	 	 = формат(СтруктураПоказателей.Колонка17ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.СуммаРезерваНУ	 = формат(СтруктураПоказателей.СуммаРезерваНУЧИтого, "ЧЦ=15; ЧДЦ=2");
		ТабДокумент.Вывести(ОблИтого);
		//ОблПод = Макет.ПолучитьОбласть("Подвал");
		//Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ВыборкаШапка.Организация, ДатаДокументаИнветаризации,);
		//ОблПод.Параметры.Бухгалтер    = Руководители.ГлавныйБухгалтер;
		//ТабДокумент.Вывести(ОблПод);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаОбъекта);
	КонецЦикла;
	Возврат ТабДокумент;
КонецФункции // ПечатьРеестрЗадолженностиПриложение_7_1()

Процедура ВыбратьЭлементыВИерархии(ВыборкаСИерархией, ТаблицаСтрокПоСчету, ВыборкаДокументов, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке)
	Пока ВыборкаСИерархией.Следующий() Цикл
		Если ВыборкаСИерархией.ТипЗаписи()=ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			Если ТаблицаСтрокПоСчету.Количество() > 1 Тогда
				ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету");
				ОбластьСтрока.Параметры.Итого			 	= "Итого по счету: " + ТаблицаСтрокПоСчету[0].СчетИерархия;
				ОбластьСтрока.Параметры.СуммаДЗБезРезерва 	= СтруктураПоказателей.СуммаДЗБезРезерваПоСчетуИтого;
				ОбластьСтрока.Параметры.СуммаРезерва		= СтруктураПоказателей.СуммаРезерваПоСчетуИтого;
				ОбластьСтрока.Параметры.СуммаДЗСРезервом	= СтруктураПоказателей.СуммаДЗСРезервомПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка12Ч			= СтруктураПоказателей.Колонка12ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка13Ч			= СтруктураПоказателей.Колонка13ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка14Ч			= СтруктураПоказателей.Колонка14ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка15Ч			= СтруктураПоказателей.Колонка15ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка16Ч			= СтруктураПоказателей.Колонка16ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка17Ч			= СтруктураПоказателей.Колонка17ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.СуммаРезерваНУ		= СтруктураПоказателей.СуммаРезерваНУЧПоСчетуИтого;
				
				ТабДокумент.Вывести(ОбластьСтрока);
				ТабДокумент.НачатьГруппуСтрок("ИтогоПоСчету" + ТаблицаСтрокПоСчету[0].СчетИерархия, Ложь);
				
				ГруппировкаВыводилась = Ложь;
				Для Инд = 0 По ТаблицаСтрокПоСчету.Количество() - 1 Цикл
					Для Инд1 = 0 По ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов.Количество() - 1 Цикл
						ТабДокумент.Вывести(ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов[Инд1]);
						ТабДокумент.НачатьГруппуСтрок("ИтогоПодоговору" + ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов[Инд1].Параметры.ДоговорКонтрагента, Ложь);
						Для Инд2 = 0 По ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1].Количество() - 1 Цикл
							Если ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1][Инд2] = Неопределено Тогда Продолжить; КонецЕсли;
							ТабДокумент.Вывести(ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1][Инд2]);
						КонецЦикла;	          
						ТабДокумент.ЗакончитьГруппуСтрок();
					КонецЦикла;	
				КонецЦикла;
				ТабДокумент.ЗакончитьГруппуСтрок();
				
				СтруктураПоказателей.Вставить("СуммаРезерва"					, 0);
				СтруктураПоказателей.Вставить("СуммаРезерваНУЧ"					, 0); 
				СтруктураПоказателей.Вставить("СуммаДЗБезРезерваПоСчетуИтого"	, 0); 
				СтруктураПоказателей.Вставить("СуммаРезерваПоСчетуИтого"		, 0);   
				СтруктураПоказателей.Вставить("СуммаДЗСРезервомПоСчетуИтого"	, 0);  
				СтруктураПоказателей.Вставить("Колонка12ЧПоСчетуИтого"			, 0);   
				СтруктураПоказателей.Вставить("Колонка13ЧПоСчетуИтого"			, 0);  
				СтруктураПоказателей.Вставить("Колонка14ЧПоСчетуИтого"			, 0);   
				СтруктураПоказателей.Вставить("Колонка15ЧПоСчетуИтого"			, 0);  
				СтруктураПоказателей.Вставить("Колонка16ЧПоСчетуИтого"			, 0);  
				СтруктураПоказателей.Вставить("Колонка17ЧПоСчетуИтого"			, 0);   
				СтруктураПоказателей.Вставить("СуммаРезерваНУЧПоСчетуИтого"		, 0);
			КонецЕсли;
			Если ТаблицаСтрокПоСчету.Количество() и ВыборкаСИерархией.СчетРасчетов.Родитель = ТаблицаСтрокПоСчету[0].СчетИерархия Тогда
				СтрокаТЗ = ТаблицаСтрокПоСчету[ТаблицаСтрокПоСчету.Количество() - 1];
				СтрокаТЗ.СчетГруппировка = ВыборкаСИерархией.СчетРасчетов;
			Иначе	
				ТаблицаСтрокПоСчету.Очистить();
				СтрокаТЗ = ТаблицаСтрокПоСчету.Добавить();
				СтрокаТЗ.СчетИерархия = ВыборкаСИерархией.СчетРасчетов;
				СтрокаТЗ.СтрокаИерархия = ОбластьСтрока;
				СтрокаТЗ.СтрокаРасчетов = Новый Массив();
				СтрокаТЗ.СтрокаДетальная = Новый Массив(1, 1);
			КонецЕсли;	
			
			ВыбратьЭлементыВИерархии(ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией,"СчетРасчетов"), ТаблицаСтрокПоСчету, ВыборкаДокументов, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке);
		ИначеЕсли ВыборкаСИерархией.ТипЗаписи()=ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			//ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету");
			//ОбластьСтрока.Параметры.Итого			 	= "Итого по счету: " + ВыборкаСИерархией.СчетРасчетов;
			//ОбластьСтрока.Параметры.СуммаДЗБезРезерва 	= СтруктураПоказателей.СуммаДЗБезРезерваПоСчетуИтого;
			//ОбластьСтрока.Параметры.СуммаРезерва		= СтруктураПоказателей.СуммаРезерваПоСчетуИтого;
			//ОбластьСтрока.Параметры.СуммаДЗСРезервом	= СтруктураПоказателей.СуммаДЗСРезервомПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка12Ч			= СтруктураПоказателей.Колонка12ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка13Ч			= СтруктураПоказателей.Колонка13ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка14Ч			= СтруктураПоказателей.Колонка14ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка15Ч			= СтруктураПоказателей.Колонка15ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка16Ч			= СтруктураПоказателей.Колонка16ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка17Ч			= СтруктураПоказателей.Колонка17ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.СуммаРезерваНУ		= СтруктураПоказателей.СуммаРезерваНУЧПоСчетуИтого;
			
			СтрокаТЗ = ТаблицаСтрокПоСчету[ТаблицаСтрокПоСчету.Количество() - 1];
			СтрокаТЗ.СчетГруппировка = ВыборкаСИерархией.СчетРасчетов;
			//СтрокаТЗ.СтрокаГруппировка = ОбластьСтрока;
			
			ВыбратьЭлементыБезИерархии(ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), ТаблицаСтрокПоСчету, ВыборкаДокументов, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке);
		ИначеЕсли ВыборкаСИерархией.ТипЗаписи()=ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
      		ВыбратьЭлементы(ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.Прямой), ТаблицаСтрокПоСчету, ВыборкаДокументов, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, КоличествоВСтеке);	
    	КонецЕсли;   
  	КонецЦикла;
КонецПроцедуры

Процедура ВыбратьЭлементыБезИерархии(ВыборкаБезИерархии, ТаблицаСтрокПоСчету, ВыборкаДокументов, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке)
	Пока ВыборкаБезИерархии.Следующий() Цикл
		СписокСтрокПоТекущейЗадолженности1 = Новый Массив();
		МассивСчетов = Новый Массив();
		МассивСчетов.Добавить(ВыборкаБезИерархии.СчетРасчетов);
		Если ЗначениеЗаполнено(ВыборкаБезИерархии.ДоговорКонтрагента) и ТипЗнч(ВыборкаБезИерархии.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Если ВыборкаБезИерархии.ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
				и ВыборкаБезИерархии.СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
				МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
				СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаБезИерархии.Контрагент, ВыборкаБезИерархии.ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
				СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
			ИначеЕсли ВыборкаБезИерархии.ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
				и ВыборкаБезИерархии.СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками Тогда
				МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
				СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаБезИерархии.Контрагент, ВыборкаБезИерархии.ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
				СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
			КонецЕсли; 
		КонецЕсли;
		//СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаЗадолженность.Контрагент, ВыборкаЗадолженность.ДоговорКонтрагента, МассивСчетов);
		СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаБезИерархии.Контрагент, ВыборкаБезИерархии.ДоговорКонтрагента, ВыборкаБезИерархии.СчетРасчетов);
		СписокСтрокПоТекущейЗадолженности = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрокПоТекущейЗадолженности1.Количество() Тогда
			Для Каждого СтрокаТЗТЗ Из СписокСтрокПоТекущейЗадолженности1 Цикл
				Если СписокСтрокПоТекущейЗадолженности.Найти(СтрокаТЗТЗ) = Неопределено Тогда
					СписокСтрокПоТекущейЗадолженности.Добавить(СтрокаТЗТЗ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		
		Выборка_3.Сбросить();
		
		ДанныеОДок = ПолучитьДанныеСтроки_180511(СписокСтрокПоТекущейЗадолженности, Выборка_3, ВыборкаШапка.КонецПериода, ВыборкаБезИерархии.Контрагент, ВыборкаБезИерархии.СчетРасчетов, ВыборкаШапка.Организация, ВыборкаБезИерархии.ДоговорКонтрагента, ДтКт, (ВыборкаБезИерархии.Подтверждено + ВыборкаБезИерархии.НеПодтверждено));
			
		ТЗДляСтруктуры = ДанныеОДок.ТЗДляСтруктуры;
		КоличествоСтрокТЗДляСтруктуры = ТЗДляСтруктуры.Количество();
		Если КоличествоСтрокТЗДляСтруктуры = 0 Тогда Продолжить; КонецЕсли; 
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьСтрока.Параметры.Заполнить(ДанныеОДок);
		//ОбластьСтрока.Параметры.НомерСтроки = НПП;
		СтруктураПоказателей.НПП = СтруктураПоказателей.НПП + 1;
		
		СведенияОбКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаБезИерархии.Контрагент, ВыборкаШапка.КонецПериода);
		КонтраНаим = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование, ЮридическийАдрес, Телефоны");
		
		ОбластьСтрока.Параметры.НаименованиеСтр = КонтраНаим;
		ОбластьСтрока.Параметры.Счет = ВыборкаБезИерархии.СчетРасчетов;
		ОбластьСтрока.Параметры.НомерДоговора = ?(ЗначениеЗаполнено(ВыборкаБезИерархии.ДоговорКонтрагента),?(ЗначениеЗаполнено(ВыборкаБезИерархии.ДоговорКонтрагента.Номер), ВыборкаБезИерархии.ДоговорКонтрагента.Номер, ВыборкаБезИерархии.ДоговорКонтрагента.Наименование), "б.н.");
		ОбластьСтрока.Параметры.ДатаДоговора = ?(ЗначениеЗаполнено(ВыборкаБезИерархии.ДоговорКонтрагента),ВыборкаБезИерархии.ДоговорКонтрагента.Дата, Дата(1,1,1,0,0,0));
		ОбластьСтрока.Параметры.ИНН = ВыборкаБезИерархии.Контрагент.ИНН;
		
		ОбластьСтрока.Параметры.ДатаДолга = ТЗДляСтруктуры[КоличествоСтрокТЗДляСтруктуры - 1].ДатаДок;
		
		СуммаДЗБезРезерва 							= ВыборкаБезИерархии.Подтверждено + ВыборкаБезИерархии.НеПодтверждено;
		Если СуммаДЗБезРезерва = 0 Тогда Продолжить; КонецЕсли;
		СуммаРезерва 								= ДанныеОДок.СуммаРезерва;
		СуммаДЗСРезервом                            = СуммаДЗБезРезерва - СуммаРезерва;
		ОбластьСтрока.Параметры.СуммаДЗБезРезерва 	= СуммаДЗБезРезерва;
		ОбластьСтрока.Параметры.СуммаРезерва        = СуммаРезерва;
		ОбластьСтрока.Параметры.СуммаДЗСРезервом 	= СуммаДЗСРезервом;
		
		ОбластьСтрока.Параметры.Колонка12Ч = 0;
		ОбластьСтрока.Параметры.Колонка13Ч = 0;
		ОбластьСтрока.Параметры.Колонка14Ч = 0;
		ОбластьСтрока.Параметры.Колонка15Ч = 0;
		ОбластьСтрока.Параметры.Колонка16Ч = 0; 
		ОбластьСтрока.Параметры.Колонка17Ч = 0;
		Для каждого СтрТЗ Из ТЗДляСтруктуры Цикл
			ОбластьСтрока.Параметры.Колонка12Ч = ОбластьСтрока.Параметры.Колонка12Ч + СтрТЗ.Колонка12;
			ОбластьСтрока.Параметры.Колонка13Ч = ОбластьСтрока.Параметры.Колонка13Ч + СтрТЗ.Колонка13;
			ОбластьСтрока.Параметры.Колонка14Ч = ОбластьСтрока.Параметры.Колонка14Ч + СтрТЗ.Колонка14;
			ОбластьСтрока.Параметры.Колонка15Ч = ОбластьСтрока.Параметры.Колонка15Ч + СтрТЗ.Колонка15;
			ОбластьСтрока.Параметры.Колонка16Ч = ОбластьСтрока.Параметры.Колонка16Ч + СтрТЗ.Колонка16;
			ОбластьСтрока.Параметры.Колонка17Ч = ОбластьСтрока.Параметры.Колонка17Ч + СтрТЗ.Колонка17;
		КонецЦикла;
		
		Если 	Не ?(ОбластьСтрока.Параметры.СуммаДЗБезРезерва  = Неопределено, 0, ОбластьСтрока.Параметры.СуммаДЗБезРезерва) = 0 
			или Не ?(ОбластьСтрока.Параметры.СуммаРезерва  		= Неопределено, 0, ОбластьСтрока.Параметры.СуммаРезерва) = 0
			или Не ?(ОбластьСтрока.Параметры.СуммаДЗСРезервом  	= Неопределено, 0, ОбластьСтрока.Параметры.СуммаДЗСРезервом) = 0
			или Не ?(ОбластьСтрока.Параметры.Колонка12Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка12Ч) = 0
			или Не ?(ОбластьСтрока.Параметры.Колонка13Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка13Ч) = 0
			или Не ?(ОбластьСтрока.Параметры.Колонка14Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка14Ч) = 0
			или Не ?(ОбластьСтрока.Параметры.Колонка15Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка15Ч) = 0
			или Не ?(ОбластьСтрока.Параметры.Колонка16Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка16Ч) = 0
			или Не ?(ОбластьСтрока.Параметры.Колонка17Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка17Ч) = 0
			или Не ?(ОбластьСтрока.Параметры.СуммаРезерваНУ  	= Неопределено, 0, ОбластьСтрока.Параметры.СуммаРезерваНУ) = 0
			Тогда
			СтрокаТЗ1 = ТаблицаСтрокПоСчету[ТаблицаСтрокПоСчету.Количество() - 1];
			Если ЗначениеЗаполнено(СтрокаТЗ1.СчетРасчетов) тогда
				СтрокаТЗ = ТаблицаСтрокПоСчету.Добавить();
				СтрокаТЗ.СчетИерархия 		= СтрокаТЗ1.СчетИерархия;
				СтрокаТЗ.СчетГруппировка 	= СтрокаТЗ1.СчетГруппировка;
				СтрокаТЗ.СчетРасчетов 		= ВыборкаБезИерархии.СчетРасчетов;
				СтрокаТЗ.СтрокаРасчетов = Новый Массив();
				СтрокаТЗ.СтрокаДетальная = Новый Массив(100, 1);
			Иначе
				СтрокаТЗ = СтрокаТЗ1;
				СтрокаТЗ.СчетРасчетов 		= ВыборкаБезИерархии.СчетРасчетов;
			КонецЕсли;	
			СтрокаТЗ.СтрокаРасчетов.Добавить(ОбластьСтрока);
			//Если СтрокаТЗ.СтрокаДетальная = Неопределено Тогда
			//	СтрокаТЗ.СтрокаДетальная = Новый Массив(100, 100);
			//КонецЕсли;	
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтруктураПоказателей.Колонка12ЧИтого 			= СтруктураПоказателей.Колонка12ЧИтого 			+ ОбластьСтрока.Параметры.Колонка12Ч;
		СтруктураПоказателей.Колонка12ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка12ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка12Ч;
		СтруктураПоказателей.Колонка13ЧИтого 			= СтруктураПоказателей.Колонка13ЧИтого 			+ ОбластьСтрока.Параметры.Колонка13Ч;	
		СтруктураПоказателей.Колонка13ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка13ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка13Ч;
		СтруктураПоказателей.Колонка14ЧИтого 			= СтруктураПоказателей.Колонка14ЧИтого 			+ ОбластьСтрока.Параметры.Колонка14Ч;
		СтруктураПоказателей.Колонка14ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка14ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка14Ч;
		СтруктураПоказателей.Колонка15ЧИтого 			= СтруктураПоказателей.Колонка15ЧИтого 			+ ОбластьСтрока.Параметры.Колонка15Ч;
		СтруктураПоказателей.Колонка15ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка15ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка15Ч;
		СтруктураПоказателей.Колонка16ЧИтого 			= СтруктураПоказателей.Колонка16ЧИтого 			+ ОбластьСтрока.Параметры.Колонка16Ч;
		СтруктураПоказателей.Колонка16ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка16ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка16Ч;
		СтруктураПоказателей.Колонка17ЧИтого 			= СтруктураПоказателей.Колонка17ЧИтого 			+ ОбластьСтрока.Параметры.Колонка17Ч;	
		СтруктураПоказателей.Колонка17ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка17ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка17Ч;
		
		СтруктураПоказателей.СуммаДЗБезРезерваИтого 	= СтруктураПоказателей.СуммаДЗБезРезерваИтого 	+ СуммаДЗБезРезерва; 
		СтруктураПоказателей.СуммаДЗБезРезерваПоСчетуИтого = СтруктураПоказателей.СуммаДЗБезРезерваПоСчетуИтого + СуммаДЗБезРезерва;
		СтруктураПоказателей.СуммаРезерваИтого 			= СтруктураПоказателей.СуммаРезерваИтого 		+ СуммаРезерва;
		СтруктураПоказателей.СуммаРезерваПоСчетуИтого 	= СтруктураПоказателей.СуммаРезерваПоСчетуИтого + СуммаРезерва;
		СтруктураПоказателей.СуммаДЗСРезервомИтого 		= СтруктураПоказателей.СуммаДЗСРезервомИтого 	+ СуммаДЗСРезервом;
		СтруктураПоказателей.СуммаДЗСРезервомПоСчетуИтого = СтруктураПоказателей.СуммаДЗСРезервомПоСчетуИтого + СуммаДЗСРезервом;
		
		СтруктураПоказателей.СуммаРезерваНУЧПоСчетуИтого = СтруктураПоказателей.СуммаРезерваНУЧПоСчетуИтого + СтруктураПоказателей.СуммаРезерваНУЧ;      //?

		Для каждого СтрокаТЗДляСтруктуры Из ТЗДляСтруктуры Цикл
			ОбластьСтрокаД = Макет.ПолучитьОбласть("СтрокаДетальная");
			ОбластьСтрокаД.Параметры.ДатаДолга 	= СтрокаТЗДляСтруктуры.ДатаДок;
			ОбластьСтрокаД.Параметры.ЗаЧто 		= СтрокаТЗДляСтруктуры.ЗаЧто;
			ОбластьСтрокаД.Параметры.Регистратор= СтрокаТЗДляСтруктуры.Регистратор;
			ОбластьСтрокаД.Параметры.Колонка12Ч = СтрокаТЗДляСтруктуры.Колонка12;
			ОбластьСтрокаД.Параметры.Колонка13Ч = СтрокаТЗДляСтруктуры.Колонка13;
			ОбластьСтрокаД.Параметры.Колонка14Ч = СтрокаТЗДляСтруктуры.Колонка14;
			ОбластьСтрокаД.Параметры.Колонка15Ч = СтрокаТЗДляСтруктуры.Колонка15;
			ОбластьСтрокаД.Параметры.Колонка16Ч = СтрокаТЗДляСтруктуры.Колонка16;
			ОбластьСтрокаД.Параметры.Колонка17Ч = СтрокаТЗДляСтруктуры.Колонка17;
			Если СтрокаТЗ.СтрокаДетальная[СтрокаТЗ.СтрокаРасчетов.ВГраница()][0] = Неопределено Тогда
				СтрокаТЗ.СтрокаДетальная[СтрокаТЗ.СтрокаРасчетов.ВГраница()].Вставить(0, ОбластьСтрокаД);
			Иначе	
				СтрокаТЗ.СтрокаДетальная[СтрокаТЗ.СтрокаРасчетов.ВГраница()].Добавить(ОбластьСтрокаД);
			КонецЕсли;	
		КонецЦикла;
		
		
	КонецЦикла;
КонецПроцедуры

Процедура ВыбратьЭлементы(Выборка, ТаблицаСтрокПоСчету, ВыборкаДокументов, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, КоличествоВСтеке)
	Пока Выборка.Следующий() Цикл
    // Вставить обработку выборки ВыборкаБезИерархии
    //ОбработатьЭлемент();
	КонецЦикла;
КонецПроцедуры


Функция ПолучитьДанныеСтроки_180511(Знач СписокСтрокПоТекущейЗадолженности, Знач Выборка_3, Знач КонПериода, Знач Контрагент, Знач Счет, Знач Организация, Знач ДоговорКонтрагента, Знач ДтКт = "Дт", Знач Задолженность, Знач Просроченная = Ложь, Знач ДанныеОДокПросроч = Неопределено)
	//Задолженность = ДанныеОДокПросроч.КонПериодаТекМ;
	СтруктураСтроки = Новый Структура;     //Просроченная 
	
	СальдоТекущееФ = 0;                                                     
	
	ТаблицаСФлагами = Новый ТаблицаЗначений();//Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Колонки = ТаблицаСФлагами.Колонки;
	Колонки.Добавить("ВИЛС_Договор"		, Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Колонки.Добавить("ДебиторКредитор"	, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Колонки.Добавить("ЕстьУслуги"		, Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Период"			, Новый ОписаниеТипов("Дата"));
	Колонки.Добавить("ПроверятьГалочку"	, Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Регистратор");
	Колонки.Добавить("СуммаОборот"		, Новый ОписаниеТипов("Число"));   
	Колонки.Добавить("СуммаОборотДт"	, Новый ОписаниеТипов("Число"));      
	Колонки.Добавить("СуммаОборотКт"	, Новый ОписаниеТипов("Число"));
	Колонки.Добавить("Счет"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	СуммаДолгаПоДоговору = 0;
	Для каждого СтрокаТЗИ Из СписокСтрокПоТекущейЗадолженности Цикл
		СтрокаТЗТЗ = ТаблицаСФлагами.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗТЗ, СтрокаТЗИ);
		Если Не Счет = СтрокаТЗИ.Счет Тогда Продолжить; КонецЕсли;	
		СуммаДолгаПоДоговору = СуммаДолгаПоДоговору + ?(СтрокаТЗИ.СуммаОборот = 0 и СуммаДолгаПоДоговору = 0, Задолженность, ?(ДтКт = "Дт", СтрокаТЗИ.СуммаОборот, - СтрокаТЗИ.СуммаОборот)); 
		//Прервать;
	КонецЦикла;	
	
	
	ПараметрыОтбора = Новый Структура("Регистратор", Null);
	ЛишниеСтроки = ТаблицаСФлагами.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ЛишняяСтрока Из ЛишниеСтроки Цикл
		ТаблицаСФлагами.Удалить(ЛишняяСтрока);
	КонецЦикла; 
	ТаблицаСФлагами.Сортировать("Период Возр");
	ТаблицаСФлагами.Колонки.Добавить("Флаг", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1)));
	ТаблицаСФлагами.Колонки.Добавить("СуммаДолгаПоДоговору", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	Для каждого СтрокаТЗФ Из ТаблицаСФлагами Цикл
		//Если Не ЗначениеЗаполнено(СтрокаТЗФ.Регистратор) Тогда
		//	Если Не Счет = СтрокаТЗФ.Счет Тогда Продолжить; КонецЕсли;	
		//	//СуммаДолгаПоДоговору = ?(СтрокаТЗФ.СуммаОборот = 0, (ДанныеОДокПросроч.КонПериода2М - ДанныеОДокПросроч.КонПериода1М + ДанныеОДокПросроч.КонПериода1М - Задолженность), СтрокаТЗФ.СуммаОборот);  
		//	СуммаДолгаПоДоговору = ?(СтрокаТЗФ.СуммаОборот = 0, Задолженность, ?(ДтКт = "Дт", СтрокаТЗФ.СуммаОборот, - СтрокаТЗФ.СуммаОборот)); 
		//	Отрицательная = СуммаДолгаПоДоговору < 0;
		//	Продолжить; 
		//КонецЕсли; 
		СальдоТекущееФ = СальдоТекущееФ + СтрокаТЗФ.СуммаОборотДт - СтрокаТЗФ.СуммаОборотКт;
		СтрокаТЗФ.Флаг   = ?(СальдоТекущееФ = 0, "", ?(СальдоТекущееФ < 0, "К", "Д"));
		СтрокаТЗФ.СуммаДолгаПоДоговору = ?(СальдоТекущееФ < 0, -СальдоТекущееФ, СальдоТекущееФ);
	КонецЦикла; 
	ТаблицаСФлагами.Сортировать("Период Убыв");
	//ВыборкаДетальныеЗаписиДог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаДокументовДолга = Новый ТаблицаЗначений;
	ТаблицаДокументовДолга.Колонки.Добавить("Регистратор");//,          Новый ОписаниеТипов("ДокументСсылка"));
	ТаблицаДокументовДолга.Колонки.Добавить("ПроверятьГалочку",     Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаДокументовДолга.Колонки.Добавить("СуммаДолгаПоДоговору", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТаблицаДокументовДолга.Колонки.Добавить("СуммаДолга", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТаблицаДокументовДолга.Колонки.Добавить("ЕстьУслуги", 			Новый ОписаниеТипов("Булево"));
	ТипДокумента = "";
	ДатаДок = "";
	НомерДок = "";
	БылиНайденыСтрокиЗадолженности = Ложь;
	
	Для каждого СтрокаТЗФ Из ТаблицаСФлагами Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗФ.Регистратор) Тогда Продолжить; КонецЕсли; 
		Если ДтКт = "Дт" и СтрокаТЗФ.Флаг = "Д" и СтрокаТЗФ.СуммаОборотДт <> 0 Тогда
			Нстрока = ТаблицаДокументовДолга.Добавить();
			Нстрока.Регистратор 			= СтрокаТЗФ.Регистратор;
			Нстрока.ПроверятьГалочку 		= СтрокаТЗФ.ПроверятьГалочку;
			Нстрока.ЕстьУслуги 				= СтрокаТЗФ.ЕстьУслуги;
			//Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, Мин(СуммаДолгаПоДоговору, ?(СтрокаТЗФ.СуммаОборотДт < 0, 0, СтрокаТЗФ.СуммаОборотДт)));
			Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, Мин(СуммаДолгаПоДоговору, СтрокаТЗФ.СуммаОборотДт));
			СуммаДолгаПоДоговору 			= СуммаДолгаПоДоговору - СтрокаТЗФ.СуммаОборотДт;
			Нстрока.СуммаДолга			 	= СтрокаТЗФ.СуммаОборотДт;
			БылиНайденыСтрокиЗадолженности = Истина;
			Если Не СуммаДолгаПоДоговору > 0 Тогда Прервать; КонецЕсли; 
		ИначеЕсли ДтКт = "Кт" и СтрокаТЗФ.Флаг = "К" и СтрокаТЗФ.СуммаОборотКт <> 0 Тогда
			Нстрока = ТаблицаДокументовДолга.Добавить();
			Нстрока.Регистратор 			= СтрокаТЗФ.Регистратор;
			Нстрока.ПроверятьГалочку 		= СтрокаТЗФ.ПроверятьГалочку;
			Нстрока.ЕстьУслуги 				= СтрокаТЗФ.ЕстьУслуги;
			//Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, Мин(СуммаДолгаПоДоговору, ?(СтрокаТЗФ.СуммаОборотКт < 0, 0, СтрокаТЗФ.СуммаОборотКт)));
			Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, Мин(СуммаДолгаПоДоговору, СтрокаТЗФ.СуммаОборотКт));
			СуммаДолгаПоДоговору 			= СуммаДолгаПоДоговору - СтрокаТЗФ.СуммаОборотКт;
			Нстрока.СуммаДолга			 	= СтрокаТЗФ.СуммаОборотКт;
			БылиНайденыСтрокиЗадолженности = Истина;
			Если Не СуммаДолгаПоДоговору > 0 Тогда Прервать; КонецЕсли; 
		ИначеЕсли Не БылиНайденыСтрокиЗадолженности Тогда
			Продолжить;
		ИначеЕсли СуммаДолгаПоДоговору > 0 Тогда
			Продолжить;	
		Иначе 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СуммаРезерва = 0;
	Если Не Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам Тогда
		СтруктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента", Контрагент, ДоговорКонтрагента);
		
		Если Выборка_3.НайтиСледующий(СтруктураПоиска) Тогда
			СуммаРезерва = Выборка_3.Сумма;
		КонецЕсли; 
	КонецЕсли;
	
	ТЗДляСтруктуры = новый ТаблицаЗначений;
	ТЗДляСтруктуры.Колонки.Добавить("ТипДокумента");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаДок");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаДокСист");
	ТЗДляСтруктуры.Колонки.Добавить("НомерДок");
	ТЗДляСтруктуры.Колонки.Добавить("ЗаЧто");
	ТЗДляСтруктуры.Колонки.Добавить("ПроверятьГалочку");
	ТЗДляСтруктуры.Колонки.Добавить("Регистратор");
	
	ТЗДляСтруктуры.Колонки.Добавить("ДатаПогашенияДЗ");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаПогашенияДЗСтр");
	
	ТЗДляСтруктуры.Колонки.Добавить("Колонка12", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка13", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка14", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка15", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка16", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка17", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	Для каждого ВыборкаДетальныеЗаписи из ТаблицаДокументовДолга цикл
		НовСтрока = ТЗДляСтруктуры.Добавить();
		НовСтрока.Регистратор = ВыборкаДетальныеЗаписи.Регистратор;
		ЗаполнитьСтрокуДаннымиДокумента(НовСтрока, ВыборкаДетальныеЗаписи.Регистратор, ВыборкаДетальныеЗаписи.ПроверятьГалочку, ВыборкаДетальныеЗаписи.ЕстьУслуги);
		
		НовСтрока.ДатаПогашенияДЗ = Дата(1,1,1);
		Если НовСтрока.ДатаДок = "б/д" Тогда
		    НовСтрока.ДатаПогашенияДЗСтр = "б/д";
		ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			и ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса и НовСтрока.ПроверятьГалочку = "Деньги" Тогда         // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
			Если ЗначениеЗаполнено(ДоговорКонтрагента.ВИЛС_СрокПоставкиПослеАванса)  Тогда                                                // СрокПоставкиОтАванса - ВИЛС_СрокПоставкиПослеАванса
				НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + ДоговорКонтрагента.ВИЛС_СрокПоставкиПослеАванса * 60 * 60 * 24;// СрокПоставкиОтАванса - ВИЛС_СрокПоставкиПослеАванса
				НовСтрока.ДатаПогашенияДЗСтр = Формат(НовСтрока.ДатаПогашенияДЗ, "ДФ=dd.MM.yyyy");
			Иначе
				НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 30 * 60 * 60 * 24;
				НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
			КонецЕсли; 
			
		ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			 и ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса и НовСтрока.ПроверятьГалочку = "Поставка" Тогда         // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
			//Если ЗначениеЗаполнено(ДоговорКонтрагента.ВИЛС_СрокПоставкиПослеАванса)  Тогда      // СрокПоставкиОтАванса - ВИЛС_СрокПоставкиПослеАванса
			//	НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + ДоговорКонтрагента.ВИЛС_СрокПоставкиПослеАванса * 60 * 60 * 24;// СрокПоставкиОтАванса - ВИЛС_СрокПоставкиПослеАванса
			//	НовСтрока.ДатаПогашенияДЗСтр = Формат(НовСтрока.ДатаПогашенияДЗ, "ДФ=dd.MM.yyyy");
			//Иначе
				НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 1 * 60 * 60 * 24;
				НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
			//КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			 и ДоговорКонтрагента.УстановленСрокОплаты и НовСтрока.ПроверятьГалочку = "Поставка"  Тогда   	// КонтролироватьСрокОкончательнойОплатыЗадолженности - УстановленСрокОплаты
			Если ЗначениеЗаполнено(ДоговорКонтрагента.СрокОплаты) Тогда            								// СрокОкончательнойОплатыЗадолженности - СрокОплаты
				НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + ДоговорКонтрагента.СрокОплаты * 60 * 60 * 24;   // СрокОкончательнойОплатыЗадолженности - СрокОплаты
				НовСтрока.ДатаПогашенияДЗСтр = Формат(НовСтрока.ДатаПогашенияДЗ, "ДФ=dd.MM.yyyy");
			Иначе
				НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 30 * 60 * 60 * 24;
				НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
			КонецЕсли; 
		Иначе
			НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 30 * 60 * 60 * 24; 
		    НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
		КонецЕсли; 	
		
		НовСтрока.Колонка12 = 0;
		НовСтрока.Колонка13 = 0;
		НовСтрока.Колонка14 = 0; 
		НовСтрока.Колонка15 = 0;
		НовСтрока.Колонка16 = 0;
		НовСтрока.Колонка17 = 0;
		КолДней = (КонПериода - НовСтрока.ДатаДок) / (60 * 60 * 24);   // fix Suetin 23.10.2017 16:14:54  ТЗДляСтруктуры[КоличествоСтрок - 1].ДатаДок
		
		Если КолДней > 1095 Тогда
			НовСтрока.Колонка16 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		ИначеЕсли КолДней > 180 Тогда
			НовСтрока.Колонка15 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;	
		ИначеЕсли КолДней > 90 Тогда
			НовСтрока.Колонка14 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		ИначеЕсли КолДней > 30 Тогда
			НовСтрока.Колонка13 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		ИначеЕсли КолДней > 0 Тогда
			НовСтрока.Колонка12 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		КонецЕсли; 
		Если НовСтрока.ДатаПогашенияДЗ > Дата(1,1,1) и НовСтрока.ДатаПогашенияДЗ < КонПериода Тогда
			НовСтрока.Колонка17 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		КонецЕсли;
		
	КонецЦикла;
	
	//ПараметрыОтбора = Новый Структура("Колонка11,Колонка12,Колонка13,Колонка14,Колонка15", 0, 0, 0, 0, 0);
	//МассивСтрокПросроченных = ТЗДляСтруктуры.НайтиСтроки(ПараметрыОтбора);
	//Для каждого СтрокаНеПросроч Из МассивСтрокПросроченных Цикл
	//	ТЗДляСтруктуры.Удалить(СтрокаНеПросроч);
	//КонецЦикла;
	
	ТЗДляСтруктуры.Свернуть("ТипДокумента, ДатаДок, НомерДок, ДатаДокСист, ЗаЧто, ПроверятьГалочку, Регистратор, ДатаПогашенияДЗ, ДатаПогашенияДЗСтр", "Колонка12, Колонка13, Колонка14, Колонка15, Колонка16, Колонка17");
	ТЗДляСтруктуры.Сортировать("ДатаДокСист Убыв");
	Для каждого строкаДС из ТЗДляСтруктуры цикл
		ТипДокумента = ТипДокумента + ?(ТипДокумента = "", "", Символы.ПС) + строкаДС.ТипДокумента; 	
		НомерДок = НомерДок + ?(НомерДок = "", "", Символы.ПС) + ?(строкаДС.НомерДок = "", "б/н", строкаДС.НомерДок);
		ДатаДок = ДатаДок + ?(ДатаДок = "", "", Символы.ПС) + ?(строкаДС.ДатаДок = Дата(1,1,1,0,0,0), "б/д", Формат(строкаДС.ДатаДок, "ДФ=dd.MM.yyyy"));
		//Если Не (строкаДС.ДатаДок = "" или строкаДС.ДатаДок = Дата(1,1,1,0,0,0)) Тогда
		//	ДатаДокДатой = строкаДС.ДатаДок;
		//КонецЕсли;	
		ЗаЧто = строкаДС.ЗаЧто;
		ДатаПогашенияДЗСтр = строкаДС.ДатаПогашенияДЗСтр;
	КонецЦикла;
	
	КоличествоСтрок = ТЗДляСтруктуры.Количество();
	
	СтруктураСтроки.Вставить("ДокСтр", 			ТипДокумента);
	СтруктураСтроки.Вставить("ДатаДок", 		ДатаДок);
	СтруктураСтроки.Вставить("НомерДок", 		НомерДок);
	СтруктураСтроки.Вставить("ЗаЧто", 			ЗаЧто);
	СтруктураСтроки.Вставить("ДатаПогашенияДЗ", ДатаПогашенияДЗСтр);
	СтруктураСтроки.Вставить("Регистратор", 	?(КоличествоСтрок > 0, ТЗДляСтруктуры[КоличествоСтрок - 1].Регистратор, Неопределено));  
	
	СтруктураСтроки.Вставить("ТЗДляСтруктуры", ТЗДляСтруктуры);
	СтруктураСтроки.Вставить("СуммаРезерва", СуммаРезерва);
	СтруктураСтроки.Вставить("ИсполняющееПодразделение", ?(ЗначениеЗаполнено(ДоговорКонтрагента), ДоговорКонтрагента.Подразделение, Справочники.СтруктураПредприятия.ПустаяСсылка()));    //  ИсполняющееПодразделение
	СтруктураСтроки.Вставить("Контрагент", Контрагент);
	СтруктураСтроки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Возврат СтруктураСтроки;
	
КонецФункции	//ПолучитьДанныеСтроки()	                    

Процедура ЗаполнитьСтрокуДаннымиДокумента(НовСтрока, Регистратор, ПроверятьГалочку, ЕстьУслуги = Ложь)
	Попытка
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОтчетДавальцу") тогда   //    РеализацияУслугПоПереработке
			НовСтрока.ТипДокумента = "акт выполненных услуг";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
			
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПередачаДавальцу") тогда   //    РеализацияУслугПоПереработке
			НовСтрока.ТипДокумента = "накладная";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;	
		
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
			Если ЕстьУслуги тогда
				НовСтрока.ТипДокумента = "акт выполненных услуг";
			Иначе
				НовСтрока.ТипДокумента = "накладная";
			КонецЕсли;
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
		
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") тогда
			Если ЕстьУслуги тогда
				НовСтрока.ТипДокумента = "акт выполненных услуг";
			Иначе
				НовСтрока.ТипДокумента = "накладная";
			КонецЕсли;
			НовСтрока.ДатаДок 		= ?(Регистратор.ДатаВходящегоДокумента = Дата(1,1,1), Регистратор.Дата, Регистратор.ДатаВходящегоДокумента);
			НовСтрока.ДатаДокСист 	= Регистратор.Дата;
			НовСтрока.НомерДок 		= ?(Регистратор.НомерВходящегоДокумента = "", "б/н", Регистратор.НомерВходящегоДокумента);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
		
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеТоваровНаСклад") тогда
			Если ЕстьУслуги тогда
				НовСтрока.ТипДокумента = "акт выполненных услуг";
			Иначе
				НовСтрока.ТипДокумента = "накладная";
			КонецЕсли;
			НовСтрока.ДатаДок 		= ?(Регистратор.ДатаВходящегоДокумента = Дата(1,1,1), Регистратор.Дата, Регистратор.ДатаВходящегоДокумента);
			НовСтрока.ДатаДокСист 	= Регистратор.Дата;
			НовСтрока.НомерДок 		= ?(Регистратор.НомерВходящегоДокумента = "", "б/н", Регистратор.НомерВходящегоДокумента);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") тогда
			НовСтрока.ТипДокумента 	= "платежное поручение";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") тогда
			НовСтрока.ТипДокумента 	= "платежное поручение";
			НовСтрока.ДатаДок 		= ?(Регистратор.ДатаВходящегоДокумента = Дата(1,1,1), Регистратор.Дата, Регистратор.ДатаВходящегоДокумента);
			НовСтрока.ДатаДокСист 	= Регистратор.Дата;
			НовСтрока.НомерДок 		= ?(Регистратор.НомерВходящегоДокумента = "", "б/н", Регистратор.НомерВходящегоДокумента);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") тогда
			НовСтрока.ТипДокумента 	= "ПКО";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") тогда
			НовСтрока.ТипДокумента 	= "РКО";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.АвансовыйОтчет") тогда
			НовСтрока.ТипДокумента 	= "Авансовый отчет";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;                                               
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОперацияБух") тогда
			НовСтрока.ТипДокумента 	= "Опреация бух.";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		//ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") тогда  //?????????????????????????????
		//	НовСтрока.ТипДокумента 	= "акт выполненных услуг";
		//	НовСтрока.ДатаДок 		= Регистратор.дата;
		//	НовСтрока.ДатаДокСист 	= Регистратор.дата;
		//	НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
		//	НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
		//	НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПервичныйДокумент") тогда
			НовСтрока.ТипДокумента 	= "" + Регистратор.ТипПервичногоДокумента;//"д/расч.";
			НовСтрока.ДатаДок 		= ?(Регистратор.ДатаВходящегоДокумента = Дата(1,1,1), Регистратор.Дата, Регистратор.ДатаВходящегоДокумента);;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ?(Регистратор.НомерВходящегоДокумента = "", "б/н", Регистратор.НомерВходящегоДокумента);	//ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаЗадолженностиПоФинансовымИнструментам") тогда
			НовСтрока.ТипДокумента 	= "к/задолженности";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") тогда
			НовСтрока.ТипДокумента 	= "в/задолженности";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.СписаниеЗадолженности") тогда
			НовСтрока.ТипДокумента 	= "с/задолженности";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") тогда
			НовСтрока.ТипДокумента 	= "доп/расх";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВводОстатков") тогда
			НовСтрока.ТипДокумента 	= "Ввод нач. остатков";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") тогда
			НовСтрока.ТипДокумента 	= "Корректировка реализ.";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаПриобретения") тогда
			НовСтрока.ТипДокумента 	= "Корректировка поступ.";                                                            
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") тогда
			НовСтрока.ТипДокумента 	= "Накладная";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
			
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") тогда
			НовСтрока.ТипДокумента 	= "Накладная";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
			
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.НачислениеДивидендов") тогда
			НовСтрока.ТипДокумента 	= "Начисление дивидендов";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= "Дивиденды по акциям";
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
			
		Иначе
			НовСтрока.ТипДокумента 	= Регистратор.Метаданные().Синоним;
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
			
		КонецЕсли;	
	Исключение
	КОнецПопытки;
КонецПроцедуры

Функция ПолучитьТекстЗапроса(ДтКт)
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1	//0
	|	Инвентаризация.Дата КАК Дата,
	|	КОНЕЦПЕРИОДА(Инвентаризация.Дата, ДЕНЬ) КАК КонецПериода,
	|	Инвентаризация.Номер КАК Номер,
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	Инвентаризация.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	Инвентаризация.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	Инвентаризация.ДокументОснованиеНомер КАК ДокументОснованиеНомер	//,
	//|	Инвентаризация.ИнвентаризационнаяКомиссия.(
	//|		ФИОПолные КАК ФизЛицо,
	//|		Председатель КАК Председатель
	//|	) КАК ИнвентаризационнаяКомиссия,
	//|	Инвентаризация.СчетаУчета.(
	//|		СчетУчета
	//|	)//,
	//|	Инвентаризация.Задолженность.(
	//|		ДебиторКредитор КАК Контрагент,
	//|		ВидЗадолженности,
	//|		СчетРасчетов,
	//|		Подтверждено,
	//|		НеПодтверждено,
	//|		ИстекСрокДавности,
	//|		ВИЛС_Договор КАК ДоговорКонтрагента
	//|	)
	|ПОМЕСТИТЬ Шапка
	|ИЗ 
	|	Документ.ИнвентаризацияРасчетов КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка
	|
	//|УПОРЯДОЧИТЬ ПО
	//|	Инвентаризация.ИнвентаризационнаяКомиссия.НомерСтроки
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ //1
	|	Задолженность.ДебиторКредитор КАК Контрагент,
	|	Задолженность.ВидЗадолженности КАК ВидЗадолженности,
	|	Задолженность.СчетРасчетов КАК СчетРасчетов,
	|	Задолженность.Подтверждено КАК Подтверждено,
	|	Задолженность.НеПодтверждено КАК НеПодтверждено,
	|	Задолженность.ИстекСрокДавности КАК ИстекСрокДавности,
	|	Задолженность.ВИЛС_Договор КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ Задолженность	
	|ИЗ 
	|	Документ.ИнвентаризацияРасчетов.Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.Ссылка = &Ссылка
	|	И Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности." + ?(ДтКт = "Дт", "Дебиторская", "Кредиторская") + ")
	//Дебиторская)
	//
	//|ИТОГИ
	//|	СУММА(Подтверждено),
	//|	СУММА(НеПодтверждено)
	//|ПО
	//|	СчетРасчетов
	|;	
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ //2
	//|	Т.Регистратор КАК Регистратор,
	//|	МАКСИМУМ(Т.ЕстьУслуги) КАК ЕстьУслуги
	//|ПОМЕСТИТЬ РегистраторыСУслугами
	//|ИЗ(
	//|	ВЫБРАТЬ
	//|		Т.Ссылка КАК Регистратор,
	//|   	ВЫБОР 
	//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	//|   			ТОГДА ИСТИНА
	//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	//|   			ТОГДА ИСТИНА
	//|  	    	ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ КАК ЕстьУслуги
	//|	ИЗ
	//|		Документ.ПриобретениеТоваровУслуг.ВидыЗапасов КАК Т
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	ВЫБРАТЬ
	//|		Т.Ссылка КАК Регистратор,
	//|   	ВЫБОР 
	//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	//|   			ТОГДА ИСТИНА
	//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	//|   			ТОГДА ИСТИНА
	//|  	    	ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ КАК ЕстьУслуги
	//|	ИЗ
	//|		Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК Т 
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	ВЫБРАТЬ
	//|		Т.Ссылка КАК Регистратор,
	//|   	ВЫБОР 
	//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	//|   			ТОГДА ИСТИНА
	//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	//|   			ТОГДА ИСТИНА
	//|  	    	ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ КАК ЕстьУслуги
	//|	ИЗ
	//|		Документ.ПоступлениеТоваровНаСклад.ВидыЗапасов  КАК Т) КАК Т
	//|СГРУППИРОВАТЬ
	//|ПО 
	//|	Т.Регистратор
	|ВЫБРАТЬ РАЗЛИЧНЫЕ //2
	|	Т.Регистратор КАК Регистратор,
	|	Т.Организация КАК Организация,
	|	Т.Контрагент КАК Контрагент,
	|	Т.Договор КАК Договор,
	|	МАКСИМУМ(Т.ЕстьУслуги) КАК ЕстьУслуги,
	|	Т.РасчетныйДокумент КАК РасчетныйДокумент
	|ПОМЕСТИТЬ РегистраторыСУслугами
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Ссылка КАК Регистратор,
	|		Т.Ссылка.Организация КАК Организация,
	|		Т.Ссылка.Контрагент КАК Контрагент,
	|		Т.Ссылка.Договор КАК Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЕстьУслуги,
	|		Т.Ссылка КАК РасчетныйДокумент
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг.ВидыЗапасов КАК Т
	|	ГДЕ
	|		Т.Ссылка.Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ ШАПКА КАК ШАПКА)	
	|	    И Т.Ссылка.Контрагент В (ВЫБРАТЬ РАЗЛИЧНЫЕ  Задолженность.Контрагент ИЗ Задолженность КАК Задолженность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Организация,
	|		Т.Ссылка.Контрагент,
	|		Т.Ссылка.Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		Т.Ссылка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК Т
	|	ГДЕ
	|		Т.Ссылка.Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ ШАПКА КАК ШАПКА)	
	|	    И Т.Ссылка.Контрагент В (ВЫБРАТЬ РАЗЛИЧНЫЕ  Задолженность.Контрагент ИЗ Задолженность КАК Задолженность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Организация,
	|		Т.Ссылка.Контрагент,
	|		Т.Ссылка.Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		Т.Ссылка
	|	ИЗ
	|		Документ.ПоступлениеТоваровНаСклад.ВидыЗапасов КАК Т
	|	ГДЕ
	|		Т.Ссылка.Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ ШАПКА КАК ШАПКА)	
	|	    И Т.Ссылка.Контрагент В (ВЫБРАТЬ РАЗЛИЧНЫЕ  Задолженность.Контрагент ИЗ Задолженность КАК Задолженность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Организация,
	|		Т.Контрагент,
	|		ВЫБОР КОГДА НЕ ЕСТЬNULL(Т.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА 
	|				Т.Договор
	|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Т.ОбъектРасчетов КАК Справочник.ДоговорыКонтрагентов), ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) 	 
	|			ТОГДА
	|				ВЫРАЗИТЬ(Т.ОбъектРасчетов КАК Справочник.ДоговорыКонтрагентов)
	|			ИНАЧЕ	
	|				Т.ДокументРасчетов.Договор
	|			КОНЕЦ,	
	|		ЛОЖЬ,
	|		Т.ДокументРасчетов
	|	ИЗ
	|		Документ.ВводОстатков.РасчетыСПартнерами КАК Т
	|	ГДЕ
	|		Т.Ссылка.Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ ШАПКА КАК ШАПКА)	
	|	    И Т.Контрагент В (ВЫБРАТЬ РАЗЛИЧНЫЕ  Задолженность.Контрагент ИЗ Задолженность КАК Задолженность)
	|	    ) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.Организация,
	|	Т.Контрагент,
	|	Т.Договор,
	|	Т.РасчетныйДокумент
	|;
	|///////////////////////////////////////////////////////////////////////////////   
	|ВЫБРАТЬ	//3
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонПериода,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам),
	|			, Организация 	 В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ Шапка КАК Шапка)	//&Организация
	|				И Субконто1  В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.Контрагент ИЗ Задолженность КАК ЗадолженностьНовая)
	|				И Субконто2  В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДоговорКонтрагента ИЗ Задолженность КАК ЗадолженностьНовая)) КАК ХозрасчетныйОстатки
	|
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ //4
	|	ХозрасчетныйОбороты.ДебиторКредитор КАК ДебиторКредитор,
	|	ХозрасчетныйОбороты.ВИЛС_Договор КАК ВИЛС_Договор,
	|	ХозрасчетныйОбороты.ЕстьУслуги,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.ПроверятьГалочку КАК ПроверятьГалочку,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК СуммаОборот,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	(ВЫБРАТЬ

	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто3
	|		ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17

	|		ХозрасчетныйОбороты.Период КАК Период,
	|		ХозрасчетныйОбороты.Счет КАК Счет,
    |	   	ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент, ХозрасчетныйОбороты.Регистратор) КАК Регистратор, 
	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) = 0
	|			ТОГДА
	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
	|			ИНАЧЕ
	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) 
	|		КОНЕЦ КАК СуммаОборот,		
	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) = 0
	|			ТОГДА
	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
	|			ИНАЧЕ
	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) 
	|		КОНЕЦ КАК СуммаОборотДт,
	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) = 0
	|			ТОГДА
	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
	|			ИНАЧЕ
	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) 
	|		КОНЕЦ КАК СуммаОборотКт,
	|		ВЫБОР
	|			КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент 
	|					И РегистраторыСУслугами.РасчетныйДокумент.ТипПервичногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику)
	|				ТОГДА ""Деньги""
	|			КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент 
	|					И РегистраторыСУслугами.РасчетныйДокумент.ТипПервичногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаОтКлиента)
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы)
	|				ТОГДА ""Деньги""
	//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
	//|					И ХозрасчетныйОбороты.КорСубконто1 = &ВТБ_Факторинг
	//|				ТОГДА ""Деньги""
	//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
	//|					И ХозрасчетныйОбороты.КорСубконто1 = &Транскапиталбанк
	//|				ТОГДА ""Деньги""
	|			ИНАЧЕ ""Поставка""
	|		КОНЕЦ КАК ПроверятьГалочку,
	|		РегистраторыСУслугами.ЕстьУслуги КАК ЕстьУслуги
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				,
	|				&КонПериода,
	|				Регистратор,
	|				ВЫБОР 
	|					КОГДА Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.СчетРасчетов ИЗ Задолженность КАК ЗадолженностьНовая)	//В (&Счета),
	|				    	ТОГДА ИСТИНА
	|					КОГДА Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
	|				    	ТОГДА ИСТИНА
	|                    ИНАЧЕ ЛОЖЬ КОНЕЦ
	|				,,//&ВидыСубконто,
	|				Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ Шапка КАК Шапка)	//= &Организация

	|	И ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.Контрагент ИЗ Задолженность КАК ЗадолженностьНовая)    //= &Контрагент	//
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДоговорКонтрагента ИЗ Задолженность КАК ЗадолженностьНовая) 	//= &Договор	//	
	|,
	|				,
	|				) КАК ХозрасчетныйОбороты
	|    ЛЕВОЕ СОЕДИНЕНИЕ РегистраторыСУслугами
	|    	ПО ХозрасчетныйОбороты.Регистратор = РегистраторыСУслугами.Регистратор
	
	|			И ХозрасчетныйОбороты.Организация = РегистраторыСУслугами.Организация
	|			И ВЫБОР
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто2
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто3
	|				ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
	|			КОНЕЦ = РегистраторыСУслугами.Контрагент
	|			И ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто2
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто3
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			КОНЕЦ = РегистраторыСУслугами.Договор 
	|			
	|											) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО

	|	ХозрасчетныйОбороты.ДебиторКредитор,
	|	ХозрасчетныйОбороты.ВИЛС_Договор, // fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОбороты.ЕстьУслуги,   // fix Suetin 25.03.2019 18:45:23
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.ПроверятьГалочку
	|
	//|УПОРЯДОЧИТЬ ПО
	//|	ХозрасчетныйОбороты.Период
	|ИТОГИ
	|	СУММА(СуммаОборот)
	|ПО
	//|	Счет.Родитель.Родитель,
	//|	Счет.Родитель,
	|	Счет
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ //5
	|	Задолженность.СчетРасчетов КАК СчетРасчетов,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Задолженность.ВидЗадолженности КАК ВидЗадолженности,
	|	Задолженность.Подтверждено КАК Подтверждено,
	|	Задолженность.НеПодтверждено КАК НеПодтверждено,
	|	Задолженность.ИстекСрокДавности КАК ИстекСрокДавности
	|ИЗ 
	|	Задолженность КАК Задолженность
	|УПОРЯДОЧИТЬ ПО
	|	СчетРасчетов
	|ИТОГИ
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено)
	|ПО
	|	СчетРасчетов ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|";
	
	Возврат(ТекстЗапроса);
КонецФункции

Функция ПечатьРеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180523(МассивОбъектов, ОбъектыПечати)
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияПророченныхРасчетовСконтрагентами_Дбт";
	Макет = ПолучитьМакет("ПФ_MXL_РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2");
	Возврат(ПечатьРеестрПросроченнойЗадолженностиПриложение_7_2(МассивОбъектов, ОбъектыПечати, ТабДокумент, "Дт", Макет));
КонецФункции

Функция ПечатьРеестрПросроченнойЗадолженностиПриложение_7_2(Знач МассивОбъектов, Знач ОбъектыПечати, ТабДокумент, Знач ДтКт = "Дт", Знач Макет)
	ПервыйДокумент = Истина;
	
	Для каждого СсылкаОбъекта Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", СсылкаОбъекта);
		Запрос.Текст = ПолучитьТекстПросроченногоЗапроса(ДтКт);
		ДатаДокументаИнветаризации = КонецДня(СсылкаОбъекта.Дата);
		Запрос.УстановитьПараметр("КонПериода", 		Новый Граница(ДатаДокументаИнветаризации, ВидГраницы.Включая));
		//Запрос.УстановитьПараметр("КонПериода1", 		Новый Граница(ДатаДокументаИнветаризации, ВидГраницы.Включая));
		
		ПакетЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		ВыборкаШапка = ПакетЗапросов[0].Выбрать();
		Если НЕ ВыборкаШапка.Следующий() Тогда
			Возврат ТабДокумент;
		КонецЕсли;
		//ДатаДокументаИнветаризации = КонецДня(ВыборкаШапка.Дата);
		
		
		Запрос.Текст = "		
		|ВЫБРАТЬ ПЕРВЫЕ 1	//0
		|	Инвентаризация.Дата КАК Дата,
		|	КОНЕЦПЕРИОДА(Инвентаризация.Дата, ДЕНЬ) КАК КонецПериода,
		|	Инвентаризация.Номер КАК Номер,
		|	Инвентаризация.Организация КАК Организация,
		|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
		|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
		|	Инвентаризация.ДокументОснованиеВид КАК ДокументОснованиеВид,
		|	Инвентаризация.ДокументОснованиеДата КАК ДокументОснованиеДата,
		|	Инвентаризация.ДокументОснованиеНомер КАК ДокументОснованиеНомер	//,
		//|	Инвентаризация.ИнвентаризационнаяКомиссия.(
		//|		ФИОПолные КАК ФизЛицо,
		//|		Председатель КАК Председатель
		//|	) КАК ИнвентаризационнаяКомиссия,
		//|	Инвентаризация.СчетаУчета.(
		//|		СчетУчета
		//|	)//,
		//|	Инвентаризация.Задолженность.(
		//|		ДебиторКредитор КАК Контрагент,
		//|		ВидЗадолженности,
		//|		СчетРасчетов,
		//|		Подтверждено,
		//|		НеПодтверждено,
		//|		ИстекСрокДавности,
		//|		ВИЛС_Договор КАК ДоговорКонтрагента
		//|	)
		|ПОМЕСТИТЬ Шапка
		|ИЗ 
		|	Документ.ИнвентаризацияРасчетов КАК Инвентаризация
		|ГДЕ
		|	Инвентаризация.Ссылка = &Ссылка
		//|УПОРЯДОЧИТЬ ПО
		//|	Инвентаризация.ИнвентаризационнаяКомиссия.НомерСтроки
		|";
		ВыборкаШапка = Запрос.Выполнить().Выбрать();
		Если НЕ ВыборкаШапка.Следующий() Тогда
			Возврат ТабДокумент;
		КонецЕсли;
		
		ДатаДокументаИнветаризации = КонецДня(ВыборкаШапка.Дата);
		
		Макет = ПолучитьМакет("ПФ_MXL_РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2");
		
		//ТабДокумент.НачатьАвтогруппировкуКолонок();
		Область = Макет.ПолучитьОбласть("Шапка|Тело");
		ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаШапка);
		Область.Параметры.Дата  				= Формат(ДатаДокументаИнветаризации, "ДФ=dd.MM.yyyy");
		Область.Параметры.ДатаВозникновенияЗ1М	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата возникновения просроченной ДЗ на %1.'"), Формат(НачалоМесяца(ДатаДокументаИнветаризации) -1,"ДФ=""дд.ММ.гг 'г.'"""));
		Область.Параметры.КонПериода2М 			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сумма просроченной ДЗ на %1 руб.'"), 			Формат(ДобавитьМесяц(НачалоМесяца(ДатаДокументаИнветаризации), -1) - 1,"ДФ=""дд.ММ.гг 'г.'"""));
		Область.Параметры.ОборотыПериода1М 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оплачено (погашено) в %1 руб.'"), 			Формат(НачалоМесяца(ДатаДокументаИнветаризации) - 1, "ДФ=""ММММ гг 'г.'"""));
		Область.Параметры.КонПериода1М 			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сумма просроченной ДЗ на %1 руб.'"), 			Формат(НачалоМесяца(ДатаДокументаИнветаризации) - 1, "ДФ=""дд.ММ.гг 'г.'"""));
		ТабДокумент.Вывести(Область);
		ТабДокумент.ФиксацияСверху = 5;
		
		ТабДокумент.НачатьГруппуКолонок("По срокам 1 месяц", Ложь); 
		Область = Макет.ПолучитьОбласть("Шапка|КонПериода1МПоСрокам");
		Область.Параметры.КонПериода1МПоСрокам	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ДЗ просроченная по срокам на %1,  в т.ч.:'"), Формат(НачалоМесяца(ДатаДокументаИнветаризации) - 1, "ДФ=""дд.ММ.гг 'г.'"""));
		ТабДокумент.Присоединить(Область, 1, "По срокам 1 месяц", Ложь);
		ТабДокумент.ЗакончитьГруппуКолонок();
		
		Область = Макет.ПолучитьОбласть("Шапка|Тело1");
		Область.Параметры.ОборотыПериодаТекМ 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оплачено (погашено) в %1 руб.'"), 			Формат(НачалоМесяца(ДатаДокументаИнветаризации), "ДФ=""ММММ гг 'г.'"""));
		Область.Параметры.Резерв	 			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Резерв по состоянию на %1 руб.'"), 			Формат(НачалоМесяца(ДатаДокументаИнветаризации) - 1, "ДФ=""дд.ММ.гг 'г.'"""));
		Область.Параметры.ДатаВозникновенияЗ	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата возникновения просроченной ДЗ на %1.'"), Формат(ДатаДокументаИнветаризации,"ДФ=""дд.ММ.гг 'г.'"""));
		ТабДокумент.Присоединить(Область,,, Истина);
		
		ТабДокумент.НачатьГруппуКолонок("По срокам на дату сдачи отчета", Ложь);
		Область = Макет.ПолучитьОбласть("Шапка|КонПериодаПоСрокам");
		Область.Параметры.КонПериодаПоСрокам	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ДЗ просроченная по срокам на %1,  в т.ч.:'"), Формат(ДатаДокументаИнветаризации, "ДФ=""дд.ММ.гг 'г.'"""));
		ТабДокумент.Присоединить(Область, 2, "По срокам на дату сдачи отчета", Ложь);     
		ТабДокумент.ЗакончитьГруппуКолонок();
		//ТабДокумент.ЗакончитьАвтогруппировкуКолонок();

		#ЕСЛИ КЛИЕНТ ТОГДА
			Состояние("Формируем справку");                              
		#КОНЕЦЕСЛИ
		
		НПП 					= 1;
		КонПериодаТекМИтого 	= 0;
		СуммаРезерва 			= 0;  
		СуммаРезерваИтого 		= 0; 
		Колонка11ЧИтого         = 0;
		Колонка12ЧИтого         = 0;
		Колонка13ЧИтого         = 0;
		Колонка14ЧИтого         = 0;
		Колонка15ЧИтого         = 0;
		Колонка17ЧИтого         = 0;
		СуммаРезерваНУЧ         = 0;
		СуммаРезерваНУЧИтого    = 0;
		КонПериода2МИтого       = 0;
		ОборотыПериода1МИтого   = 0;
		КонПериода1МИтого       = 0;
		ОборотыПериодаТекМИтого = 0;
		
		Колонка22ЧИтого         = 0;
		Колонка23ЧИтого         = 0;
		Колонка24ЧИтого         = 0;
		Колонка25ЧИтого         = 0;
		Колонка26ЧИтого         = 0;
		
		КонПериодаТекМПоСчетуИтого  	= 0;
		//СуммаРезерва 					= 0;  
		СуммаРезерваПоСчетуИтого 		= 0; 
		Колонка11ЧПоСчетуИтого         	= 0;
		Колонка12ЧПоСчетуИтого         	= 0;
		Колонка13ЧПоСчетуИтого         	= 0;
		Колонка14ЧПоСчетуИтого         	= 0;
		Колонка15ЧПоСчетуИтого         	= 0;
		Колонка17ЧПоСчетуИтого         	= 0;
		//СуммаРезерваНУЧ         		= 0;
		СуммаРезерваНУЧПоСчетуИтого    	= 0;
		
		КонПериода2МПоСчетуИтого        = 0;
		ОборотыПериода1МПоСчетуИтого    = 0;
		КонПериода1МПоСчетуИтого        = 0;
		ОборотыПериодаТекМПоСчетуИтого  = 0;
		
		Колонка22ЧПоСчетуИтого         	= 0;
		Колонка23ЧПоСчетуИтого         	= 0;
		Колонка24ЧПоСчетуИтого         	= 0;
		Колонка25ЧПоСчетуИтого         	= 0;
		Колонка26ЧПоСчетуИтого         	= 0;
		
		ТЗПечать = ВыборкаШапка.Контрагенты.Выгрузить();
		
		ТЗПечать.Сортировать("СчетРасчетов, Контрагент, ДоговорКонтрагента, ВидЗадолженности");
		СтрокиТЗ = ТЗПечать.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская));
		
		ТЗСтрокПоСчету = Новый ТаблицаЗначений();
		ТЗСтрокПоСчету.Колонки.Добавить("Область1");
		ТЗСтрокПоСчету.Колонки.Добавить("Область2");
		ТЗСтрокПоСчету.Колонки.Добавить("Область3");
		ТЗСтрокПоСчету.Колонки.Добавить("Область4");
		ТекущийСчет = Неопределено;
		
		Для каждого СтрокаТЗ из СтрокиТЗ цикл
			//Если Не СтрокаТЗ.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда Продолжить; КонецЕсли;
			Если ТекущийСчет = Неопределено и ЗначениеЗаполнено(СтрокаТЗ.СчетРасчетов.Родитель.Родитель) Тогда
				ТекущийСчет = СтрокаТЗ.СчетРасчетов.Родитель.Родитель;
			ИначеЕсли ТекущийСчет = Неопределено и ЗначениеЗаполнено(СтрокаТЗ.СчетРасчетов.Родитель) Тогда
				ТекущийСчет = СтрокаТЗ.СчетРасчетов.Родитель;
			ИначеЕсли ТекущийСчет = Неопределено Тогда
				ТекущийСчет = СтрокаТЗ.СчетРасчетов;	
			ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.СчетРасчетов.Родитель.Родитель) и Не ТекущийСчет = СтрокаТЗ.СчетРасчетов.Родитель.Родитель
					или ЗначениеЗаполнено(СтрокаТЗ.СчетРасчетов.Родитель) и Не ТекущийСчет = СтрокаТЗ.СчетРасчетов.Родитель 
					или Не ЗначениеЗаполнено(СтрокаТЗ.СчетРасчетов.Родитель) и Не ТекущийСчет = СтрокаТЗ.СчетРасчетов Тогда
				Если ТекущийСчет.ЗапретитьИспользоватьВПроводках Тогда
					ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|Тело");
					ОбластьСтрока.Параметры.Итого			 	= "Итого по счету: " + ТекущийСчет;
					ОбластьСтрока.Параметры.КонПериода2М		= КонПериода2МПоСчетуИтого;
					ОбластьСтрока.Параметры.ОборотыПериода1М	= ОборотыПериода1МПоСчетуИтого;
					ОбластьСтрока.Параметры.КонПериода1М		= КонПериода1МПоСчетуИтого;
					ТабДокумент.Вывести(ОбластьСтрока);
					
					ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|КонПериода1МПоСрокам");
					ОбластьСтрока.Параметры.Колонка11Ч			= Колонка11ЧПоСчетуИтого;
					ОбластьСтрока.Параметры.Колонка12Ч			= Колонка12ЧПоСчетуИтого;
					ОбластьСтрока.Параметры.Колонка13Ч			= Колонка13ЧПоСчетуИтого;
					ОбластьСтрока.Параметры.Колонка14Ч			= Колонка14ЧПоСчетуИтого;
					ОбластьСтрока.Параметры.Колонка15Ч			= Колонка15ЧПоСчетуИтого;
					ТабДокумент.Присоединить(ОбластьСтрока, 1, "По срокам 1 месяц", Ложь);
					
					ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|Тело1");
					ОбластьСтрока.Параметры.СуммаРезерва		= СуммаРезерваПоСчетуИтого;
					ОбластьСтрока.Параметры.ОборотыПериодаТекМ	= ОборотыПериодаТекМПоСчетуИтого;
					ОбластьСтрока.Параметры.КонПериодаТекМ 		= КонПериодаТекМПоСчетуИтого;
					ТабДокумент.Присоединить(ОбластьСтрока,,, Истина);
					
					ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|КонПериодаПоСрокам");
					ОбластьСтрока.Параметры.Колонка22Ч			= Колонка22ЧПоСчетуИтого;
					ОбластьСтрока.Параметры.Колонка23Ч			= Колонка23ЧПоСчетуИтого;
					ОбластьСтрока.Параметры.Колонка24Ч			= Колонка24ЧПоСчетуИтого;
					ОбластьСтрока.Параметры.Колонка25Ч			= Колонка25ЧПоСчетуИтого;
					ОбластьСтрока.Параметры.Колонка26Ч			= Колонка26ЧПоСчетуИтого;
					ТабДокумент.Присоединить(ОбластьСтрока, 2, "По срокам на дату сдачи отчета", Ложь);
					
					ТабДокумент.НачатьГруппуСтрок("ИтогоПоСчету" + ТекущийСчет, Ложь);
				КонецЕсли; 	
				ГруппировкаВыводилась = Ложь;
				Для Инд = 0 По ТЗСтрокПоСчету.Количество() - 1 Цикл
					Если ТЗСтрокПоСчету[Инд].Область1.Параметры.Количество()
						+ ТЗСтрокПоСчету[Инд].Область2.Параметры.Количество()
						+ ТЗСтрокПоСчету[Инд].Область3.Параметры.Количество()
						+ ТЗСтрокПоСчету[Инд].Область4.Параметры.Количество() = 29
						и ГруппировкаВыводилась Тогда
						ТабДокумент.ЗакончитьГруппуСтрок();
						ГруппировкаВыводилась = Ложь;
					КонецЕсли; 
					ТабДокумент.Вывести(ТЗСтрокПоСчету[Инд].Область1);
					ТабДокумент.Присоединить(ТЗСтрокПоСчету[Инд].Область2, 1, "По срокам 1 месяц", Ложь);
					ТабДокумент.Присоединить(ТЗСтрокПоСчету[Инд].Область3,,, Истина);
					ТабДокумент.Присоединить(ТЗСтрокПоСчету[Инд].Область4, 2, "По срокам на дату сдачи отчета", Ложь);
					Если ТЗСтрокПоСчету[Инд].Область1.Параметры.Количество()
						+ ТЗСтрокПоСчету[Инд].Область2.Параметры.Количество()
						+ ТЗСтрокПоСчету[Инд].Область3.Параметры.Количество()
						+ ТЗСтрокПоСчету[Инд].Область4.Параметры.Количество() = 29
						и Не ГруппировкаВыводилась Тогда
						ТабДокумент.НачатьГруппуСтрок("ИтогоПодоговору" + ТЗСтрокПоСчету[Инд].Область1.Параметры.ДоговорКонтрагента, Ложь);
						ГруппировкаВыводилась = Истина;
					КонецЕсли;
				КонецЦикла;
				Если ГруппировкаВыводилась Тогда
					ТабДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекущийСчет) и ТекущийСчет.ЗапретитьИспользоватьВПроводках Тогда
					ТабДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;
				ТЗСтрокПоСчету.Очистить();
				КонПериодаТекМПоСчетуИтого 	= 0;
				СуммаРезерваПоСчетуИтого		= 0; 
				Колонка11ЧПоСчетуИтого         	= 0;
				Колонка12ЧПоСчетуИтого         	= 0;
				Колонка13ЧПоСчетуИтого         	= 0;
				Колонка14ЧПоСчетуИтого         	= 0;
				Колонка15ЧПоСчетуИтого         	= 0;
				Колонка17ЧПоСчетуИтого         	= 0;
				СуммаРезерваНУЧПоСчетуИтого    	= 0;
				КонПериода2МПоСчетуИтого        = 0;
				ОборотыПериода1МПоСчетуИтого    = 0;
				КонПериода1МПоСчетуИтого        = 0;
				ОборотыПериодаТекМПоСчетуИтого  = 0;
				Колонка22ЧПоСчетуИтого         	= 0;
				Колонка23ЧПоСчетуИтого         	= 0;
				Колонка24ЧПоСчетуИтого         	= 0;
				Колонка25ЧПоСчетуИтого         	= 0;
				Колонка26ЧПоСчетуИтого         	= 0;
				
				Если ЗначениеЗаполнено(СтрокаТЗ.СчетРасчетов.Родитель.Родитель) и Не ТекущийСчет = СтрокаТЗ.СчетРасчетов.Родитель.Родитель Тогда
					ТекущийСчет = СтрокаТЗ.СчетРасчетов.Родитель.Родитель;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.СчетРасчетов.Родитель) и Не ТекущийСчет = СтрокаТЗ.СчетРасчетов.Родитель Тогда
					ТекущийСчет = СтрокаТЗ.СчетРасчетов.Родитель;
				ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЗ.СчетРасчетов.Родитель) и Не ТекущийСчет = СтрокаТЗ.СчетРасчетов Тогда
					ТекущийСчет = СтрокаТЗ.СчетРасчетов;
				КонецЕсли;	
			КонецЕсли;
			
			//КонПериодаТекМ 							= СтрокаТЗ.Подтверждено + СтрокаТЗ.НеПодтверждено;
			
			ДанныеДляПросроченной_1 = ПолучитьДанныеСтрокиДляПросроченной_1_180523(ДатаДокументаИнветаризации, СтрокаТЗ.Контрагент, СтрокаТЗ.СчетРасчетов, ВыборкаШапка.Организация, СтрокаТЗ.ДоговорКонтрагента, "Дт");
			
			ДанныеДляПросроченной_2 = ПолучитьДанныеСтрокиДляПросроченной_2_180523(Новый Граница(ДатаДокументаИнветаризации, ВидГраницы.Включая), Новый Граница(НачалоМесяца(ДатаДокументаИнветаризации) - 1, ВидГраницы.Включая), СтрокаТЗ.Контрагент, СтрокаТЗ.СчетРасчетов, ВыборкаШапка.Организация, СтрокаТЗ.ДоговорКонтрагента, "Дт", ДанныеДляПросроченной_1);
			
			ТЗДляСтруктуры = ДанныеДляПросроченной_2.ТЗДляСтруктуры;
			КоличествоСтрокТЗДляСтруктуры = ТЗДляСтруктуры.Количество();
			Если КоличествоСтрокТЗДляСтруктуры = 0 Тогда Продолжить; КонецЕсли; 
			НПП = НПП + 1;
			СведенияОбКонтрагенте = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СтрокаТЗ.Контрагент, ДатаДокументаИнветаризации);
			КонтраНаим = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование, ЮридическийАдрес, Телефоны");
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка|Тело");
			ОбластьСтрока.Параметры.Заполнить(ДанныеДляПросроченной_1);
			ОбластьСтрока.Параметры.Заполнить(ДанныеДляПросроченной_2);
			ОбластьСтрока.Параметры.НаименованиеСтр = КонтраНаим;
			ОбластьСтрока.Параметры.Счет = СтрокаТЗ.СчетРасчетов;
			ОбластьСтрока.Параметры.НомерДоговора = ?(ЗначениеЗаполнено(СтрокаТЗ.ДоговорКонтрагента.Номер), СтрокаТЗ.ДоговорКонтрагента.Номер, СтрокаТЗ.ДоговорКонтрагента.Наименование);
			ОбластьСтрока.Параметры.ДатаДоговора = СтрокаТЗ.ДоговорКонтрагента.Дата;
			ОбластьСтрока.Параметры.ИНН = СтрокаТЗ.Контрагент.ИНН;
			ОбластьСтрока.Параметры.КонПериода2М 	= ТЗДляСтруктуры.Итог("Колонка01");
			ОбластьСтрока.Параметры.КонПериода1М 	= ТЗДляСтруктуры.Итог("Колонка11") 
													+ ТЗДляСтруктуры.Итог("Колонка12") 
													+ ТЗДляСтруктуры.Итог("Колонка13") 
													+ ТЗДляСтруктуры.Итог("Колонка14") 
													+ ТЗДляСтруктуры.Итог("Колонка15");
			
			ОбластьСтрока1 = Макет.ПолучитьОбласть("Строка|КонПериода1МПоСрокам");
			ОбластьСтрока1.Параметры.Колонка11Ч = ТЗДляСтруктуры.Итог("Колонка11");
			ОбластьСтрока1.Параметры.Колонка12Ч = ТЗДляСтруктуры.Итог("Колонка12");
			ОбластьСтрока1.Параметры.Колонка13Ч = ТЗДляСтруктуры.Итог("Колонка13");
			ОбластьСтрока1.Параметры.Колонка14Ч = ТЗДляСтруктуры.Итог("Колонка14");
			ОбластьСтрока1.Параметры.Колонка15Ч = ТЗДляСтруктуры.Итог("Колонка15");
			//Для каждого СтрТЗ Из ТЗДляСтруктуры Цикл
			//	ОбластьСтрока1.Параметры.Колонка11Ч = ОбластьСтрока1.Параметры.Колонка11Ч + СтрТЗ.Колонка11;
			//	ОбластьСтрока1.Параметры.Колонка12Ч = ОбластьСтрока1.Параметры.Колонка12Ч + СтрТЗ.Колонка12;
			//	ОбластьСтрока1.Параметры.Колонка13Ч = ОбластьСтрока1.Параметры.Колонка13Ч + СтрТЗ.Колонка13;
			//	ОбластьСтрока1.Параметры.Колонка14Ч = ОбластьСтрока1.Параметры.Колонка14Ч + СтрТЗ.Колонка14;
			//	ОбластьСтрока1.Параметры.Колонка15Ч = ОбластьСтрока1.Параметры.Колонка15Ч + СтрТЗ.Колонка15;
			//КонецЦикла; 
			
			ОбластьСтрока2 = Макет.ПолучитьОбласть("Строка|Тело1"); 
			ОбластьСтрока2.Параметры.Заполнить(ДанныеДляПросроченной_1);
			ОбластьСтрока2.Параметры.Заполнить(ДанныеДляПросроченной_2);
			ОбластьСтрока2.Параметры.ДатаПогашенияДЗИзКарточкиДоговора 	= СтрокаТЗ.ДоговорКонтрагента.СрокПогашенияЗадолженности;
			ОбластьСтрока2.Параметры.КонПериодаТекМ = ТЗДляСтруктуры.Итог("Колонка22") 
													+ ТЗДляСтруктуры.Итог("Колонка23") 
													+ ТЗДляСтруктуры.Итог("Колонка24") 
													+ ТЗДляСтруктуры.Итог("Колонка25") 
													+ ТЗДляСтруктуры.Итог("Колонка26");
			
			ОбластьСтрока3 = Макет.ПолучитьОбласть("Строка|КонПериодаПоСрокам");
			ОбластьСтрока3.Параметры.Колонка22Ч = ТЗДляСтруктуры.Итог("Колонка22");
			ОбластьСтрока3.Параметры.Колонка23Ч = ТЗДляСтруктуры.Итог("Колонка23");
			ОбластьСтрока3.Параметры.Колонка24Ч = ТЗДляСтруктуры.Итог("Колонка24");
			ОбластьСтрока3.Параметры.Колонка25Ч = ТЗДляСтруктуры.Итог("Колонка25");
			ОбластьСтрока3.Параметры.Колонка26Ч = ТЗДляСтруктуры.Итог("Колонка26");
			//Для каждого СтрТЗ Из ТЗДляСтруктуры Цикл
			//	ОбластьСтрока3.Параметры.Колонка22Ч = ОбластьСтрока3.Параметры.Колонка22Ч + СтрТЗ.Колонка22;
			//	ОбластьСтрока3.Параметры.Колонка23Ч = ОбластьСтрока3.Параметры.Колонка23Ч + СтрТЗ.Колонка23;
			//	ОбластьСтрока3.Параметры.Колонка24Ч = ОбластьСтрока3.Параметры.Колонка24Ч + СтрТЗ.Колонка24;
			//	ОбластьСтрока3.Параметры.Колонка25Ч = ОбластьСтрока3.Параметры.Колонка25Ч + СтрТЗ.Колонка25;
			//	ОбластьСтрока3.Параметры.Колонка26Ч = ОбластьСтрока3.Параметры.Колонка26Ч + СтрТЗ.Колонка26;
			//КонецЦикла; 
			
			Если 	Не ?(ОбластьСтрока. Параметры.КонПериода2М  		= Неопределено, 0, ОбластьСтрока. Параметры.КонПериода2М) = 0 
				или Не ?(ОбластьСтрока. Параметры.ОборотыПериода1М  	= Неопределено, 0, ОбластьСтрока. Параметры.ОборотыПериода1М) = 0
				или Не ?(ОбластьСтрока. Параметры.КонПериода1М  		= Неопределено, 0, ОбластьСтрока. Параметры.КонПериода1М) = 0
				или Не ?(ОбластьСтрока1.Параметры.Колонка11Ч  			= Неопределено, 0, ОбластьСтрока1.Параметры.Колонка11Ч) = 0
				или Не ?(ОбластьСтрока1.Параметры.Колонка12Ч  			= Неопределено, 0, ОбластьСтрока1.Параметры.Колонка12Ч) = 0
				или Не ?(ОбластьСтрока1.Параметры.Колонка13Ч  			= Неопределено, 0, ОбластьСтрока1.Параметры.Колонка13Ч) = 0
				или Не ?(ОбластьСтрока1.Параметры.Колонка14Ч  			= Неопределено, 0, ОбластьСтрока1.Параметры.Колонка14Ч) = 0
				или Не ?(ОбластьСтрока1.Параметры.Колонка15Ч  			= Неопределено, 0, ОбластьСтрока1.Параметры.Колонка15Ч) = 0
				или Не ?(ОбластьСтрока2.Параметры.СуммаРезерва  		= Неопределено, 0, ОбластьСтрока2.Параметры.СуммаРезерва) = 0
				или Не ?(ОбластьСтрока2.Параметры.ОборотыПериодаТекМ  	= Неопределено, 0, ОбластьСтрока2.Параметры.ОборотыПериодаТекМ) = 0
				или Не ?(ОбластьСтрока2.Параметры.КонПериодаТекМ  		= Неопределено, 0, ОбластьСтрока2.Параметры.КонПериодаТекМ) = 0
				или Не ?(ОбластьСтрока3.Параметры.Колонка22Ч  			= Неопределено, 0, ОбластьСтрока3.Параметры.Колонка22Ч) = 0
				или Не ?(ОбластьСтрока3.Параметры.Колонка23Ч  			= Неопределено, 0, ОбластьСтрока3.Параметры.Колонка23Ч) = 0
				или Не ?(ОбластьСтрока3.Параметры.Колонка24Ч  			= Неопределено, 0, ОбластьСтрока3.Параметры.Колонка24Ч) = 0
				или Не ?(ОбластьСтрока3.Параметры.Колонка25Ч  			= Неопределено, 0, ОбластьСтрока3.Параметры.Колонка25Ч) = 0
				или Не ?(ОбластьСтрока3.Параметры.Колонка26Ч  			= Неопределено, 0, ОбластьСтрока3.Параметры.Колонка26Ч) = 0
				Тогда
				ТЗСтрокаПоСчету = ТЗСтрокПоСчету.Добавить();
				ТЗСтрокаПоСчету.Область1 = ОбластьСтрока;
				ТЗСтрокаПоСчету.Область2 = ОбластьСтрока1;
				ТЗСтрокаПоСчету.Область3 = ОбластьСтрока2;
				ТЗСтрокаПоСчету.Область4 = ОбластьСтрока3;
			Иначе
				Продолжить;
			КонецЕсли; 
				
			Колонка11ЧИтого 		= Колонка11ЧИтого 			+ ОбластьСтрока1.Параметры.Колонка11Ч;
			Колонка11ЧПоСчетуИтого 	= Колонка11ЧПоСчетуИтого 	+ ОбластьСтрока1.Параметры.Колонка11Ч;
			Колонка12ЧИтого 		= Колонка12ЧИтого 			+ ОбластьСтрока1.Параметры.Колонка12Ч;	
			Колонка12ЧПоСчетуИтого 	= Колонка12ЧПоСчетуИтого 	+ ОбластьСтрока1.Параметры.Колонка12Ч;	
			Колонка13ЧИтого 		= Колонка13ЧИтого 			+ ОбластьСтрока1.Параметры.Колонка13Ч;
			Колонка13ЧПоСчетуИтого 	= Колонка13ЧПоСчетуИтого 	+ ОбластьСтрока1.Параметры.Колонка13Ч;
			Колонка14ЧИтого 		= Колонка14ЧИтого 			+ ОбластьСтрока1.Параметры.Колонка14Ч;
			Колонка14ЧПоСчетуИтого 	= Колонка14ЧПоСчетуИтого 	+ ОбластьСтрока1.Параметры.Колонка14Ч;
			Колонка15ЧИтого 		= Колонка15ЧИтого 			+ ОбластьСтрока1.Параметры.Колонка15Ч;
			Колонка15ЧПоСчетуИтого 	= Колонка15ЧПоСчетуИтого 	+ ОбластьСтрока1.Параметры.Колонка15Ч;	
				
			Колонка22ЧИтого 		= Колонка22ЧИтого 			+ ОбластьСтрока3.Параметры.Колонка22Ч;
			Колонка22ЧПоСчетуИтого 	= Колонка22ЧПоСчетуИтого 	+ ОбластьСтрока3.Параметры.Колонка22Ч;
			Колонка23ЧИтого 		= Колонка23ЧИтого 			+ ОбластьСтрока3.Параметры.Колонка23Ч;	
			Колонка23ЧПоСчетуИтого 	= Колонка23ЧПоСчетуИтого 	+ ОбластьСтрока3.Параметры.Колонка23Ч;	
			Колонка24ЧИтого 		= Колонка24ЧИтого 			+ ОбластьСтрока3.Параметры.Колонка24Ч;
			Колонка24ЧПоСчетуИтого 	= Колонка24ЧПоСчетуИтого 	+ ОбластьСтрока3.Параметры.Колонка24Ч;
			Колонка25ЧИтого 		= Колонка25ЧИтого 			+ ОбластьСтрока3.Параметры.Колонка25Ч;
			Колонка25ЧПоСчетуИтого 	= Колонка25ЧПоСчетуИтого 	+ ОбластьСтрока3.Параметры.Колонка25Ч;
			Колонка26ЧИтого 		= Колонка26ЧИтого 			+ ОбластьСтрока3.Параметры.Колонка26Ч;
			Колонка26ЧПоСчетуИтого 	= Колонка26ЧПоСчетуИтого 	+ ОбластьСтрока3.Параметры.Колонка26Ч;	
			
			//Если КоличествоСтрокТЗДляСтруктуры > 1 Тогда
			Для каждого СтрокаТЗДляСтруктуры Из ТЗДляСтруктуры Цикл
				ТЗСтрокаПоСчету = ТЗСтрокПоСчету.Добавить();
				ОбластьСтрокаД = Макет.ПолучитьОбласть("СтрокаДетальная|Тело");
				ОбластьСтрокаД.Параметры.ЗаЧто1М		= СтрокаТЗДляСтруктуры.ЗаЧто1М;
				ОбластьСтрокаД.Параметры.ДатаДолга1М	= СтрокаТЗДляСтруктуры.ДатаДок1М;
				ОбластьСтрокаД.Параметры.Регистратор1М	= СтрокаТЗДляСтруктуры.Регистратор1М;
				ТЗСтрокаПоСчету.Область1 = ОбластьСтрокаД; 
								
				ОбластьСтрокаД = Макет.ПолучитьОбласть("СтрокаДетальная|КонПериода1МПоСрокам");
				ОбластьСтрокаД.Параметры.Колонка11Ч 	= СтрокаТЗДляСтруктуры.Колонка11;
				ОбластьСтрокаД.Параметры.Колонка12Ч 	= СтрокаТЗДляСтруктуры.Колонка12;
				ОбластьСтрокаД.Параметры.Колонка13Ч 	= СтрокаТЗДляСтруктуры.Колонка13;
				ОбластьСтрокаД.Параметры.Колонка14Ч 	= СтрокаТЗДляСтруктуры.Колонка14;
				ОбластьСтрокаД.Параметры.Колонка15Ч 	= СтрокаТЗДляСтруктуры.Колонка15;
				ТЗСтрокаПоСчету.Область2 = ОбластьСтрокаД; 
				
				ОбластьСтрокаД = Макет.ПолучитьОбласть("СтрокаДетальная|Тело1");
				ОбластьСтрокаД.Параметры.ЗаЧто			= СтрокаТЗДляСтруктуры.ЗаЧто;
				ОбластьСтрокаД.Параметры.ДатаДолга 		= СтрокаТЗДляСтруктуры.ДатаДок;
				ОбластьСтрокаД.Параметры.Регистратор 	= СтрокаТЗДляСтруктуры.Регистратор;
				ТЗСтрокаПоСчету.Область3 = ОбластьСтрокаД; 
				
				ОбластьСтрокаД = Макет.ПолучитьОбласть("СтрокаДетальная|КонПериодаПоСрокам");
				ОбластьСтрокаД.Параметры.Колонка22Ч 	= СтрокаТЗДляСтруктуры.Колонка22;
				ОбластьСтрокаД.Параметры.Колонка23Ч 	= СтрокаТЗДляСтруктуры.Колонка23;
				ОбластьСтрокаД.Параметры.Колонка24Ч 	= СтрокаТЗДляСтруктуры.Колонка24;
				ОбластьСтрокаД.Параметры.Колонка25Ч 	= СтрокаТЗДляСтруктуры.Колонка25;
				ОбластьСтрокаД.Параметры.Колонка26Ч 	= СтрокаТЗДляСтруктуры.Колонка26;
				ТЗСтрокаПоСчету.Область4 = ОбластьСтрокаД; 
			КонецЦикла;
			//КонецЕсли; 
			
			КонПериодаТекМИтого 			= КонПериодаТекМИтого 			+ ОбластьСтрока2.Параметры.КонПериодаТекМ; 
			СуммаРезерваИтого 				= СуммаРезерваИтого 			+ СуммаРезерва;
			КонПериода2МИтого          		= КонПериода2МИтого 			+ ОбластьСтрока.Параметры.КонПериода2М;
			ОборотыПериода1МИтого          	= ОборотыПериода1МИтого 		+ ДанныеДляПросроченной_1.ОборотыПериода1М;
			КонПериода1МИтого          		= КонПериода1МИтого 			+ ОбластьСтрока.Параметры.КонПериода1М;
			ОборотыПериодаТекМИтого         = ОборотыПериодаТекМИтого 		+ ДанныеДляПросроченной_1.ОборотыПериодаТекМ;
			КонПериодаТекМПоСчетуИтого 		= КонПериодаТекМПоСчетуИтого 	+ ОбластьСтрока2.Параметры.КонПериодаТекМ; 
			СуммаРезерваПоСчетуИтого 		= СуммаРезерваПоСчетуИтого 		+ СуммаРезерва;
			КонПериода2МПоСчетуИтого 		= КонПериода2МПоСчетуИтого 		+ ОбластьСтрока.Параметры.КонПериода2М;
			ОборотыПериода1МПоСчетуИтого 	= ОборотыПериода1МПоСчетуИтого 	+ ДанныеДляПросроченной_1.ОборотыПериода1М;
			КонПериода1МПоСчетуИтого 		= КонПериода1МПоСчетуИтого 		+ ОбластьСтрока.Параметры.КонПериода1М;
			ОборотыПериодаТекМПоСчетуИтого 		= ОборотыПериодаТекМПоСчетуИтого 	+ ДанныеДляПросроченной_1.ОборотыПериодаТекМ;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекущийСчет) и ТекущийСчет.ЗапретитьИспользоватьВПроводках Тогда
			ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|Тело");
			ОбластьСтрока.Параметры.Итого			 	= "Итого по счету: " + ТекущийСчет;
			ОбластьСтрока.Параметры.КонПериода2М		= КонПериода2МПоСчетуИтого;
			ОбластьСтрока.Параметры.ОборотыПериода1М	= ОборотыПериода1МПоСчетуИтого;
			ОбластьСтрока.Параметры.КонПериода1М		= КонПериода1МПоСчетуИтого;
			ТабДокумент.Вывести(ОбластьСтрока);
			
			ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|КонПериода1МПоСрокам");
			ОбластьСтрока.Параметры.Колонка11Ч			= Колонка11ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка12Ч			= Колонка12ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка13Ч			= Колонка13ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка14Ч			= Колонка14ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка15Ч			= Колонка15ЧПоСчетуИтого;
			ТабДокумент.Присоединить(ОбластьСтрока, 1, "По срокам 1 месяц", Ложь);
			
			ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|Тело1");
			ОбластьСтрока.Параметры.СуммаРезерва		= СуммаРезерваПоСчетуИтого;
			ОбластьСтрока.Параметры.ОборотыПериодаТекМ	= ОборотыПериодаТекМПоСчетуИтого;
			ОбластьСтрока.Параметры.КонПериодаТекМ 		= КонПериодаТекМПоСчетуИтого;
			ТабДокумент.Присоединить(ОбластьСтрока,,, Истина);
			
			ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|КонПериодаПоСрокам");
			ОбластьСтрока.Параметры.Колонка22Ч			= Колонка22ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка23Ч			= Колонка23ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка24Ч			= Колонка24ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка25Ч			= Колонка25ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка26Ч			= Колонка26ЧПоСчетуИтого;
			ТабДокумент.Присоединить(ОбластьСтрока, 2, "По срокам на дату сдачи отчета", Ложь);
			
			ТабДокумент.НачатьГруппуСтрок("ИтогоПоСчету" + ТекущийСчет, Ложь);
		КонецЕсли; 	
		ГруппировкаВыводилась = Ложь;
		Для Инд = 0 По ТЗСтрокПоСчету.Количество() - 1 Цикл
			Если ТЗСтрокПоСчету[Инд].Область1.Параметры.Количество()
				+ ТЗСтрокПоСчету[Инд].Область2.Параметры.Количество()
				+ ТЗСтрокПоСчету[Инд].Область3.Параметры.Количество()
				+ ТЗСтрокПоСчету[Инд].Область4.Параметры.Количество() = 29
				и ГруппировкаВыводилась Тогда
				ТабДокумент.ЗакончитьГруппуСтрок();
				ГруппировкаВыводилась = Ложь;
			КонецЕсли; 
			ТабДокумент.Вывести(ТЗСтрокПоСчету[Инд].Область1);
			ТабДокумент.Присоединить(ТЗСтрокПоСчету[Инд].Область2, 1, "По срокам 1 месяц", Ложь);
			ТабДокумент.Присоединить(ТЗСтрокПоСчету[Инд].Область3,,, Истина);
			ТабДокумент.Присоединить(ТЗСтрокПоСчету[Инд].Область4, 2, "По срокам на дату сдачи отчета", Ложь);
			Если ТЗСтрокПоСчету[Инд].Область1.Параметры.Количество()
				+ ТЗСтрокПоСчету[Инд].Область2.Параметры.Количество()
				+ ТЗСтрокПоСчету[Инд].Область3.Параметры.Количество()
				+ ТЗСтрокПоСчету[Инд].Область4.Параметры.Количество() = 29
				и Не ГруппировкаВыводилась Тогда
				ТабДокумент.НачатьГруппуСтрок("ИтогоПодоговору" + ТЗСтрокПоСчету[Инд].Область1.Параметры.ДоговорКонтрагента, Ложь);
				ГруппировкаВыводилась = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ГруппировкаВыводилась Тогда
			ТабДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущийСчет) и ТекущийСчет.ЗапретитьИспользоватьВПроводках Тогда
			ТабДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;
		
		ОблИтого = Макет.ПолучитьОбласть("Итого|Тело");
		ОблИтого.Параметры.КонПериода2М 	 	= формат(КонПериода2МИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.ОборотыПериода1М 	= формат(ОборотыПериода1МИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.КонПериода1М 	 	= формат(КонПериода1МИтого, "ЧЦ=15; ЧДЦ=2");
		ТабДокумент.Вывести(ОблИтого);
		
		ОблИтого = Макет.ПолучитьОбласть("Итого|КонПериода1МПоСрокам");
		ОблИтого.Параметры.Колонка11Ч 	 	 	= формат(Колонка11ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка12Ч 	 	 	= формат(Колонка12ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка13Ч 	 	 	= формат(Колонка13ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка14Ч 	 	 	= формат(Колонка14ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка15Ч 	 	 	= формат(Колонка15ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ТабДокумент.Присоединить(ОблИтого, 1, "По срокам 1 месяц", Ложь);
		
		ОблИтого = Макет.ПолучитьОбласть("Итого|Тело1");
		ОблИтого.Параметры.СуммаРезерва 	 	= формат(СуммаРезерваИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.ОборотыПериодаТекМ 	= формат(ОборотыПериодаТекМИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.КонПериодаТекМ 		= формат(КонПериодаТекМИтого, "ЧЦ=15; ЧДЦ=2");
		ТабДокумент.Присоединить(ОблИтого,,, Истина);
		
		ОблИтого = Макет.ПолучитьОбласть("Итого|КонПериодаПоСрокам");
		ОблИтого.Параметры.Колонка22Ч 	 	 	= формат(Колонка22ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка23Ч 	 	 	= формат(Колонка23ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка24Ч 	 	 	= формат(Колонка24ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка25Ч 	 	 	= формат(Колонка25ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка26Ч 	 	 	= формат(Колонка26ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ТабДокумент.Присоединить(ОблИтого, 2, "По срокам на дату сдачи отчета", Ложь);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаОбъекта);
	КонецЦикла;
	Возврат ТабДокумент;
КонецФункции // ПечатьРеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180523()

Функция ПолучитьДанныеСтрокиДляПросроченной_1_180523(Знач КонПериода, Знач Контрагент, Знач Счет, Знач Организация, Знач ДоговорКонтрагента, Знач ДтКт = "Дт")
	СтруктураСтроки = новый Структура;
	
    СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов;
    Запрос = Новый Запрос;
	Если Счет = СчетУчета Тогда 
		Запрос.Текст =         	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СУММА(ХозрасчетныйОбороты.КонПериода2МДт) КАК КонПериода2МДт,
		|	СУММА(ХозрасчетныйОбороты.КонПериода2МКт) КАК КонПериода2МКт,
		|	СУММА(ХозрасчетныйОбороты.ОборотыПериода1МКт) КАК ОборотыПериода1МКт,
		|	СУММА(ХозрасчетныйОбороты.ОборотыПериода1МДт) КАК ОборотыПериода1МДт,
		|	СУММА(ХозрасчетныйОбороты.КонПериода1МДт) КАК КонПериода1МДт,
		|	СУММА(ХозрасчетныйОбороты.КонПериода1МКт) КАК КонПериода1МКт,
		|	СУММА(ХозрасчетныйОбороты.ОборотыПериодаКт) КАК ОборотыПериодаКт,
		|	СУММА(ХозрасчетныйОбороты.ОборотыПериодаДт) КАК ОборотыПериодаДт,
		|	СУММА(ХозрасчетныйОбороты.КонПериодаДт) КАК КонПериодаДт,
		|	СУММА(ХозрасчетныйОбороты.КонПериодаКт) КАК КонПериодаКт,
		|	ЗначенияСвойств.Значение КАК Мероприятие
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК КонПериода2МДт,
		|		СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК КонПериода2МКт,
		|		СУММА(0) КАК ОборотыПериода1МКт,
		|		СУММА(0) КАК ОборотыПериода1МДт,
		|		СУММА(0) КАК КонПериода1МДт,
		|		СУММА(0) КАК КонПериода1МКт,
		|		СУММА(0) КАК ОборотыПериодаКт,
		|		СУММА(0) КАК ОборотыПериодаДт,
		|		СУММА(0) КАК КонПериодаДт,
		|		СУММА(0) КАК КонПериодаКт
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&КонПериода2М,
		|				Счет = &Счет,
		|				,
		|				Субконто1 = &Контрагент
		|					И Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(ХозрасчетныйОстатки.СуммаОстатокДт),
		|		СУММА(ХозрасчетныйОстатки.СуммаОстатокКт),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0)
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&КонПериода1М,
		|				Счет = &Счет,
		|				,
		|				Субконто1 = &Контрагент
		|					И Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(ХозрасчетныйОстатки.СуммаОстатокДт),
		|		СУММА(ХозрасчетныйОстатки.СуммаОстатокКт)
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&КонПериода,
		|				Счет = &Счет,
		|				,
		|				Субконто1 = &Контрагент
		|					И Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(ХозрасчетныйОбороты.СуммаОборотКт),
		|		СУММА(ХозрасчетныйОбороты.СуммаОборотДт),
		|		СУММА(0),
		|		СУММА(0)
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				&НачПериода,
		|				&КонПериода,
		|				Авто,
		|				Счет = &Счет,
		|				,
		|				Субконто1 = &Контрагент
		|					И Организация = &Организация,,
		//|				ВЫБОР
		//|					КОГДА &УСчетаЕстьРодитель
		//|						ТОГДА НЕ &СчетРодитель = КорСчет.Родитель
		//|					ИНАЧЕ ИСТИНА
		//|				КОНЕЦ,
		|				) КАК ХозрасчетныйОбороты
		|	ГДЕ
		|		НЕ(ХозрасчетныйОбороты.Счет = ХозрасчетныйОбороты.КорСчет
		|					И ХозрасчетныйОбороты.Субконто1 = ХозрасчетныйОбороты.КорСубконто1
		|					И ХозрасчетныйОбороты.Субконто2 = ХозрасчетныйОбороты.КорСубконто2
		|					И ХозрасчетныйОбороты.Субконто3 = ХозрасчетныйОбороты.КорСубконто3)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(ХозрасчетныйОбороты.СуммаОборотКт),
		|		СУММА(ХозрасчетныйОбороты.СуммаОборотДт),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0)
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				&НачПериода1М,
		|				&КонПериода1М,
		|				Авто,
		|				Счет = &Счет,
		|				,
		|				Субконто1 = &Контрагент
		|					И Организация = &Организация,,
		//|				ВЫБОР
		//|					КОГДА &УСчетаЕстьРодитель
		//|						ТОГДА НЕ &СчетРодитель = КорСчет.Родитель
		//|					ИНАЧЕ ИСТИНА
		//|				КОНЕЦ,
		|				) КАК ХозрасчетныйОбороты
		|	ГДЕ
		|		НЕ(ХозрасчетныйОбороты.Счет = ХозрасчетныйОбороты.КорСчет
		|					И ХозрасчетныйОбороты.Субконто1 = ХозрасчетныйОбороты.КорСубконто1
		|					И ХозрасчетныйОбороты.Субконто2 = ХозрасчетныйОбороты.КорСубконто2
		|					И ХозрасчетныйОбороты.Субконто3 = ХозрасчетныйОбороты.КорСубконто3)) КАК ХозрасчетныйОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойств
		|		ПО (ЗначенияСвойств.Объект = &Договор)
		|			И (ЗначенияСвойств.Свойство = &Свойство)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияСвойств.Значение";
		
	Иначе	
		Запрос.Текст =                                                     
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СУММА(ХозрасчетныйОбороты.КонПериода2МДт) КАК КонПериода2МДт,
		|	СУММА(ХозрасчетныйОбороты.КонПериода2МКт) КАК КонПериода2МКт,
		|	СУММА(ХозрасчетныйОбороты.ОборотыПериода1МКт) КАК ОборотыПериода1МКт,
		|	СУММА(ХозрасчетныйОбороты.ОборотыПериода1МДт) КАК ОборотыПериода1МДт,
		|	СУММА(ХозрасчетныйОбороты.КонПериода1МДт) КАК КонПериода1МДт,
		|	СУММА(ХозрасчетныйОбороты.КонПериода1МКт) КАК КонПериода1МКт,
		|	СУММА(ХозрасчетныйОбороты.ОборотыПериодаКт) КАК ОборотыПериодаКт,
		|	СУММА(ХозрасчетныйОбороты.ОборотыПериодаДт) КАК ОборотыПериодаДт,
		|	СУММА(ХозрасчетныйОбороты.КонПериодаДт) КАК КонПериодаДт,
		|	СУММА(ХозрасчетныйОбороты.КонПериодаКт) КАК КонПериодаКт,
		|	ЗначенияСвойств.Значение КАК Мероприятие
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК КонПериода2МДт,
		|		СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК КонПериода2МКт,
		|		СУММА(0) КАК ОборотыПериода1МКт,
		|		СУММА(0) КАК ОборотыПериода1МДт,
		|		СУММА(0) КАК КонПериода1МДт,
		|		СУММА(0) КАК КонПериода1МКт,
		|		СУММА(0) КАК ОборотыПериодаКт,
		|		СУММА(0) КАК ОборотыПериодаДт,
		|		СУММА(0) КАК КонПериодаДт,
		|		СУММА(0) КАК КонПериодаКт
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&КонПериода2М,
		|				Счет = &Счет,
		|				,
		|				Субконто1 = &Контрагент
		|					И Субконто2 = &Договор
		|					И Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(ХозрасчетныйОстатки.СуммаОстатокДт),
		|		СУММА(ХозрасчетныйОстатки.СуммаОстатокКт),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0)
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&КонПериода1М,
		|				Счет = &Счет,
		|				,
		|				Субконто1 = &Контрагент
		|					И Субконто2 = &Договор
		|					И Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(ХозрасчетныйОбороты.СуммаОборотКт),
		|		СУММА(ХозрасчетныйОбороты.СуммаОборотДт),
		|		СУММА(0),
		|		СУММА(0)
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				&НачПериода,
		|				&КонПериода,
		|				Авто,
		|				Счет = &Счет,
		|				,
		|				Субконто1 = &Контрагент
		|					И Субконто2 = &Договор
		|					И Организация = &Организация,
		|				,
		|				) КАК ХозрасчетныйОбороты
		|	ГДЕ
		|		НЕ(ХозрасчетныйОбороты.Счет = ХозрасчетныйОбороты.КорСчет
		|					И ХозрасчетныйОбороты.Субконто1 = ХозрасчетныйОбороты.КорСубконто1
		|					И ХозрасчетныйОбороты.Субконто2 = ХозрасчетныйОбороты.КорСубконто2
		|					И ХозрасчетныйОбороты.Субконто3 = ХозрасчетныйОбороты.КорСубконто3)
		|	
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(ХозрасчетныйОстатки.СуммаОстатокДт),
		|		СУММА(ХозрасчетныйОстатки.СуммаОстатокКт)
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&КонПериода,
		|				Счет = &Счет,
		|				,
		|				Субконто1 = &Контрагент
		|					И Субконто2 = &Договор
		|					И Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(ХозрасчетныйОбороты.СуммаОборотКт),
		|		СУММА(ХозрасчетныйОбороты.СуммаОборотДт),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0),
		|		СУММА(0)
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				&НачПериода1М,
		|				&КонПериода1М,
		|				Авто,
		|				Счет = &Счет,
		|				,
		|				Субконто1 = &Контрагент
		|					И Субконто2 = &Договор
		|					И Организация = &Организация,
		|				,
		|				) КАК ХозрасчетныйОбороты
		|	ГДЕ
		|		НЕ(ХозрасчетныйОбороты.Счет = ХозрасчетныйОбороты.КорСчет
		|					И ХозрасчетныйОбороты.Субконто1 = ХозрасчетныйОбороты.КорСубконто1
		|					И ХозрасчетныйОбороты.Субконто2 = ХозрасчетныйОбороты.КорСубконто2
		|					И ХозрасчетныйОбороты.Субконто3 = ХозрасчетныйОбороты.КорСубконто3)) КАК ХозрасчетныйОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойств
		|		ПО (ЗначенияСвойств.Объект = &Договор)
		|			И (ЗначенияСвойств.Свойство = &Свойство)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияСвойств.Значение";
	
	КонецЕсли;	
	Запрос.УстановитьПараметр("КонПериода2М", 	Новый Граница(ДобавитьМесяц(НачалоМесяца(КонПериода), -1) - 1));
	Запрос.УстановитьПараметр("НачПериода1М", 	Новый Граница(ДобавитьМесяц(НачалоМесяца(КонПериода), -1)));
	Запрос.УстановитьПараметр("КонПериода1М", 	Новый Граница(НачалоМесяца(КонПериода) - 1));
	Запрос.УстановитьПараметр("НачПериода", 	Новый Граница(НачалоМесяца(КонПериода)));
	Запрос.УстановитьПараметр("КонПериода", 	Новый Граница(КонПериода));
	Запрос.УстановитьПараметр("Контрагент", 	Контрагент);  
	Запрос.УстановитьПараметр("Договор", 		ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Счет", 			Счет);
	Запрос.УстановитьПараметр("УСчетаЕстьРодитель", ЗначениеЗаполнено(Счет.Родитель));
	Запрос.УстановитьПараметр("СчетРодитель", 	Счет.Родитель);  
	Запрос.УстановитьПараметр("Свойство", 		ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00270"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	КонПериода2М = 0;  
	ОборотыПериода1М = 0;
	КонПериода1М = 0;
	ОборотыПериодаТекМ = 0;
	Мероприятие = Неопределено;
	Если Выборка.Следующий() Тогда
		Если ДтКт = "Дт" Тогда
			КонПериода2М 		= Выборка.КонПериода2МДт;  
			ОборотыПериода1М 	= Выборка.ОборотыПериода1МКт;// - Выборка.ОборотыПериода1МДт;
			КонПериода1М 		= Выборка.КонПериода1МДт;
			ОборотыПериодаТекМ 	= Выборка.ОборотыПериодаКт;// - Выборка.ОборотыПериодаДт;
			КонПериодаТекМ		= Выборка.КонПериодаДт;
		Иначе
			КонПериода2М 		= Выборка.КонПериода2МКт;  
			ОборотыПериода1М 	= Выборка.ОборотыПериода1МДт;// - Выборка.ОборотыПериода1МКт;
			КонПериода1М 		= Выборка.КонПериода1МКт;
			ОборотыПериодаТекМ 	= Выборка.ОборотыПериодаДт;// - Выборка.ОборотыПериодаКт;
			КонПериодаТекМ		= Выборка.КонПериодаКт;
		КонецЕсли; 
		Мероприятие = Выборка.Мероприятие;
	КонецЕсли; 
	
	Колонка24 = "";
	
	СтруктураСтроки.Вставить("КонПериода2М", 		КонПериода2М);
	СтруктураСтроки.Вставить("ОборотыПериода1М", 	ОборотыПериода1М);
	СтруктураСтроки.Вставить("КонПериода1М", 		КонПериода1М);
	СтруктураСтроки.Вставить("ОборотыПериодаТекМ", 	ОборотыПериодаТекМ);
	СтруктураСтроки.Вставить("Колонка23", 			ДоговорКонтрагента.ИсполняющееПодразделение);  
	СтруктураСтроки.Вставить("Колонка24", 			Колонка24);  
	СтруктураСтроки.Вставить("Мероприятие", 		Мероприятие);
	СтруктураСтроки.Вставить("КонПериодаТекМ", 		КонПериодаТекМ);
	
	Возврат СтруктураСтроки;
	
КонецФункции	//	ПолучитьДанныеСтрокиПросроченной1()	                    

Функция ПолучитьДанныеСтрокиДляПросроченной_2_180523(Знач КонПериода, Знач КонПериода1, Знач Контрагент, Знач Счет, Знач Организация, Знач ДоговорКонтрагента, Знач ДтКт = "Дт", Знач ДанныеОДокПросроч = Неопределено)
	Задолженность = ДанныеОДокПросроч.КонПериодаТекМ;
	СтруктураСтроки = Новый Структура;     //Просроченная 
	
    Запрос = Новый Запрос;
	ВидыСубконто = Новый Массив();
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Если Счет = ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов Тогда 
		Запрос.Текст =         	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ХозрасчетныйОбороты.Счет КАК Счет,
		|	ХозрасчетныйОбороты.Период КАК Период,
		|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
		|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
		|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
		|	ХозрасчетныйОбороты.ПроверятьГалочку КАК ПроверятьГалочку,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК СуммаОборот,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОбороты.Счет КАК Счет,
		|		ХозрасчетныйОбороты.Период КАК Период,
		|		ХозрасчетныйОбороты.Регистратор КАК Регистратор,
		|		ХозрасчетныйОбороты.СуммаОборот КАК СуммаОборот,
		|		ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
		|		ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|		ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		|		ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
		|		ВЫБОР
		|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
		|				ТОГДА ""Деньги""
		|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
		|				ТОГДА ""Деньги""
		|			КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
		|				ТОГДА ""Деньги""
		|			ИНАЧЕ ""Поставка""
		|		КОНЕЦ КАК ПроверятьГалочку
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				,
		|				&КонПериода,
		|				Регистратор,
		|				Счет В(&Счета),
		|				&ВидыСубконто,
		|				Субконто1 = &Контрагент
		|					И Организация = &Организация,
		|				,
		|				) КАК ХозрасчетныйОбороты) КАК ХозрасчетныйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Счет,
		|	ХозрасчетныйОбороты.Субконто2,
		|	ХозрасчетныйОбороты.ПроверятьГалочку,
		|	ХозрасчетныйОбороты.Период,
		|	ХозрасчетныйОбороты.Субконто1,
		|	ХозрасчетныйОбороты.Регистратор
		|
		//|УПОРЯДОЧИТЬ ПО
		//|	ХозрасчетныйОбороты.Период
		|ИТОГИ
		|	СУММА(СуммаОборот)
		|ПО
		|	Счет";
		
	Иначе	
		Запрос.Текст =                                                     
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ХозрасчетныйОбороты.Счет КАК Счет,
		|	ХозрасчетныйОбороты.Период КАК Период,
		|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
		|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
		|	ХозрасчетныйОбороты.ПроверятьГалочку КАК ПроверятьГалочку,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК СуммаОборот,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОбороты.Счет КАК Счет,
		|		ХозрасчетныйОбороты.Период КАК Период,
		|		ХозрасчетныйОбороты.Регистратор КАК Регистратор,
		|		ХозрасчетныйОбороты.СуммаОборот КАК СуммаОборот,
		|		ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
		|		ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|		ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		|		ВЫБОР
		|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
		|				ТОГДА ""Деньги""
		|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
		|				ТОГДА ""Деньги""
		|			КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
		|				ТОГДА ""Деньги""
		|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаДолга
		|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками))
		|				ТОГДА ""Деньги""
		|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаДолга
		|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
		|				ТОГДА ""Деньги""
		|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаДолга
		|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы)
		|				ТОГДА ""Деньги""  
		|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаДолга
		|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
		|					И ХозрасчетныйОбороты.КорСубконто1 = &ВТБ_Факторинг
		|				ТОГДА ""Деньги""
		|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаДолга
		|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
		|					И ХозрасчетныйОбороты.КорСубконто1 = &Транскапиталбанк
		|				ТОГДА ""Деньги""
		|			ИНАЧЕ ""Поставка""
		|		КОНЕЦ КАК ПроверятьГалочку
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				,
		|				&КонПериода,
		|				Регистратор,
		|				Счет В(&Счета),
		|				&ВидыСубконто,
		|				Субконто1 = &Контрагент
		|					И Субконто2 = &Договор
		|					И Организация = &Организация,
		|				,
		|				) КАК ХозрасчетныйОбороты) КАК ХозрасчетныйОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Счет,
		|	ХозрасчетныйОбороты.Регистратор,
		|	ХозрасчетныйОбороты.Субконто2,
		|	ХозрасчетныйОбороты.Период,
		|	ХозрасчетныйОбороты.ПроверятьГалочку
		|
		//|УПОРЯДОЧИТЬ ПО
		//|	ХозрасчетныйОбороты.Период
		|ИТОГИ
		|	СУММА(СуммаОборот)
		|ПО
		|	Счет";
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли;	
	Запрос.УстановитьПараметр("КонПериода", 		КонПериода);
	Запрос.УстановитьПараметр("Контрагент", 		Контрагент);  
	Запрос.УстановитьПараметр("Договор", 			ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("ВидыСубконто", 		ВидыСубконто);
	Запрос.УстановитьПараметр("ВТБ_Факторинг", 		Справочники.Контрагенты.НайтиПоКоду("10292"));
	Запрос.УстановитьПараметр("Транскапиталбанк",	Справочники.Контрагенты.НайтиПоКоду("07931"));
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счет);
	Если ДоговорКонтрагента.КонтролироватьСрокПоставкиОтАванса 
		и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	ИначеЕсли ДоговорКонтрагента.КонтролироватьСрокПоставкиОтАванса 
		и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками Тогда
		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
	КонецЕсли; 
	Запрос.УстановитьПараметр("Счета", 				МассивСчетов);
	
	ТаблицаДокументовДолга = ОбработатьРезультатЗапроса(Запрос, Задолженность, Счет, ДтКт);
	
	ТЗДляСтруктуры = Новый ТаблицаЗначений;
	ТЗДляСтруктуры.Колонки.Добавить("ТипДокумента");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаДок");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаДок1М");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаДокСист");
	ТЗДляСтруктуры.Колонки.Добавить("НомерДок");
	ТЗДляСтруктуры.Колонки.Добавить("НомерДок1М");
	ТЗДляСтруктуры.Колонки.Добавить("ЗаЧто");
	ТЗДляСтруктуры.Колонки.Добавить("ЗаЧто1М");
	ТЗДляСтруктуры.Колонки.Добавить("ПроверятьГалочку");
	ТЗДляСтруктуры.Колонки.Добавить("Регистратор");
	ТЗДляСтруктуры.Колонки.Добавить("Регистратор1М");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаПогашенияДЗ");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаПогашенияДЗСтр");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаПогашенияДЗ1М");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаПогашенияДЗ1МСтр");
	
	ТЗДляСтруктуры.Колонки.Добавить("Колонка01", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка11", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка12", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка13", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка14", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка15", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка17", Новый ОписаниеТипов("Булево"));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка22", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка23", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка24", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка25", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка26", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	Для каждого ВыборкаДетальныеЗаписи из ТаблицаДокументовДолга цикл
		
		Если ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору = 0 Тогда Продолжить; КонецЕсли;
		 
		СтруктПолуч = ПолучитьСтруктуруДанныхДокумента(ВыборкаДетальныеЗаписи.Регистратор, ВыборкаДетальныеЗаписи.ПроверятьГалочку, ДоговорКонтрагента);
		
		Если Не (СтруктПолуч.ДатаПогашенияДЗ > Дата(1,1,1) и СтруктПолуч.ДатаПогашенияДЗ < КонПериода.Значение) Тогда
		//Иначе
		//	ТЗДляСтруктуры.Удалить(НовСтрока);
			Продолжить;
		КонецЕсли;
		
		НовСтрока = ТЗДляСтруктуры.Добавить();
		НовСтрока.Регистратор = ВыборкаДетальныеЗаписи.Регистратор;
		ЗаполнитьЗначенияСвойств(НовСтрока, СтруктПолуч);
		
		НовСтрока.Колонка17 = Истина;
		НовСтрока.Колонка22 = 0;
		НовСтрока.Колонка23 = 0;
		НовСтрока.Колонка24 = 0;
		НовСтрока.Колонка25 = 0; 
		НовСтрока.Колонка26 = 0;
		КолДней = (КонПериода.Значение - НовСтрока.ДатаПогашенияДЗ) / (60 * 60 * 24);   // fix Suetin 23.10.2017 16:14:54  ТЗДляСтруктуры[КоличествоСтрок - 1].ДатаДок
		
		Если КолДней > 1095 Тогда
			НовСтрока.Колонка26 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		ИначеЕсли КолДней > 180 Тогда
			НовСтрока.Колонка25 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;	
		ИначеЕсли КолДней > 90 Тогда
			НовСтрока.Колонка24 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		ИначеЕсли КолДней > 30 Тогда
			НовСтрока.Колонка23 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		ИначеЕсли КолДней > 0 Тогда
			НовСтрока.Колонка22 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		КонецЕсли;
		
	КонецЦикла;
	
	//ПараметрыОтбора = Новый Структура("Колонка17", Ложь);
	//МассивСтрокНеПросроченных = ТЗДляСтруктуры.НайтиСтроки(ПараметрыОтбора);
	//Для каждого СтрокаНеПросроч Из МассивСтрокНеПросроченных Цикл
	//	ТЗДляСтруктуры.Удалить(СтрокаНеПросроч);
	//КонецЦикла; 
	
	ТЗДляСтруктуры.Свернуть("ТипДокумента, ДатаДок, ДатаДок1М, НомерДок, НомерДок1М, ДатаДокСист, ЗаЧто1М, ЗаЧто, ПроверятьГалочку, Регистратор1М, Регистратор, ДатаПогашенияДЗ, ДатаПогашенияДЗСтр, ДатаПогашенияДЗ1М, ДатаПогашенияДЗ1МСтр, Колонка17", "Колонка01, Колонка11, Колонка12, Колонка13, Колонка14, Колонка15, Колонка22, Колонка23, Колонка24, Колонка25, Колонка26");
	ТЗДляСтруктуры.Сортировать("ДатаДокСист Убыв");
	КоличествоТЗДляСтруктуры = ТЗДляСтруктуры.Количество();
	ТипДокумента = "";
	ДатаДок = "";
	НомерДок = "";
	ЗаЧто 			= Неопределено;
	ДатаДолга 		= Неопределено;
	Регистратор 	= Неопределено;
	ДатаПогашенияДЗСтр = Неопределено;
	Для каждого строкаДС из ТЗДляСтруктуры цикл
		ТипДокумента = ТипДокумента + ?(ТипДокумента = "", "", Символы.ПС) + строкаДС.ТипДокумента; 	
		НомерДок = НомерДок + ?(НомерДок = "", "", Символы.ПС) + ?(строкаДС.НомерДок = "", "б/н", строкаДС.НомерДок);
		ДатаДок = ДатаДок + ?(ДатаДок = "", "", Символы.ПС) + ?(строкаДС.ДатаДок = Дата(1,1,1,0,0,0), "б/д", Формат(строкаДС.ДатаДок, "ДФ=dd.MM.yyyy"));
		Если ЗначениеЗаполнено(строкаДС.Регистратор) Тогда
			Регистратор 		= строкаДС.Регистратор;
		КонецЕсли;
		Если ЗначениеЗаполнено(строкаДС.ДатаДок) Тогда
			ДатаДолга 			= строкаДС.ДатаДок;
		КонецЕсли;
		Если ЗначениеЗаполнено(строкаДС.ЗаЧто) Тогда
			ЗаЧто 				= строкаДС.ЗаЧто;
		КонецЕсли;
		Если ЗначениеЗаполнено(строкаДС.ДатаПогашенияДЗСтр) Тогда
			ДатаПогашенияДЗСтр 	= строкаДС.ДатаПогашенияДЗСтр;
		КонецЕсли;                    
	КонецЦикла;	
	
	Задолженность = ДанныеОДокПросроч.КонПериода1М;
	Запрос.УстановитьПараметр("КонПериода", 		КонПериода1);
	ТаблицаДокументовДолга = ОбработатьРезультатЗапроса(Запрос, Задолженность, Счет, ДтКт);
	Инд = 0;
	Для каждого ВыборкаДетальныеЗаписи из ТаблицаДокументовДолга Цикл
		
		Если ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору = 0 Тогда Продолжить; КонецЕсли;
		 
		СтруктПолуч = ПолучитьСтруктуруДанныхДокумента(ВыборкаДетальныеЗаписи.Регистратор, ВыборкаДетальныеЗаписи.ПроверятьГалочку, ДоговорКонтрагента);
		
		Если Не (СтруктПолуч.ДатаПогашенияДЗ > Дата(1,1,1) и СтруктПолуч.ДатаПогашенияДЗ < КонПериода1.Значение) Тогда
		//Иначе
			//Если КоличествоТЗДляСтруктуры <= ТаблицаДокументовДолга.Индекс(ВыборкаДетальныеЗаписи) - Инд Тогда
			//	ТЗДляСтруктуры.Удалить(НовСтрока);
			//КонецЕсли;
			Инд = Инд + 1;
			Продолжить;
		КонецЕсли;
		
		Если КоличествоТЗДляСтруктуры <= ТаблицаДокументовДолга.Индекс(ВыборкаДетальныеЗаписи) - Инд Тогда
			НовСтрока = ТЗДляСтруктуры.Добавить();
		Иначе
		    НовСтрока = ТЗДляСтруктуры[ТаблицаДокументовДолга.Индекс(ВыборкаДетальныеЗаписи) - Инд]
		КонецЕсли; 
		
		НовСтрока.ДатаДок1М 			= СтруктПолуч.ДатаДок;
		НовСтрока.НомерДок1М 			= СтруктПолуч.НомерДок;
		НовСтрока.Регистратор1М 		= ВыборкаДетальныеЗаписи.Регистратор;
		НовСтрока.ЗаЧто1М 				= СтруктПолуч.ЗаЧто;
		НовСтрока.Колонка17 			= Истина;
		НовСтрока.ДатаПогашенияДЗ1М 	= СтруктПолуч.ДатаПогашенияДЗ; 
		НовСтрока.ДатаПогашенияДЗ1МСтр 	= СтруктПолуч.ДатаПогашенияДЗСтр;
		НовСтрока.Колонка11 			= 0;
		НовСтрока.Колонка12 			= 0;
		НовСтрока.Колонка13 			= 0;
		НовСтрока.Колонка14 			= 0; 
		НовСтрока.Колонка15 			= 0;
		КолДней = (КонПериода1.Значение - СтруктПолуч.ДатаПогашенияДЗ) / (60 * 60 * 24);   // fix Suetin 23.10.2017 16:14:54  ТЗДляСтруктуры[КоличествоСтрок - 1].ДатаДок
		
		Если КолДней > 1095 Тогда
			НовСтрока.Колонка15 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		ИначеЕсли КолДней > 180 Тогда
			НовСтрока.Колонка14 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;	
		ИначеЕсли КолДней > 90 Тогда
			НовСтрока.Колонка13 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		ИначеЕсли КолДней > 30 Тогда
			НовСтрока.Колонка12 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		ИначеЕсли КолДней > 0 Тогда
			НовСтрока.Колонка11 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		КонецЕсли; 
		
	КонецЦикла;
	
	//ПараметрыОтбора = Новый Структура("Колонка17", Ложь);
	//МассивСтрокНеПросроченных = ТЗДляСтруктуры.НайтиСтроки(ПараметрыОтбора);
	//Для каждого СтрокаНеПросроч Из МассивСтрокНеПросроченных Цикл
	//	ТЗДляСтруктуры.Удалить(СтрокаНеПросроч);
	//КонецЦикла; 
	
	ТЗДляСтруктуры.Свернуть("ТипДокумента, ДатаДок, ДатаДок1М, НомерДок, НомерДок1М, ДатаДокСист, ЗаЧто1М, ЗаЧто, ПроверятьГалочку, Регистратор1М, Регистратор, ДатаПогашенияДЗ, ДатаПогашенияДЗСтр, ДатаПогашенияДЗ1М, ДатаПогашенияДЗ1МСтр, Колонка17", "Колонка01, Колонка11, Колонка12, Колонка13, Колонка14, Колонка15, Колонка22, Колонка23, Колонка24, Колонка25, Колонка26");
	ТЗДляСтруктуры.Сортировать("ДатаДокСист Убыв");
	
	Задолженность = ДанныеОДокПросроч.КонПериода2М;
	КонПериода2 = Новый Граница(НачалоМесяца(КонПериода1.Значение) - 1, ВидГраницы.Включая);
	Запрос.УстановитьПараметр("КонПериода", 		КонПериода2);  // fix Suetin 19.07.2018 17:48:39 НЕ БЫЛО!!! Почему??? КонПериода2
	ТаблицаДокументовДолга = ОбработатьРезультатЗапроса(Запрос, Задолженность, Счет, ДтКт);
	Инд = 0;
	Для каждого ВыборкаДетальныеЗаписи из ТаблицаДокументовДолга Цикл
		
		Если ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору = 0 Тогда Продолжить; КонецЕсли;
		 
		СтруктПолуч = ПолучитьСтруктуруДанныхДокумента(ВыборкаДетальныеЗаписи.Регистратор, ВыборкаДетальныеЗаписи.ПроверятьГалочку, ДоговорКонтрагента);
		
		Если Не (СтруктПолуч.ДатаПогашенияДЗ > Дата(1,1,1) и СтруктПолуч.ДатаПогашенияДЗ < КонПериода2.Значение) Тогда
		//Иначе
			//Если КоличествоТЗДляСтруктуры <= ТаблицаДокументовДолга.Индекс(ВыборкаДетальныеЗаписи) - Инд Тогда
			//	ТЗДляСтруктуры.Удалить(НовСтрока);
			//КонецЕсли;
			Инд = Инд + 1;
			Продолжить;
		КонецЕсли;
		
		Если КоличествоТЗДляСтруктуры <= ТаблицаДокументовДолга.Индекс(ВыборкаДетальныеЗаписи) - Инд Тогда
			НовСтрока = ТЗДляСтруктуры.Добавить(); 
			//НовСтрока.ЗаЧто1М 		= СтруктПолуч.ЗаЧто; 
			//НовСтрока.ДатаДок1М 	= СтруктПолуч.ДатаДок;
			НовСтрока.Регистратор1М = ВыборкаДетальныеЗаписи.Регистратор;
		Иначе
		    НовСтрока = ТЗДляСтруктуры[ТаблицаДокументовДолга.Индекс(ВыборкаДетальныеЗаписи) - Инд]
		КонецЕсли; 
		
		//НовСтрока.ДатаДок2М 			= СтруктПолуч.ДатаДок;
		//НовСтрока.НомерДок2М 			= СтруктПолуч.НомерДок;
		//НовСтрока.Регистратор2М 		= ВыборкаДетальныеЗаписи.Регистратор;
		//НовСтрока.ЗаЧто2М 				= СтруктПолуч.ЗаЧто;
		//НовСтрока.Колонка17 			= Истина;
		//НовСтрока.ДатаПогашенияДЗ2М 	= СтруктПолуч.ДатаПогашенияДЗ; 
		//НовСтрока.ДатаПогашенияДЗ2МСтр 	= СтруктПолуч.ДатаПогашенияДЗСтр;
		НовСтрока.Колонка01 			= 0;
		//НовСтрока.Колонка02 			= 0;
		//НовСтрока.Колонка03 			= 0;
		//НовСтрока.Колонка04 			= 0; 
		//НовСтрока.Колонка05 			= 0;
		КолДней = (КонПериода2.Значение - СтруктПолуч.ДатаПогашенияДЗ) / (60 * 60 * 24);   // fix Suetin 23.10.2017 16:14:54  ТЗДляСтруктуры[КоличествоСтрок - 1].ДатаДок
		
		//Если КолДней > 1095 Тогда
		//	НовСтрока.Колонка05 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		//ИначеЕсли КолДней > 180 Тогда
		//	НовСтрока.Колонка04 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;	
		//ИначеЕсли КолДней > 90 Тогда
		//	НовСтрока.Колонка03 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		//ИначеЕсли КолДней > 30 Тогда
		//	НовСтрока.Колонка02 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		//Иначе
		Если КолДней > 0 Тогда
			НовСтрока.Колонка01 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		КонецЕсли; 
		
	КонецЦикла;
	
	//ПараметрыОтбора = Новый Структура("Колонка17", Ложь);
	//МассивСтрокНеПросроченных = ТЗДляСтруктуры.НайтиСтроки(ПараметрыОтбора);
	//Для каждого СтрокаНеПросроч Из МассивСтрокНеПросроченных Цикл
	//	ТЗДляСтруктуры.Удалить(СтрокаНеПросроч);
	//КонецЦикла; 
	
	ТЗДляСтруктуры.Свернуть("ТипДокумента, ДатаДок, ДатаДок1М, НомерДок, НомерДок1М, ДатаДокСист, ЗаЧто1М, ЗаЧто, ПроверятьГалочку, Регистратор1М, Регистратор, ДатаПогашенияДЗ, ДатаПогашенияДЗСтр, ДатаПогашенияДЗ1М, ДатаПогашенияДЗ1МСтр, Колонка17", "Колонка01, Колонка11, Колонка12, Колонка13, Колонка14, Колонка15, Колонка22, Колонка23, Колонка24, Колонка25, Колонка26");
	ТЗДляСтруктуры.Сортировать("ДатаДокСист Убыв");
	
	СуммаРезерва = 0;
	Если Не Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =                                                     
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонПериода,
		|			Счет = &Счет,
		|			,
		|			Субконто1 = &Контрагент
		|				И Субконто2 = &Договор) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.Организация = &Организация";
		
		Запрос.УстановитьПараметр("КонПериода", 	КонПериода1);
		Запрос.УстановитьПараметр("Контрагент", 	Контрагент);  
		Запрос.УстановитьПараметр("Договор", 		ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Организация", 	Организация);
		Запрос.УстановитьПараметр("Счет", 			ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			СуммаРезерва = Выборка.Сумма;
		КонецЕсли; 
	КонецЕсли;
	
	ЗаЧто1М 		= Неопределено;
	ДатаДолга1М 	= Неопределено;
	Регистратор1М 	= Неопределено;
	
	Для каждого строкаДС из ТЗДляСтруктуры цикл
		Если ЗначениеЗаполнено(строкаДС.Регистратор1М) Тогда
			Регистратор1М 			= строкаДС.Регистратор1М;
		КонецЕсли;
		Если ЗначениеЗаполнено(строкаДС.ДатаДок1М) Тогда
			ДатаДолга1М 			= строкаДС.ДатаДок1М;
		КонецЕсли;
		Если ЗначениеЗаполнено(строкаДС.ЗаЧто1М) Тогда
			ЗаЧто1М 				= строкаДС.ЗаЧто1М;
		КонецЕсли;                    
		Если ЗначениеЗаполнено(строкаДС.ДатаПогашенияДЗ1МСтр) Тогда
			ДатаПогашенияДЗ1МСтр 	= строкаДС.ДатаПогашенияДЗ1МСтр;
		КонецЕсли;                    
	КонецЦикла;
	
	КоличествоСтрок = ТЗДляСтруктуры.Количество();
	
	СтруктураСтроки.Вставить("ДокСтр", 						ТипДокумента);
	СтруктураСтроки.Вставить("ДатаДок", 					ДатаДок);
	СтруктураСтроки.Вставить("НомерДок", 					НомерДок);
	СтруктураСтроки.Вставить("ЗаЧто", 						ЗаЧто);
	СтруктураСтроки.Вставить("ДатаПогашенияДЗ", 			ДатаПогашенияДЗСтр);
	СтруктураСтроки.Вставить("ДатаДолга", 					ДатаДолга);
	СтруктураСтроки.Вставить("Регистратор", 				Регистратор);  
	
	СтруктураСтроки.Вставить("ТЗДляСтруктуры", 				ТЗДляСтруктуры);
	СтруктураСтроки.Вставить("СуммаРезерва", 				СуммаРезерва);
	СтруктураСтроки.Вставить("ИсполняющееПодразделение", 	ДоговорКонтрагента.ИсполняющееПодразделение);
	СтруктураСтроки.Вставить("Контрагент", 					Контрагент);
	СтруктураСтроки.Вставить("ДоговорКонтрагента", 			ДоговорКонтрагента);
	
	СтруктураСтроки.Вставить("ЗаЧто1М", 					ЗаЧто1М);
	СтруктураСтроки.Вставить("Регистратор1М", 				Регистратор1М);
	СтруктураСтроки.Вставить("ДатаДолга1М", 				ДатаДолга1М);
	
	Возврат СтруктураСтроки;
	
КонецФункции	//ПолучитьДанныеСтрокиДляПросроченной_2_180523()	                    

Функция ОбработатьРезультатЗапроса(Знач Запрос, Знач Задолженность, Знач Счет, Знач ДтКт = "Дт")
	Результат = Запрос.Выполнить();
	СальдоТекущееФ = 0;
	ТаблицаИтогов = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для каждого СтрокаТЗИ Из ТаблицаИтогов.Строки Цикл
		Если Не Счет = СтрокаТЗИ.Счет Тогда Продолжить; КонецЕсли;	
		СуммаДолгаПоДоговору = ?(СтрокаТЗИ.СуммаОборот = 0, Задолженность, ?(ДтКт = "Дт", СтрокаТЗИ.СуммаОборот, - СтрокаТЗИ.СуммаОборот)); 
		Прервать;
	КонецЦикла;	
	ТаблицаСФлагами = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ПараметрыОтбора = Новый Структура("Регистратор", Null);
	ЛишниеСтроки = ТаблицаСФлагами.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ЛишняяСтрока Из ЛишниеСтроки Цикл
		ТаблицаСФлагами.Удалить(ЛишняяСтрока);
	КонецЦикла; 
	ТаблицаСФлагами.Сортировать("Период Возр");
	ТаблицаСФлагами.Колонки.Добавить("Флаг", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1)));
	ТаблицаСФлагами.Колонки.Добавить("СуммаДолгаПоДоговору", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	Для каждого СтрокаТЗФ Из ТаблицаСФлагами Цикл
		//Если Не ЗначениеЗаполнено(СтрокаТЗФ.Регистратор) Тогда 
		//	//СуммаДолгаПоДоговору = ?(СтрокаТЗФ.СуммаОборот = 0, (ДанныеОДокПросроч.КонПериода2М - ДанныеОДокПросроч.КонПериода1М + ДанныеОДокПросроч.КонПериода1М - Задолженность), СтрокаТЗФ.СуммаОборот);  
		//	//СуммаДолгаПоДоговору = ?(СтрокаТЗФ.СуммаОборот = 0, Задолженность, СтрокаТЗФ.СуммаОборот); 
		//	СуммаДолгаПоДоговору = ?(СтрокаТЗФ.СуммаОборот = 0, Задолженность, ?(ДтКт = "Дт", СтрокаТЗФ.СуммаОборот, - СтрокаТЗФ.СуммаОборот));
		//	Отрицательная = СуммаДолгаПоДоговору < 0;
		//	Продолжить; 
		//КонецЕсли; 
		СальдоТекущееФ = СальдоТекущееФ + СтрокаТЗФ.СуммаОборотДт - СтрокаТЗФ.СуммаОборотКт;
		СтрокаТЗФ.Флаг   = ?(СальдоТекущееФ = 0, "", ?(СальдоТекущееФ < 0, "К", "Д"));
		СтрокаТЗФ.СуммаДолгаПоДоговору = ?(СальдоТекущееФ < 0, -СальдоТекущееФ, СальдоТекущееФ);
	КонецЦикла; 
	ТаблицаСФлагами.Сортировать("Период Убыв");
	
	ТаблицаДокументовДолга = Новый ТаблицаЗначений;
	ТаблицаДокументовДолга.Колонки.Добавить("Регистратор");
	ТаблицаДокументовДолга.Колонки.Добавить("ПроверятьГалочку");  
	ТаблицаДокументовДолга.Колонки.Добавить("СуммаДолгаПоДоговору", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТаблицаДокументовДолга.Колонки.Добавить("СуммаДолга", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	БылиНайденыСтрокиЗадолженности = Ложь;
	
	Для каждого СтрокаТЗФ Из ТаблицаСФлагами Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗФ.Регистратор) Тогда Продолжить; КонецЕсли; 
		Если ДтКт = "Дт" и СтрокаТЗФ.Флаг = "Д" и СтрокаТЗФ.СуммаОборотДт <> 0 Тогда
			Нстрока = ТаблицаДокументовДолга.Добавить();
			Нстрока.Регистратор 			= СтрокаТЗФ.Регистратор;
			Нстрока.ПроверятьГалочку 		= СтрокаТЗФ.ПроверятьГалочку;
			//Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, Мин(СуммаДолгаПоДоговору, ?(СтрокаТЗФ.СуммаОборотДт < 0, 0, СтрокаТЗФ.СуммаОборотДт)));
			Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, Мин(СуммаДолгаПоДоговору, СтрокаТЗФ.СуммаОборотДт));
			//Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, ?(СуммаДолгаПоДоговору = 0, СтрокаТЗФ.СуммаОборотДт, Мин(СуммаДолгаПоДоговору, СтрокаТЗФ.СуммаОборотДт)));
			СуммаДолгаПоДоговору 			= СуммаДолгаПоДоговору - СтрокаТЗФ.СуммаОборотДт;
			Нстрока.СуммаДолга			 	= СтрокаТЗФ.СуммаОборотДт;
			БылиНайденыСтрокиЗадолженности = Истина;
			Если Не СуммаДолгаПоДоговору > 0 Тогда Прервать; КонецЕсли; 
		ИначеЕсли ДтКт = "Кт" и СтрокаТЗФ.Флаг = "К" и СтрокаТЗФ.СуммаОборотКт <> 0 Тогда
			Нстрока = ТаблицаДокументовДолга.Добавить();
			Нстрока.Регистратор 			= СтрокаТЗФ.Регистратор;
			Нстрока.ПроверятьГалочку 		= СтрокаТЗФ.ПроверятьГалочку;
			//Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, Мин(СуммаДолгаПоДоговору, ?(СтрокаТЗФ.СуммаОборотКт < 0, 0, СтрокаТЗФ.СуммаОборотКт)));
			Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, Мин(СуммаДолгаПоДоговору, СтрокаТЗФ.СуммаОборотКт));
			//Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, ?(СуммаДолгаПоДоговору = 0, СтрокаТЗФ.СуммаОборотКт, Мин(СуммаДолгаПоДоговору, СтрокаТЗФ.СуммаОборотКт)));
			СуммаДолгаПоДоговору 			= СуммаДолгаПоДоговору - СтрокаТЗФ.СуммаОборотКт;
			Нстрока.СуммаДолга			 	= СтрокаТЗФ.СуммаОборотКт;
			БылиНайденыСтрокиЗадолженности = Истина;
			Если Не СуммаДолгаПоДоговору > 0 Тогда Прервать; КонецЕсли; 
		ИначеЕсли Не БылиНайденыСтрокиЗадолженности Тогда
			Продолжить;
		ИначеЕсли СуммаДолгаПоДоговору > 0 Тогда
			Продолжить;	
		Иначе 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат(ТаблицаДокументовДолга);
КонецФункции	
	
Функция ПолучитьСтруктуруДанныхДокумента(Регистратор, ПроверятьГалочку, ДоговорКонтрагента)
	НовСтрока = Новый Структура("ТипДокумента, ДатаДок, ДатаДокСист, НомерДок, ЗаЧто, ПроверятьГалочку, ДатаПогашенияДЗ, ДатаПогашенияДЗСтр"); 
	Попытка
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") тогда
			Если Регистратор.Услуги.Количество() <> 0 тогда
				НовСтрока.ТипДокумента = "акт выполненных услуг";
			Иначе
				НовСтрока.ТипДокумента = "накладная";
			КонецЕсли;
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ЗаЧто 		= Регистратор.ДоговорКонтрагента.ВидВзаиморасчетов;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
		
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
			Если Регистратор.Услуги.Количество() <> 0 тогда
				НовСтрока.ТипДокумента = "акт выполненных услуг";
			Иначе
				НовСтрока.ТипДокумента = "накладная";
			КонецЕсли;
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ЗаЧто 		= Регистратор.ДоговорКонтрагента.ВидВзаиморасчетов;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
		
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") тогда
			Если Регистратор.Услуги.Количество() <> 0 тогда
				НовСтрока.ТипДокумента = "акт выполненных услуг";
			Иначе
				НовСтрока.ТипДокумента = "накладная";
			КонецЕсли;
			НовСтрока.ДатаДок 		= ?(Регистратор.ДатаВходящегоДокумента = Дата(1,1,1), Регистратор.Дата, Регистратор.ДатаВходящегоДокумента);
			НовСтрока.ДатаДокСист 	= Регистратор.Дата;
			НовСтрока.НомерДок 		= ?(Регистратор.НомерВходящегоДокумента = "", "б/н", Регистратор.НомерВходящегоДокумента);
			НовСтрока.ЗаЧто 		= Регистратор.ДоговорКонтрагента.ВидВзаиморасчетов;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") тогда
			НовСтрока.ТипДокумента 	= "платежное поручение";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ЗаЧто 		= Регистратор.ДоговорКонтрагента.ВидВзаиморасчетов;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") тогда
			НовСтрока.ТипДокумента 	= "платежное поручение";
			НовСтрока.ДатаДок 		= ?(Регистратор.ДатаВходящегоДокумента = Дата(1,1,1), Регистратор.Дата, Регистратор.ДатаВходящегоДокумента);
			НовСтрока.ДатаДокСист 	= Регистратор.Дата;
			НовСтрока.НомерДок 		= ?(Регистратор.НомерВходящегоДокумента = "", "б/н", Регистратор.НомерВходящегоДокумента);
			НовСтрока.ЗаЧто 		= Регистратор.ДоговорКонтрагента.ВидВзаиморасчетов;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") тогда
			НовСтрока.ТипДокумента 	= "ПКО";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") тогда
			НовСтрока.ТипДокумента 	= "РКО";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.АвансовыйОтчет") тогда
			НовСтрока.ТипДокумента 	= "Авансовый отчет";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;                                               
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОперацияБух") тогда
			НовСтрока.ТипДокумента 	= "Опреация бух.";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") тогда
			НовСтрока.ТипДокумента 	= "акт выполненных услуг";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ЗаЧто 		= Регистратор.ДоговорКонтрагента.ВидВзаиморасчетов;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") тогда
			НовСтрока.ТипДокумента 	= "д/расч.";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ЗаЧто 		= Регистратор.ДоговорКонтрагента.ВидВзаиморасчетов;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаДолга") тогда
			НовСтрока.ТипДокумента 	= "к/долга";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ЗаЧто 		= Регистратор.ДоговорКонтрагента.ВидВзаиморасчетов;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеДопРасходов") тогда
			НовСтрока.ТипДокумента 	= "доп/расх";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ЗаЧто 		= Регистратор.ДоговорКонтрагента.ВидВзаиморасчетов;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВводНачальныхОстатковПоВзаиморасчетам") тогда
			НовСтрока.ТипДокумента 	= "Ввод нач. остатков";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") тогда
			НовСтрока.ТипДокумента 	= "Корректировка реализ.";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаПоступления") тогда
			НовСтрока.ТипДокумента 	= "Корректировка поступ.";                                                            
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ЗаЧто 		= Регистратор.ДоговорКонтрагента.ВидВзаиморасчетов;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") тогда
			НовСтрока.ТипДокумента 	= "накладная";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ЗаЧто 		= Регистратор.ДоговорКонтрагента.ВидВзаиморасчетов;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
			
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") тогда
			НовСтрока.ТипДокумента 	= "накладная";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ЗаЧто 		= Регистратор.ДоговорКонтрагента.ВидВзаиморасчетов;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
			
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.НачислениеДивидендовОрганизацийСтороннимАкционерам") тогда
			НовСтрока.ТипДокумента 	= "НачислениеДивидендов";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ЗаЧто 		= "Дивиденды по акциям";
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
			
		Иначе
			НовСтрока.ТипДокумента 	= Регистратор.Метаданные().Синоним;
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ОбщегоНазначения.ПолучитьНомерНаПечать(Регистратор);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
			
		КонецЕсли;	
	Исключение
	КонецПопытки;
			
	НовСтрока.ДатаПогашенияДЗ = Дата(1,1,1);
	Если НовСтрока.ДатаДок = "б/д" Тогда
	    НовСтрока.ДатаПогашенияДЗСтр = "б/д";
	ИначеЕсли ДоговорКонтрагента.КонтролироватьСрокПоставкиОтАванса и НовСтрока.ПроверятьГалочку = "Деньги" Тогда
		Если ЗначениеЗаполнено(ДоговорКонтрагента.СрокПоставкиОтАванса)  Тогда
			НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + ДоговорКонтрагента.СрокПоставкиОтАванса * 60 * 60 * 24;
			НовСтрока.ДатаПогашенияДЗСтр = Формат(НовСтрока.ДатаПогашенияДЗ, "ДФ=dd.MM.yyyy");
		Иначе
			НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 30 * 60 * 60 * 24;
			НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
		КонецЕсли; 
		
	ИначеЕсли ДоговорКонтрагента.КонтролироватьСрокПоставкиОтАванса и НовСтрока.ПроверятьГалочку = "Поставка" Тогда
		//Если ЗначениеЗаполнено(ДоговорКонтрагента.СрокПоставкиОтАванса)  Тогда
		//	НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + ДоговорКонтрагента.СрокПоставкиОтАванса * 60 * 60 * 24;
		//	НовСтрока.ДатаПогашенияДЗСтр = Формат(НовСтрока.ДатаПогашенияДЗ, "ДФ=dd.MM.yyyy");
		//Иначе
			НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 1 * 60 * 60 * 24;
			НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
		//КонецЕсли;
		
	ИначеЕсли ДоговорКонтрагента.КонтролироватьСрокОкончательнойОплатыЗадолженности и НовСтрока.ПроверятьГалочку = "Поставка"  Тогда
		Если ЗначениеЗаполнено(ДоговорКонтрагента.СрокОкончательнойОплатыЗадолженности) Тогда
			НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + ДоговорКонтрагента.СрокОкончательнойОплатыЗадолженности * 60 * 60 * 24;
			НовСтрока.ДатаПогашенияДЗСтр = Формат(НовСтрока.ДатаПогашенияДЗ, "ДФ=dd.MM.yyyy");
		Иначе
			НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 30 * 60 * 60 * 24;
			НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
		КонецЕсли; 
	Иначе
		НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 30 * 60 * 60 * 24; 
	    НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
	КонецЕсли;

	Возврат(НовСтрока);
КонецФункции

Функция ПолучитьТекстПросроченногоЗапроса(ДтКт)
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1	//0
	|	Инвентаризация.Дата КАК Дата,
	|	КОНЕЦПЕРИОДА(Инвентаризация.Дата, ДЕНЬ) КАК КонецПериода,
	|	Инвентаризация.Номер КАК Номер,
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	Инвентаризация.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	Инвентаризация.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	Инвентаризация.ДокументОснованиеНомер КАК ДокументОснованиеНомер	//,
	//|	Инвентаризация.ИнвентаризационнаяКомиссия.(
	//|		ФИОПолные КАК ФизЛицо,
	//|		Председатель КАК Председатель
	//|	) КАК ИнвентаризационнаяКомиссия,
	//|	Инвентаризация.СчетаУчета.(
	//|		СчетУчета
	//|	)//,
	//|	Инвентаризация.Задолженность.(
	//|		ДебиторКредитор КАК Контрагент,
	//|		ВидЗадолженности,
	//|		СчетРасчетов,
	//|		Подтверждено,
	//|		НеПодтверждено,
	//|		ИстекСрокДавности,
	//|		ВИЛС_Договор КАК ДоговорКонтрагента
	//|	)
	|ПОМЕСТИТЬ Шапка
	|ИЗ 
	|	Документ.ИнвентаризацияРасчетов КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка
	|
	//|УПОРЯДОЧИТЬ ПО
	//|	Инвентаризация.ИнвентаризационнаяКомиссия.НомерСтроки
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ //1
	|	Задолженность.ДебиторКредитор КАК Контрагент,
	|	Задолженность.ВидЗадолженности КАК ВидЗадолженности,
	|	Задолженность.СчетРасчетов КАК СчетРасчетов,
	|	Задолженность.Подтверждено КАК Подтверждено,
	|	Задолженность.НеПодтверждено КАК НеПодтверждено,
	|	Задолженность.ИстекСрокДавности КАК ИстекСрокДавности,
	|	Задолженность.ВИЛС_Договор КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ Задолженность	
	|ИЗ 
	|	Документ.ИнвентаризацияРасчетов.Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.Ссылка = &Ссылка
	|	И Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности." + ?(ДтКт = "Дт", "Дебиторская", "Кредиторская") + ")
	//Дебиторская)
	//
	//|ИТОГИ
	//|	СУММА(Подтверждено),
	//|	СУММА(НеПодтверждено)
	//|ПО
	//|	СчетРасчетов
	|;	
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ //2
	//|	Т.Регистратор КАК Регистратор,
	//|	МАКСИМУМ(Т.ЕстьУслуги) КАК ЕстьУслуги
	//|ПОМЕСТИТЬ РегистраторыСУслугами
	//|ИЗ(
	//|	ВЫБРАТЬ
	//|		Т.Ссылка КАК Регистратор,
	//|   	ВЫБОР 
	//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	//|   			ТОГДА ИСТИНА
	//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	//|   			ТОГДА ИСТИНА
	//|  	    	ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ КАК ЕстьУслуги
	//|	ИЗ
	//|		Документ.ПриобретениеТоваровУслуг.ВидыЗапасов КАК Т
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	ВЫБРАТЬ
	//|		Т.Ссылка КАК Регистратор,
	//|   	ВЫБОР 
	//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	//|   			ТОГДА ИСТИНА
	//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	//|   			ТОГДА ИСТИНА
	//|  	    	ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ КАК ЕстьУслуги
	//|	ИЗ
	//|		Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК Т 
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	ВЫБРАТЬ
	//|		Т.Ссылка КАК Регистратор,
	//|   	ВЫБОР 
	//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	//|   			ТОГДА ИСТИНА
	//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	//|   			ТОГДА ИСТИНА
	//|  	    	ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ КАК ЕстьУслуги
	//|	ИЗ
	//|		Документ.ПоступлениеТоваровНаСклад.ВидыЗапасов  КАК Т) КАК Т
	//|СГРУППИРОВАТЬ
	//|ПО 
	//|	Т.Регистратор
	|ВЫБРАТЬ РАЗЛИЧНЫЕ //2
	|	Т.Регистратор КАК Регистратор,
	|	Т.Организация КАК Организация,
	|	Т.Контрагент КАК Контрагент,
	|	Т.Договор КАК Договор,
	|	МАКСИМУМ(Т.ЕстьУслуги) КАК ЕстьУслуги,
	|	Т.РасчетныйДокумент КАК РасчетныйДокумент
	|ПОМЕСТИТЬ РегистраторыСУслугами
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Ссылка КАК Регистратор,
	|		Т.Ссылка.Организация КАК Организация,
	|		Т.Ссылка.Контрагент КАК Контрагент,
	|		Т.Ссылка.Договор КАК Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЕстьУслуги,
	|		Т.Ссылка КАК РасчетныйДокумент
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг.ВидыЗапасов КАК Т
	|	ГДЕ
	|		Т.Ссылка.Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ ШАПКА КАК ШАПКА)	
	|	    И Т.Ссылка.Контрагент В (ВЫБРАТЬ РАЗЛИЧНЫЕ  Задолженность.Контрагент ИЗ Задолженность КАК Задолженность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Организация,
	|		Т.Ссылка.Контрагент,
	|		Т.Ссылка.Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		Т.Ссылка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК Т
	|	ГДЕ
	|		Т.Ссылка.Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ ШАПКА КАК ШАПКА)	
	|	    И Т.Ссылка.Контрагент В (ВЫБРАТЬ РАЗЛИЧНЫЕ  Задолженность.Контрагент ИЗ Задолженность КАК Задолженность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Организация,
	|		Т.Ссылка.Контрагент,
	|		Т.Ссылка.Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		Т.Ссылка
	|	ИЗ
	|		Документ.ПоступлениеТоваровНаСклад.ВидыЗапасов КАК Т
	|	ГДЕ
	|		Т.Ссылка.Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ ШАПКА КАК ШАПКА)	
	|	    И Т.Ссылка.Контрагент В (ВЫБРАТЬ РАЗЛИЧНЫЕ  Задолженность.Контрагент ИЗ Задолженность КАК Задолженность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Организация,
	|		Т.Контрагент,
	|		ВЫБОР КОГДА НЕ ЕСТЬNULL(Т.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА 
	|				Т.Договор
	|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Т.ОбъектРасчетов КАК Справочник.ДоговорыКонтрагентов), ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) 	 
	|			ТОГДА
	|				ВЫРАЗИТЬ(Т.ОбъектРасчетов КАК Справочник.ДоговорыКонтрагентов)
	|			ИНАЧЕ	
	|				Т.ДокументРасчетов.Договор
	|			КОНЕЦ,	
	|		ЛОЖЬ,
	|		Т.ДокументРасчетов
	|	ИЗ
	|		Документ.ВводОстатков.РасчетыСПартнерами КАК Т
	|	ГДЕ
	|		Т.Ссылка.Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ ШАПКА КАК ШАПКА)	
	|	    И Т.Контрагент В (ВЫБРАТЬ РАЗЛИЧНЫЕ  Задолженность.Контрагент ИЗ Задолженность КАК Задолженность)
	|	    ) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.Организация,
	|	Т.Контрагент,
	|	Т.Договор,
	|	Т.РасчетныйДокумент
	|;
	|///////////////////////////////////////////////////////////////////////////////   
	|ВЫБРАТЬ	//3
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонПериода,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам),
	|			, Организация 	 В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ Шапка КАК Шапка)	//&Организация
	|				И Субконто1  В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.Контрагент ИЗ Задолженность КАК ЗадолженностьНовая)
	|				И Субконто2  В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДоговорКонтрагента ИЗ Задолженность КАК ЗадолженностьНовая)) КАК ХозрасчетныйОстатки
	|
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ //4
	|	ХозрасчетныйОбороты.ДебиторКредитор КАК ДебиторКредитор,
	|	ХозрасчетныйОбороты.ВИЛС_Договор КАК ВИЛС_Договор,
	|	ХозрасчетныйОбороты.ЕстьУслуги,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.ПроверятьГалочку КАК ПроверятьГалочку,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК СуммаОборот,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	(ВЫБРАТЬ

	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто3
	|		ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17

	|		ХозрасчетныйОбороты.Период КАК Период,
	|		ХозрасчетныйОбороты.Счет КАК Счет,
    |	   	ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент, ХозрасчетныйОбороты.Регистратор) КАК Регистратор, 
	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) = 0
	|			ТОГДА
	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
	|			ИНАЧЕ
	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) 
	|		КОНЕЦ КАК СуммаОборот,		
	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) = 0
	|			ТОГДА
	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
	|			ИНАЧЕ
	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) 
	|		КОНЕЦ КАК СуммаОборотДт,
	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) = 0
	|			ТОГДА
	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
	|			ИНАЧЕ
	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) 
	|		КОНЕЦ КАК СуммаОборотКт,
	|		ВЫБОР
	|			КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент 
	|					И РегистраторыСУслугами.РасчетныйДокумент.ТипПервичногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику)
	|				ТОГДА ""Деньги""
	|			КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент 
	|					И РегистраторыСУслугами.РасчетныйДокумент.ТипПервичногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаОтКлиента)
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы)
	|				ТОГДА ""Деньги""
	//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
	//|					И ХозрасчетныйОбороты.КорСубконто1 = &ВТБ_Факторинг
	//|				ТОГДА ""Деньги""
	//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
	//|					И ХозрасчетныйОбороты.КорСубконто1 = &Транскапиталбанк
	//|				ТОГДА ""Деньги""
	|			ИНАЧЕ ""Поставка""
	|		КОНЕЦ КАК ПроверятьГалочку,
	|		РегистраторыСУслугами.ЕстьУслуги КАК ЕстьУслуги
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				,
	|				&КонПериода,
	|				Регистратор,
	|				ВЫБОР 
	|					КОГДА Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.СчетРасчетов ИЗ Задолженность КАК ЗадолженностьНовая)	//В (&Счета),
	|				    	ТОГДА ИСТИНА
	|					КОГДА Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
	|				    	ТОГДА ИСТИНА
	|                    ИНАЧЕ ЛОЖЬ КОНЕЦ
	|				,,//&ВидыСубконто,
	|				Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ Шапка КАК Шапка)	//= &Организация

	|	И ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.Контрагент ИЗ Задолженность КАК ЗадолженностьНовая)    //= &Контрагент	//
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДоговорКонтрагента ИЗ Задолженность КАК ЗадолженностьНовая) 	//= &Договор	//	
	|,
	|				,
	|				) КАК ХозрасчетныйОбороты
	|    ЛЕВОЕ СОЕДИНЕНИЕ РегистраторыСУслугами
	|    	ПО ХозрасчетныйОбороты.Регистратор = РегистраторыСУслугами.Регистратор
	
	|			И ХозрасчетныйОбороты.Организация = РегистраторыСУслугами.Организация
	|			И ВЫБОР
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто2
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто3
	|				ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
	|			КОНЕЦ = РегистраторыСУслугами.Контрагент
	|			И ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто2
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто3
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			КОНЕЦ = РегистраторыСУслугами.Договор 
	|			
	|											) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО

	|	ХозрасчетныйОбороты.ДебиторКредитор,
	|	ХозрасчетныйОбороты.ВИЛС_Договор, // fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОбороты.ЕстьУслуги,   // fix Suetin 25.03.2019 18:45:23
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.ПроверятьГалочку
	|
	//|УПОРЯДОЧИТЬ ПО
	//|	ХозрасчетныйОбороты.Период
	|ИТОГИ
	|	СУММА(СуммаОборот)
	|ПО
	//|	Счет.Родитель.Родитель,
	//|	Счет.Родитель,
	|	Счет
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ //5
	|	Задолженность.СчетРасчетов КАК СчетРасчетов,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Задолженность.ВидЗадолженности КАК ВидЗадолженности,
	|	Задолженность.Подтверждено КАК Подтверждено,
	|	Задолженность.НеПодтверждено КАК НеПодтверждено,
	|	Задолженность.ИстекСрокДавности КАК ИстекСрокДавности
	|ИЗ 
	|	Задолженность КАК Задолженность
	|УПОРЯДОЧИТЬ ПО
	|	СчетРасчетов
	|ИТОГИ
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено)
	|ПО
	|	СчетРасчетов ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|";
	
	Возврат(ТекстЗапроса);
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли