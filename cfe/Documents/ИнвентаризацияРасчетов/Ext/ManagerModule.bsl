#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

&Вместо("ЗаполнитьЗадолженностьПоОстаткам")
Процедура ВИЛС_ЗаполнитьЗадолженностьПоОстаткам(ПараметрыЗаполнения, АдресХранилища)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(ПараметрыЗаполнения.Дата), ВидГраницы.Включая));
	// begin fix Suetin 17.01.2019 16:46:39
	Запрос.УстановитьПараметр("Дата1Месяц",Новый Граница(КонецДня(ДобавитьМесяц(ПараметрыЗаполнения.Дата, -1)), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Дата2Месяц",Новый Граница(КонецДня(ДобавитьМесяц(ПараметрыЗаполнения.Дата, -2)), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОпределенияСрокаИстеченияСрокаДавности", Новый Граница(?(ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -36) < Дата(2005,12,31,23,59,59), Дата(2005,12,31,23,59,59), ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -36)), ВидГраницы.Включая) );
	Запрос.УстановитьПараметр("ДатаОпределенияСрокаИстеченияСрокаДавности1Месяц",Новый Граница(?(ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -37) < Дата(2005,12,31,23,59,59), Дата(2005,12,31,23,59,59), ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -37)), ВидГраницы.Включая) );
	Запрос.УстановитьПараметр("ДатаОпределенияСрокаИстеченияСрокаДавности2Месяц",Новый Граница(?(ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -38) < Дата(2005,12,31,23,59,59), Дата(2005,12,31,23,59,59), ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -38)), ВидГраницы.Включая) );
	// end fix Suetin 17.01.2019 16:46:18
	Запрос.УстановитьПараметр("Организация", ПараметрыЗаполнения.Организация);
	Запрос.УстановитьПараметр("МассивСчетов", ПараметрыЗаполнения.СчетаРасчетов);
	Запрос.УстановитьПараметр("ТаблицаЗадолженности", ПараметрыЗаполнения.ТаблицаЗадолженности);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияРасчетовЗадолженность.СчетРасчетов,
	|	ИнвентаризацияРасчетовЗадолженность.ДебиторКредитор,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_Договор,   				// fix Suetin 17.01.2019 13:02:14
	|	ИнвентаризацияРасчетовЗадолженность.Подтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.НеПодтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.ИстекСрокДавности,
	|	ИнвентаризацияРасчетовЗадолженность.ВидЗадолженности,
	|	ИнвентаризацияРасчетовЗадолженность.ВсегоДебиторская,
	|	ИнвентаризацияРасчетовЗадолженность.ВсегоКредиторская,        		// begin fix Suetin 06.02.2019 15:50:43
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_Подтверждено1Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_НеПодтверждено1Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_ИстекСрокДавности1Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_Подтверждено2Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_НеПодтверждено2Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_ИстекСрокДавности2Месяц   	// end fix Suetin 06.02.2019 15:50:48
	|ПОМЕСТИТЬ ЗадолженностьСтарая
	|ИЗ
	|	&ТаблицаЗадолженности КАК ИнвентаризацияРасчетовЗадолженность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоДебиторская,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНовая
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет В (&МассивСчетов), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ, 					// end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	// begin fix Suetin 17.01.2019 12:58:11	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено	//ИстекСрокДавности	//,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоДебиторская,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНоваяИстечениеСрокаДавности
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОпределенияСрокаИстеченияСрокаДавности, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)                   // end fix Suetin 17.01.2019 12:58:11
	|	) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,                  // end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоДебиторская,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНовая1Месяц
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата1Месяц, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ, 					// end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено	//ИстекСрокДавности	//,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоДебиторская,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНоваяИстечениеСрокаДавности1Месяц
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОпределенияСрокаИстеченияСрокаДавности1Месяц, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)                   // end fix Suetin 17.01.2019 12:58:11
	|	) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,                  // end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоДебиторская,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНовая2Месяц
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата2Месяц, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ, 					// end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено	//ИстекСрокДавности	//,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоДебиторская,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНоваяИстечениеСрокаДавности2Месяц
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОпределенияСрокаИстеченияСрокаДавности2Месяц, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,                  // end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// end fix Suetin 17.01.2019 12:58:17
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадолженностьНовая.ДебиторКредитор КАК ДебиторКредитор,
	|	ЗадолженностьНовая.ВИЛС_Договор КАК ВИЛС_Договор,        // fix Suetin 17.01.2019 14:35:22
	|	ЗадолженностьНовая.СчетРасчетов КАК СчетРасчетов,
	|	ЗадолженностьНовая.ВидЗадолженности,
	|	ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) КАК Подтверждено,
	|	ЕСТЬNULL(ЗадолженностьСтарая.НеПодтверждено, 0) КАК НеПодтверждено,        
	// begin fix Suetin 06.02.2019 15:44:57
	//|	ЕСТЬNULL(ЗадолженностьСтарая.ИстекСрокДавности, 0) КАК ИстекСрокДавности,  
	|   ВЫБОР КОГДА ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) < ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности.Подтверждено, 0) ТОГДА ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) ИНАЧЕ ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности.Подтверждено, 0) КОНЕЦ КАК ИстекСрокДавности,
	
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено1Месяц, ЗадолженностьНовая1Месяц.Подтверждено) КАК ВИЛС_Подтверждено1Месяц,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_НеПодтверждено1Месяц, 0) КАК ВИЛС_НеПодтверждено1Месяц,
	|   ВЫБОР КОГДА ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено1Месяц, ЗадолженностьНовая1Месяц.Подтверждено) < ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.Подтверждено, 0) ТОГДА ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено1Месяц, ЗадолженностьНовая1Месяц.Подтверждено) ИНАЧЕ ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.Подтверждено, 0) КОНЕЦ КАК ВИЛС_ИстекСрокДавности1Месяц,
	
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено2Месяц, ЗадолженностьНовая2Месяц.Подтверждено) КАК ВИЛС_Подтверждено2Месяц,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_НеПодтверждено2Месяц, 0) КАК ВИЛС_НеПодтверждено2Месяц,
	|   ВЫБОР КОГДА ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено2Месяц, ЗадолженностьНовая2Месяц.Подтверждено) < ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.Подтверждено, 0) ТОГДА ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено2Месяц, ЗадолженностьНовая2Месяц.Подтверждено) ИНАЧЕ ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.Подтверждено, 0) КОНЕЦ КАК ВИЛС_ИстекСрокДавности2Месяц,
	// end fix Suetin 06.02.2019 15:57:38
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВсегоДебиторская, ЗадолженностьНовая.ВсегоДебиторская) КАК ВсегоДебиторская,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВсегоКредиторская, ЗадолженностьНовая.ВсегоКредиторская) КАК ВсегоКредиторская,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВсегоДебиторская, ЗадолженностьНовая.ВсегоДебиторская) + ЕСТЬNULL(ЗадолженностьСтарая.ВсегоКредиторская, ЗадолженностьНовая.ВсегоКредиторская) = ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) КАК ЕстьПодтвержденнаяСумма,
	|	ЕСТЬNULL(ЗадолженностьСтарая.НеПодтверждено, 0) > 0 КАК ЕстьНеПодтвержденнаяСумма,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ИстекСрокДавности, 0) > 0 КАК ЕстьИстекСрокДавности,
	|	ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) > 0
	|		И ЕСТЬNULL(ЗадолженностьСтарая.НеПодтверждено, 0) > 0 КАК ЕстьЧастичноПодтвержденнаяСумма
	|ИЗ
	|	ЗадолженностьНовая КАК ЗадолженностьНовая
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьСтарая КАК ЗадолженностьСтарая
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьСтарая.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьСтарая.ДебиторКредитор        
	|			И ЗадолженностьНовая.ВИЛС_Договор = ЗадолженностьСтарая.ВИЛС_Договор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьСтарая.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНоваяИстечениеСрокаДавности КАК ЗадолженностьНоваяИстечениеСрокаДавности
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНоваяИстечениеСрокаДавности.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНоваяИстечениеСрокаДавности.ДебиторКредитор      
	|			И ЗадолженностьНовая.ВИЛС_Договор = ЗадолженностьНоваяИстечениеСрокаДавности.ВИЛС_Договор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНоваяИстечениеСрокаДавности.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНовая1Месяц КАК ЗадолженностьНовая1Месяц
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНовая1Месяц.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНовая1Месяц.ДебиторКредитор   
	|			И ЗадолженностьНовая.ВИЛС_Договор = ЗадолженностьНовая1Месяц.ВИЛС_Договор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНовая1Месяц.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНоваяИстечениеСрокаДавности1Месяц КАК ЗадолженностьНоваяИстечениеСрокаДавности1Месяц
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.ДебиторКредитор      
	|			И ЗадолженностьНовая.ВИЛС_Договор = ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.ВИЛС_Договор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНовая2Месяц КАК ЗадолженностьНовая2Месяц
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНовая2Месяц.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНовая2Месяц.ДебиторКредитор    
	|			И ЗадолженностьНовая.ВИЛС_Договор = ЗадолженностьНовая2Месяц.ВИЛС_Договор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНовая2Месяц.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНоваяИстечениеСрокаДавности2Месяц КАК ЗадолженностьНоваяИстечениеСрокаДавности2Месяц
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.ДебиторКредитор  
	|			И ЗадолженностьНовая.ВИЛС_Договор = ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.ВИЛС_Договор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.ВидЗадолженности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадолженностьНовая.СчетРасчетов.Порядок,
	|	ДебиторКредитор, ВИЛС_Договор      // fix Suetin 06.02.2019 14:13:32
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

&После("ДобавитьКомандыПечати")
Процедура ВИЛС_ДобавитьКомандыПечати(КомандыПечати)
	Порядок = 1;
	Для Каждого ЭлСпискаКП Из КомандыПечати Цикл
		ЭлСпискаКП.Порядок = Порядок;
		Порядок = Порядок + 1;
	КонецЦикла;	
	// РеестрДебиторскойЗадолженностиПриложение_7_1_180510
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрДебиторскойЗадолженностиПриложение_7_1";
	КомандаПечати.Представление = НСтр("ru = 'Реестр дебиторской задолженности. Приложение 7.1.'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = Порядок;
	Порядок = Порядок + 1;
	
	// РеестрДебиторскойЗадолженностиПриложение_7_1_180510
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрДебиторскойЗадолженностиСЗаказамиПриложение_7_1";
	КомандаПечати.Представление = НСтр("ru = 'Реестр дебиторской задолженности (с заказами). Приложение 7.1.'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = Порядок;
	Порядок = Порядок + 1;
	
	// РеестрКредиторскойЗадолженностиПриложение_7_1_180517
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрКредиторскойЗадолженностиПриложение_7_1";
	КомандаПечати.Представление = НСтр("ru = 'Реестр кредиторской задолженности. Приложение 7.1.'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = Порядок;
	Порядок = Порядок + 1;
	
	// РеестрКредиторскойЗадолженностиПриложение_7_1_180517
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрКредиторскойЗадолженностиСЗаказамиПриложение_7_1";
	КомандаПечати.Представление = НСтр("ru = 'Реестр кредиторской задолженности (с заказами). Приложение 7.1.'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = Порядок;
	Порядок = Порядок + 1;
	
	// РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180523
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2";
	КомандаПечати.Представление = НСтр("ru = 'Реестр просроченной дебиторской задолженности. Приложение 7.2.'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь; 
	КомандаПечати.Порядок = Порядок;
	Порядок = Порядок + 1;
	
	// РеестрПросроченнойКредиторскойЗадолженностиПриложение_7_2_180523
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрПросроченнойКредиторскойЗадолженностиПриложение_7_2";
	КомандаПечати.Представление = НСтр("ru = 'Реестр просроченной кредиторской задолженности. Приложение 7.2.'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;   
	КомандаПечати.Порядок = Порядок;
	Порядок = Порядок + 1;
	
	//// РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180523
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180523";
	//КомандаПечати.Представление = НСтр("ru = 'Реестр просроченной дебиторской задолженности. Приложение 7.2. ТЕСТ'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	//
	//// РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180702
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180702";
	//КомандаПечати.Представление = НСтр("ru = 'Реестр просроченной дебиторской задолженности. Приложение 7.2. ТЕСТ по заказам'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
КонецПроцедуры

&После("Печать")
Процедура ВИЛС_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрДебиторскойЗадолженностиПриложение_7_1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеестрДебиторскойЗадолженностиПриложение_7_1", НСтр("ru = 'Реестр дебиторской задолженности. Приложение 7.1.'"), 
			ПечатьРеестрДебиторскойЗадолженностиПриложение_7_1(МассивОбъектов, ОбъектыПечати), , "Документ.ИнвентаризацияРасчетовСКонтрагентами.ПФ_MXL_РеестрДебиторскойЗадолженностиПриложение_7_1");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрКредиторскойЗадолженностиПриложение_7_1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеестрКредиторскойЗадолженностиПриложение_7_1", НСтр("ru = 'Реестр кредиторской задолженности. Приложение 7.1.'"), 
			ПечатьРеестрКредиторскойЗадолженностиПриложение_7_1(МассивОбъектов, ОбъектыПечати), , "Документ.ИнвентаризацияРасчетовСКонтрагентами.ПФ_MXL_РеестрКредиторскойЗадолженностиПриложение_7_1");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2", НСтр("ru = 'Реестр просроченной дебиторской задолженности. Приложение 7.2.'"), 
			ПечатьРеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2(МассивОбъектов, ОбъектыПечати), , "Документ.ИнвентаризацияРасчетовСКонтрагентами.ПФ_MXL_РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрПросроченнойКредиторскойЗадолженностиПриложение_7_2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеестрПросроченнойКредиторскойЗадолженностиПриложение_7_2", НСтр("ru = 'Реестр просроченной кредиторской задолженности. Приложение 7.2.'"), 
			ПечатьРеестрПросроченнойКредиторскойЗадолженностиПриложение_7_2(МассивОбъектов, ОбъектыПечати), , "Документ.ИнвентаризацияРасчетовСКонтрагентами.ПФ_MXL_РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2");
	КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрДебиторскойЗадолженностиСЗаказамиПриложение_7_1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеестрДебиторскойЗадолженностиСЗаказамиПриложение_7_1", НСтр("ru = 'Реестр дебиторской задолженности (с заказами). Приложение 7.1.'"), 
			ПечатьРеестрДебиторскойЗадолженностиСЗаказамиПриложение_7_1(МассивОбъектов, ОбъектыПечати), , "Документ.ИнвентаризацияРасчетовСКонтрагентами.ПФ_MXL_РеестрДебиторскойЗадолженностиПриложение_7_1");
		КонецЕсли;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрКредиторскойЗадолженностиСЗаказамиПриложение_7_1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеестрКредиторскойЗадолженностиСЗаказамиПриложение_7_1", НСтр("ru = 'Реестр кредиторской задолженности. (с заказами) Приложение 7.1.'"), 
			ПечатьРеестрКредиторскойЗадолженностиСЗаказамиПриложение_7_1(МассивОбъектов, ОбъектыПечати), , "Документ.ИнвентаризацияРасчетовСКонтрагентами.ПФ_MXL_РеестрКредиторскойЗадолженностиПриложение_7_1");
	КонецЕсли;

КонецПроцедуры

// Функция формирует табличный документ с печатной формой Реестр дебиторской задолженности. 
//	Приложение 7.1. (табличный документ 1С:Предприятия)
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма приказа.
//
Функция ПечатьРеестрДебиторскойЗадолженностиПриложение_7_1(Знач МассивОбъектов, Знач ОбъектыПечати)
	ДтКт = "Дт";
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетовСконтрагентами_Дбт";
	Макет = ПолучитьМакет("ПФ_MXL_РеестрДебиторскойЗадолженностиПриложение_7_1");
	ТекстЗапроса = ПолучитьТекстЗапроса(ДтКт);
	ТекстЗаголовка = "Реестр дебиторской задолженности";
	Возврат(ПечатьРеестрЗадолженностиПриложение_7_1(МассивОбъектов, ОбъектыПечати, ТабДокумент, ДтКт, Макет, ТекстЗапроса, ТекстЗаголовка));
КонецФункции

Функция ПечатьРеестрДебиторскойЗадолженностиСЗаказамиПриложение_7_1(Знач МассивОбъектов, Знач ОбъектыПечати)
	ДтКт = "Дт";
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетовСконтрагентамиСЗаказами_Дбт";
	Макет = ПолучитьМакет("ПФ_MXL_РеестрДебиторскойЗадолженностиПриложение_7_1");
	ТекстЗапроса = ПолучитьТекстЗапросаСЗаказами(ДтКт);
	ТекстЗаголовка = "Реестр дебиторской задолженности (с заказами)";
	Возврат(ПечатьРеестрЗадолженностиПриложение_7_1(МассивОбъектов, ОбъектыПечати, ТабДокумент, ДтКт, Макет, ТекстЗапроса, ТекстЗаголовка));
КонецФункции

Функция ПечатьРеестрКредиторскойЗадолженностиПриложение_7_1(Знач МассивОбъектов, Знач ОбъектыПечати)
	ДтКт = "Кт";
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетовСконтрагентами_Крт";
	Макет = ПолучитьМакет("ПФ_MXL_РеестрКредиторскойЗадолженностиПриложение_7_1");
	ТекстЗапроса = ПолучитьТекстЗапроса(ДтКт);
	ТекстЗаголовка = "Реестр кредиторской задолженности";
	Возврат(ПечатьРеестрЗадолженностиПриложение_7_1(МассивОбъектов, ОбъектыПечати, ТабДокумент, ДтКт, Макет, ТекстЗапроса, ТекстЗаголовка));
КонецФункции

Функция ПечатьРеестрКредиторскойЗадолженностиСЗаказамиПриложение_7_1(Знач МассивОбъектов, Знач ОбъектыПечати)
	ДтКт = "Кт";
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетовСконтрагентамиСЗаказами_Крт";
	Макет = ПолучитьМакет("ПФ_MXL_РеестрКредиторскойЗадолженностиПриложение_7_1");
	ТекстЗапроса = ПолучитьТекстЗапросаСЗаказами(ДтКт);
	ТекстЗаголовка = "Реестр кредиторской задолженности (с заказами)";
	Возврат(ПечатьРеестрЗадолженностиПриложение_7_1(МассивОбъектов, ОбъектыПечати, ТабДокумент, ДтКт, Макет, ТекстЗапроса, ТекстЗаголовка));
КонецФункции

Функция ПечатьРеестрЗадолженностиПриложение_7_1(Знач МассивОбъектов, Знач ОбъектыПечати, ТабДокумент, Знач ДтКт = "Дт", Знач Макет, Знач ТекстЗапроса, Знач ТекстЗаголовка)
	ПервыйДокумент = Истина;
	
	Для каждого СсылкаОбъекта Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", СсылкаОбъекта);
		Запрос.Текст = ТекстЗапроса;
		ДатаДокументаИнветаризации = КонецДня(СсылкаОбъекта.Дата);
		Запрос.УстановитьПараметр("КонПериода", 		Новый Граница(ДатаДокументаИнветаризации, ВидГраницы.Включая));
		//Запрос.УстановитьПараметр("КонПериода1", 		Новый Граница(ДатаДокументаИнветаризации, ВидГраницы.Включая));
		
		ПакетЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		ВыборкаШапка = ПакетЗапросов[0].Выбрать();
		Если НЕ ВыборкаШапка.Следующий() Тогда
			Возврат ТабДокумент;
		КонецЕсли;
		//ДатаДокументаИнветаризации = КонецДня(ВыборкаШапка.Дата);
		
		
		
		Область = Макет.ПолучитьОбласть("Шапка");
				
		ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаШапка);
		
		Область.Параметры.ТекстЗаголовка 	= ТекстЗаголовка;
		Область.Параметры.Дата  			= Формат(ДатаДокументаИнветаризации, "ДФ=dd.MM.yyyy");	
		
		ТабДокумент.Вывести(Область);
		ТабДокумент.ФиксацияСверху = 5;
		
		СтруктураПоказателей = Новый Структура;
		СтруктураПоказателей.Вставить("НПП"								, 1);
		СтруктураПоказателей.Вставить("СуммаДЗБезРезерваИтого"			, 0);
		СтруктураПоказателей.Вставить("СуммаРезерва"					, 0);
		СтруктураПоказателей.Вставить("СуммаРезерваИтого"				, 0);
		СтруктураПоказателей.Вставить("СуммаДЗСРезервомИтого"			, 0);
		СтруктураПоказателей.Вставить("Колонка12ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка12ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка13ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка14ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка15ЧИтого"					, 0);   
		СтруктураПоказателей.Вставить("Колонка16ЧИтого"					, 0);    
		СтруктураПоказателей.Вставить("Колонка17ЧИтого"					, 0);    
		СтруктураПоказателей.Вставить("СуммаРезерваНУЧ"					, 0); 
		СтруктураПоказателей.Вставить("СуммаРезерваНУЧИтого"			, 0);  
		СтруктураПоказателей.Вставить("СуммаДЗБезРезерваПоСчетуИтого"	, 0); 
		СтруктураПоказателей.Вставить("СуммаРезерваПоСчетуИтого"		, 0);   
		СтруктураПоказателей.Вставить("СуммаДЗСРезервомПоСчетуИтого"	, 0);  
		СтруктураПоказателей.Вставить("Колонка12ЧПоСчетуИтого"			, 0);   
		СтруктураПоказателей.Вставить("Колонка13ЧПоСчетуИтого"			, 0);  
		СтруктураПоказателей.Вставить("Колонка14ЧПоСчетуИтого"			, 0);   
		СтруктураПоказателей.Вставить("Колонка15ЧПоСчетуИтого"			, 0);  
		СтруктураПоказателей.Вставить("Колонка16ЧПоСчетуИтого"			, 0);  
		СтруктураПоказателей.Вставить("Колонка17ЧПоСчетуИтого"			, 0);   
		СтруктураПоказателей.Вставить("СуммаРезерваНУЧПоСчетуИтого"		, 0);
		
		
		
		ТаблицаСтрокПоСчету = Новый ТаблицаЗначений();
		Колонки = ТаблицаСтрокПоСчету.Колонки;
		Колонки.Добавить("СчетИерархия");
		Колонки.Добавить("СчетГруппировка");
		Колонки.Добавить("СчетРасчетов");
		Колонки.Добавить("СтрокаИерархия");
		Колонки.Добавить("СтрокаГруппировка");
		Колонки.Добавить("СтрокаРасчетов");
		Колонки.Добавить("СтрокаДетальная");
		
		КоличествоВСтеке=0;
		ТекущийСчет				 = Неопределено;
		//ТекущийСчетПервогоУровня = Неопределено;
		//ТекущийСчетВторогоУровня = Неопределено;
		Выборка_3 				= ПакетЗапросов[3].Выбрать();
		ВыборкаДокументов 		= ПакетЗапросов[5].Выгрузить();
		ВыборкаОстатков 		= ПакетЗапросов[7].Выбрать();
		ВыборкаЗадолженность 	= ПакетЗапросов[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "СчетРасчетов");
		ВыбратьЭлементыВИерархии(ВыборкаЗадолженность, ТаблицаСтрокПоСчету, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке);        //ВыборкаОстатков, 
		
		Если ТаблицаСтрокПоСчету.Количество() > 1 Тогда
			ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету");
			ОбластьСтрока.Параметры.Итого			 	= "Итого по счету: " + ТаблицаСтрокПоСчету[0].СчетИерархия;
			ОбластьСтрока.Параметры.СуммаДЗБезРезерва 	= СтруктураПоказателей.СуммаДЗБезРезерваПоСчетуИтого;
			ОбластьСтрока.Параметры.СуммаРезерва		= СтруктураПоказателей.СуммаРезерваПоСчетуИтого;
			ОбластьСтрока.Параметры.СуммаДЗСРезервом	= СтруктураПоказателей.СуммаДЗСРезервомПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка12Ч			= СтруктураПоказателей.Колонка12ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка13Ч			= СтруктураПоказателей.Колонка13ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка14Ч			= СтруктураПоказателей.Колонка14ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка15Ч			= СтруктураПоказателей.Колонка15ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка16Ч			= СтруктураПоказателей.Колонка16ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка17Ч			= СтруктураПоказателей.Колонка17ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.СуммаРезерваНУ		= СтруктураПоказателей.СуммаРезерваНУЧПоСчетуИтого;
			
			СтруктураПоказателей.СуммаДЗБезРезерваИтого = СтруктураПоказателей.СуммаДЗБезРезерваИтого 	+ СтруктураПоказателей.СуммаДЗБезРезерваПоСчетуИтого;
			СтруктураПоказателей.СуммаРезерваИтого 		= СтруктураПоказателей.СуммаРезерваИтого 		+ СтруктураПоказателей.СуммаРезерваПоСчетуИтого;
			СтруктураПоказателей.СуммаДЗСРезервомИтого 	= СтруктураПоказателей.СуммаДЗСРезервомИтого 	+ СтруктураПоказателей.СуммаДЗСРезервомПоСчетуИтого;
			СтруктураПоказателей.Колонка12ЧИтого 		= СтруктураПоказателей.Колонка12ЧИтого 			+ СтруктураПоказателей.Колонка12ЧПоСчетуИтого;
			СтруктураПоказателей.Колонка13ЧИтого 		= СтруктураПоказателей.Колонка13ЧИтого 			+ СтруктураПоказателей.Колонка13ЧПоСчетуИтого;	
			СтруктураПоказателей.Колонка14ЧИтого 		= СтруктураПоказателей.Колонка14ЧИтого 			+ СтруктураПоказателей.Колонка14ЧПоСчетуИтого;
			СтруктураПоказателей.Колонка15ЧИтого 		= СтруктураПоказателей.Колонка15ЧИтого 			+ СтруктураПоказателей.Колонка15ЧПоСчетуИтого;
			СтруктураПоказателей.Колонка16ЧИтого 		= СтруктураПоказателей.Колонка16ЧИтого 			+ СтруктураПоказателей.Колонка16ЧПоСчетуИтого;
			СтруктураПоказателей.Колонка17ЧИтого 		= СтруктураПоказателей.Колонка17ЧИтого 			+ СтруктураПоказателей.Колонка17ЧПоСчетуИтого;
			СтруктураПоказателей.СуммаРезерваНУЧИтого	= СтруктураПоказателей.СуммаРезерваНУЧИтого 	+ СтруктураПоказателей.СуммаРезерваНУЧПоСчетуИтого;
				
			ТабДокумент.Вывести(ОбластьСтрока);
			ТабДокумент.НачатьГруппуСтрок("ИтогоПоСчету" + ТаблицаСтрокПоСчету[0].СчетИерархия, Ложь);
		
			ГруппировкаВыводилась = Ложь;
			Для Инд = 0 По ТаблицаСтрокПоСчету.Количество() - 1 Цикл
				Для Инд1 = 0 По ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов.Количество() - 1 Цикл
					ТабДокумент.Вывести(ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов[Инд1]);
					ТабДокумент.НачатьГруппуСтрок("ИтогоПодоговору" + ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов[Инд1].Параметры.ДоговорКонтрагента, Ложь);
					Для Инд2 = 0 По ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1].Количество() - 1 Цикл
						Если ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1][Инд2] = Неопределено Тогда Продолжить; КонецЕсли;
						ТабДокумент.Вывести(ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1][Инд2]);
					КонецЦикла;	          
					ТабДокумент.ЗакончитьГруппуСтрок();
				КонецЦикла;	
			КонецЦикла;
			ТабДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;	
				
		ОблИтого = Макет.ПолучитьОбласть("Итого");
		ОблИтого.Параметры.Итого			 = "Итого:";
		ОблИтого.Параметры.СуммаДЗБезРезерва = формат(СтруктураПоказателей.СуммаДЗБезРезерваИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.СуммаРезерва 	 = формат(СтруктураПоказателей.СуммаРезерваИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.СуммаДЗСРезервом  = формат(СтруктураПоказателей.СуммаДЗСРезервомИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка12Ч 	 	 = формат(СтруктураПоказателей.Колонка12ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка13Ч 	 	 = формат(СтруктураПоказателей.Колонка13ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка14Ч 	 	 = формат(СтруктураПоказателей.Колонка14ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка15Ч 	 	 = формат(СтруктураПоказателей.Колонка15ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка16Ч 	 	 = формат(СтруктураПоказателей.Колонка16ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка17Ч 	 	 = формат(СтруктураПоказателей.Колонка17ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.СуммаРезерваНУ	 = формат(СтруктураПоказателей.СуммаРезерваНУЧИтого, "ЧЦ=15; ЧДЦ=2");
		ТабДокумент.Вывести(ОблИтого);
		
		//ОблПод = Макет.ПолучитьОбласть("Подвал");
		//Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ВыборкаШапка.Организация, ДатаДокументаИнветаризации,);
		//ОблПод.Параметры.Бухгалтер    = Руководители.ГлавныйБухгалтер;
		//ТабДокумент.Вывести(ОблПод);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаОбъекта);
	КонецЦикла;
	Возврат ТабДокумент;
КонецФункции // ПечатьРеестрЗадолженностиПриложение_7_1()

Процедура ВыбратьЭлементыВИерархии(ВыборкаСИерархией, ТаблицаСтрокПоСчету, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке)  //ВыборкаОстатков, 
	Пока ВыборкаСИерархией.Следующий() Цикл
		Если ВыборкаСИерархией.ТипЗаписи()=ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			Если ТаблицаСтрокПоСчету.Количество() > 1 Тогда
				ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету");
				ОбластьСтрока.Параметры.Итого			 	= "Итого по счету: " + ТаблицаСтрокПоСчету[0].СчетИерархия;
				ОбластьСтрока.Параметры.СуммаДЗБезРезерва 	= СтруктураПоказателей.СуммаДЗБезРезерваПоСчетуИтого;
				ОбластьСтрока.Параметры.СуммаРезерва		= СтруктураПоказателей.СуммаРезерваПоСчетуИтого;
				ОбластьСтрока.Параметры.СуммаДЗСРезервом	= СтруктураПоказателей.СуммаДЗСРезервомПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка12Ч			= СтруктураПоказателей.Колонка12ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка13Ч			= СтруктураПоказателей.Колонка13ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка14Ч			= СтруктураПоказателей.Колонка14ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка15Ч			= СтруктураПоказателей.Колонка15ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка16Ч			= СтруктураПоказателей.Колонка16ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка17Ч			= СтруктураПоказателей.Колонка17ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.СуммаРезерваНУ		= СтруктураПоказателей.СуммаРезерваНУЧПоСчетуИтого;
				
				ТабДокумент.Вывести(ОбластьСтрока);
				ТабДокумент.НачатьГруппуСтрок("ИтогоПоСчету" + ТаблицаСтрокПоСчету[0].СчетИерархия, Ложь);
				
				ГруппировкаВыводилась = Ложь;
				Для Инд = 0 По ТаблицаСтрокПоСчету.Количество() - 1 Цикл
					Для Инд1 = 0 По ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов.Количество() - 1 Цикл
						ТабДокумент.Вывести(ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов[Инд1]);
						ТабДокумент.НачатьГруппуСтрок("ИтогоПодоговору" + ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов[Инд1].Параметры.ДоговорКонтрагента, Ложь);
						Для Инд2 = 0 По ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1].Количество() - 1 Цикл
							Если ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1][Инд2] = Неопределено Тогда Продолжить; КонецЕсли;
							ТабДокумент.Вывести(ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1][Инд2]);
						КонецЦикла;	          
						ТабДокумент.ЗакончитьГруппуСтрок();
					КонецЦикла;	
				КонецЦикла;
				ТабДокумент.ЗакончитьГруппуСтрок();
				
				СтруктураПоказателей.СуммаДЗБезРезерваИтого = СтруктураПоказателей.СуммаДЗБезРезерваИтого 	+ СтруктураПоказателей.СуммаДЗБезРезерваПоСчетуИтого;
				СтруктураПоказателей.СуммаРезерваИтого 		= СтруктураПоказателей.СуммаРезерваИтого 		+ СтруктураПоказателей.СуммаРезерваПоСчетуИтого;
				СтруктураПоказателей.СуммаДЗСРезервомИтого 	= СтруктураПоказателей.СуммаДЗСРезервомИтого 	+ СтруктураПоказателей.СуммаДЗСРезервомПоСчетуИтого;
				СтруктураПоказателей.Колонка12ЧИтого 		= СтруктураПоказателей.Колонка12ЧИтого 			+ СтруктураПоказателей.Колонка12ЧПоСчетуИтого;
				СтруктураПоказателей.Колонка13ЧИтого 		= СтруктураПоказателей.Колонка13ЧИтого 			+ СтруктураПоказателей.Колонка13ЧПоСчетуИтого;	
				СтруктураПоказателей.Колонка14ЧИтого 		= СтруктураПоказателей.Колонка14ЧИтого 			+ СтруктураПоказателей.Колонка14ЧПоСчетуИтого;
				СтруктураПоказателей.Колонка15ЧИтого 		= СтруктураПоказателей.Колонка15ЧИтого 			+ СтруктураПоказателей.Колонка15ЧПоСчетуИтого;
				СтруктураПоказателей.Колонка16ЧИтого 		= СтруктураПоказателей.Колонка16ЧИтого 			+ СтруктураПоказателей.Колонка16ЧПоСчетуИтого;
				СтруктураПоказателей.Колонка17ЧИтого 		= СтруктураПоказателей.Колонка17ЧИтого 			+ СтруктураПоказателей.Колонка17ЧПоСчетуИтого;
				СтруктураПоказателей.СуммаРезерваНУЧИтого	= СтруктураПоказателей.СуммаРезерваНУЧИтого 	+ СтруктураПоказателей.СуммаРезерваНУЧПоСчетуИтого;
				
				СтруктураПоказателей.Вставить("СуммаРезерва"					, 0);
				СтруктураПоказателей.Вставить("СуммаРезерваНУЧ"					, 0); 
				СтруктураПоказателей.Вставить("СуммаДЗБезРезерваПоСчетуИтого"	, 0); 
				СтруктураПоказателей.Вставить("СуммаРезерваПоСчетуИтого"		, 0);   
				СтруктураПоказателей.Вставить("СуммаДЗСРезервомПоСчетуИтого"	, 0);  
				СтруктураПоказателей.Вставить("Колонка12ЧПоСчетуИтого"			, 0);   
				СтруктураПоказателей.Вставить("Колонка13ЧПоСчетуИтого"			, 0);  
				СтруктураПоказателей.Вставить("Колонка14ЧПоСчетуИтого"			, 0);   
				СтруктураПоказателей.Вставить("Колонка15ЧПоСчетуИтого"			, 0);  
				СтруктураПоказателей.Вставить("Колонка16ЧПоСчетуИтого"			, 0);  
				СтруктураПоказателей.Вставить("Колонка17ЧПоСчетуИтого"			, 0);   
				СтруктураПоказателей.Вставить("СуммаРезерваНУЧПоСчетуИтого"		, 0);
			КонецЕсли;
			Если ТаблицаСтрокПоСчету.Количество() и ВыборкаСИерархией.СчетРасчетов.Родитель = ТаблицаСтрокПоСчету[0].СчетИерархия Тогда
				СтрокаТЗ = ТаблицаСтрокПоСчету[ТаблицаСтрокПоСчету.Количество() - 1];
				СтрокаТЗ.СчетГруппировка = ВыборкаСИерархией.СчетРасчетов;
			Иначе	
				ТаблицаСтрокПоСчету.Очистить();
				СтрокаТЗ = ТаблицаСтрокПоСчету.Добавить();
				СтрокаТЗ.СчетИерархия = ВыборкаСИерархией.СчетРасчетов;
				СтрокаТЗ.СтрокаИерархия = ОбластьСтрока;
				СтрокаТЗ.СтрокаРасчетов = Новый Массив();
				СтрокаТЗ.СтрокаДетальная = Новый Массив(1, 1);
			КонецЕсли;	
			
			ВыбратьЭлементыВИерархии(ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией,"СчетРасчетов"), ТаблицаСтрокПоСчету, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке);	//ВыборкаОстатков, 
		ИначеЕсли ВыборкаСИерархией.ТипЗаписи()=ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			//ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету");
			//ОбластьСтрока.Параметры.Итого			 	= "Итого по счету: " + ВыборкаСИерархией.СчетРасчетов;
			//ОбластьСтрока.Параметры.СуммаДЗБезРезерва 	= СтруктураПоказателей.СуммаДЗБезРезерваПоСчетуИтого;
			//ОбластьСтрока.Параметры.СуммаРезерва		= СтруктураПоказателей.СуммаРезерваПоСчетуИтого;
			//ОбластьСтрока.Параметры.СуммаДЗСРезервом	= СтруктураПоказателей.СуммаДЗСРезервомПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка12Ч			= СтруктураПоказателей.Колонка12ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка13Ч			= СтруктураПоказателей.Колонка13ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка14Ч			= СтруктураПоказателей.Колонка14ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка15Ч			= СтруктураПоказателей.Колонка15ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка16Ч			= СтруктураПоказателей.Колонка16ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка17Ч			= СтруктураПоказателей.Колонка17ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.СуммаРезерваНУ		= СтруктураПоказателей.СуммаРезерваНУЧПоСчетуИтого;
			
			СтрокаТЗ = ТаблицаСтрокПоСчету[ТаблицаСтрокПоСчету.Количество() - 1];
			СтрокаТЗ.СчетГруппировка = ВыборкаСИерархией.СчетРасчетов;
			//СтрокаТЗ.СтрокаГруппировка = ОбластьСтрока;
			
			ВыбратьЭлементыБезИерархии(ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), ТаблицаСтрокПоСчету, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке);	//ВыборкаОстатков, 
		ИначеЕсли ВыборкаСИерархией.ТипЗаписи()=ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
      		ВыбратьЭлементы(ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.Прямой), ТаблицаСтрокПоСчету, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, КоличествоВСтеке);	 //ВыборкаОстатков, 
    	КонецЕсли;   
  	КонецЦикла;
КонецПроцедуры

Процедура ВыбратьЭлементыБезИерархии(ВыборкаБезИерархии, ТаблицаСтрокПоСчету, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке)     //ВыборкаОстатков, 
	Пока ВыборкаБезИерархии.Следующий() Цикл
		СуммаДЗБезРезерва = ВыборкаБезИерархии.Подтверждено + ВыборкаБезИерархии.НеПодтверждено;
		Если СуммаДЗБезРезерва = 0 Тогда Продолжить; КонецЕсли;
		
		//МассивСтрокОстатковПоДоговору = ВыборкаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Выборка_3.Сбросить();
		
		ДанныеОДок = ПолучитьДанныеСтроки(ВыборкаШапка, ВыборкаБезИерархии, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ДтКт, СуммаДЗБезРезерва); 
		
		ТЗДляСтруктуры = ДанныеОДок.ТЗДляСтруктуры;
		КоличествоСтрокТЗДляСтруктуры = ТЗДляСтруктуры.Количество();
		Если КоличествоСтрокТЗДляСтруктуры = 0 Тогда Продолжить; КонецЕсли; 
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьСтрока.Параметры.Заполнить(ДанныеОДок);
		//ОбластьСтрока.Параметры.НомерСтроки = НПП;
		СтруктураПоказателей.НПП = СтруктураПоказателей.НПП + 1;
		
		СведенияОбКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаБезИерархии.Контрагент, ВыборкаШапка.КонецПериода);
		КонтраНаим = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование, ЮридическийАдрес, Телефоны");
		
		ОбластьСтрока.Параметры.НаименованиеСтр = КонтраНаим;
		ОбластьСтрока.Параметры.Счет = ВыборкаБезИерархии.СчетРасчетов;
		ОбластьСтрока.Параметры.НомерДоговора = ?(ЗначениеЗаполнено(ВыборкаБезИерархии.ДоговорКонтрагента),?(ЗначениеЗаполнено(ВыборкаБезИерархии.ДоговорКонтрагента.Номер), ВыборкаБезИерархии.ДоговорКонтрагента.Номер, ВыборкаБезИерархии.ДоговорКонтрагента.Наименование), "б.н.");
		ОбластьСтрока.Параметры.ДатаДоговора = ?(ЗначениеЗаполнено(ВыборкаБезИерархии.ДоговорКонтрагента),ВыборкаБезИерархии.ДоговорКонтрагента.Дата, Дата(1,1,1,0,0,0));
		ОбластьСтрока.Параметры.ИНН = ВыборкаБезИерархии.Контрагент.ИНН;
		
		ОбластьСтрока.Параметры.ДатаДолга = ТЗДляСтруктуры[КоличествоСтрокТЗДляСтруктуры - 1].ДатаДок;
		
		//СуммаДЗБезРезерва 							= ВыборкаБезИерархии.Подтверждено + ВыборкаБезИерархии.НеПодтверждено;
		//Если СуммаДЗБезРезерва = 0 Тогда Продолжить; КонецЕсли;
		СуммаРезерва 								= ДанныеОДок.СуммаРезерва;
		СуммаДЗСРезервом                            = СуммаДЗБезРезерва - СуммаРезерва;
		ОбластьСтрока.Параметры.СуммаДЗБезРезерва 	= СуммаДЗБезРезерва;
		ОбластьСтрока.Параметры.СуммаРезерва        = СуммаРезерва;
		ОбластьСтрока.Параметры.СуммаДЗСРезервом 	= СуммаДЗСРезервом;
		
		ОбластьСтрока.Параметры.Колонка12Ч = 0;
		ОбластьСтрока.Параметры.Колонка13Ч = 0;
		ОбластьСтрока.Параметры.Колонка14Ч = 0;
		ОбластьСтрока.Параметры.Колонка15Ч = 0;
		ОбластьСтрока.Параметры.Колонка16Ч = 0; 
		ОбластьСтрока.Параметры.Колонка17Ч = 0;
		Для каждого СтрТЗ Из ТЗДляСтруктуры Цикл
			ОбластьСтрока.Параметры.Колонка12Ч = ОбластьСтрока.Параметры.Колонка12Ч + СтрТЗ.Колонка12;
			ОбластьСтрока.Параметры.Колонка13Ч = ОбластьСтрока.Параметры.Колонка13Ч + СтрТЗ.Колонка13;
			ОбластьСтрока.Параметры.Колонка14Ч = ОбластьСтрока.Параметры.Колонка14Ч + СтрТЗ.Колонка14;
			ОбластьСтрока.Параметры.Колонка15Ч = ОбластьСтрока.Параметры.Колонка15Ч + СтрТЗ.Колонка15;
			ОбластьСтрока.Параметры.Колонка16Ч = ОбластьСтрока.Параметры.Колонка16Ч + СтрТЗ.Колонка16;
			ОбластьСтрока.Параметры.Колонка17Ч = ОбластьСтрока.Параметры.Колонка17Ч + СтрТЗ.Колонка17;
		КонецЦикла;
		
		Если 	Не ?(ОбластьСтрока.Параметры.СуммаДЗБезРезерва  = Неопределено, 0, ОбластьСтрока.Параметры.СуммаДЗБезРезерва) = 0 
			или Не ?(ОбластьСтрока.Параметры.СуммаРезерва  		= Неопределено, 0, ОбластьСтрока.Параметры.СуммаРезерва) = 0
			или Не ?(ОбластьСтрока.Параметры.СуммаДЗСРезервом  	= Неопределено, 0, ОбластьСтрока.Параметры.СуммаДЗСРезервом) = 0
			или Не ?(ОбластьСтрока.Параметры.Колонка12Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка12Ч) = 0
			или Не ?(ОбластьСтрока.Параметры.Колонка13Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка13Ч) = 0
			или Не ?(ОбластьСтрока.Параметры.Колонка14Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка14Ч) = 0
			или Не ?(ОбластьСтрока.Параметры.Колонка15Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка15Ч) = 0
			или Не ?(ОбластьСтрока.Параметры.Колонка16Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка16Ч) = 0
			или Не ?(ОбластьСтрока.Параметры.Колонка17Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка17Ч) = 0
			или Не ?(ОбластьСтрока.Параметры.СуммаРезерваНУ  	= Неопределено, 0, ОбластьСтрока.Параметры.СуммаРезерваНУ) = 0
			Тогда
			СтрокаТЗ1 = ТаблицаСтрокПоСчету[ТаблицаСтрокПоСчету.Количество() - 1];
			Если ЗначениеЗаполнено(СтрокаТЗ1.СчетРасчетов) тогда
				СтрокаТЗ = ТаблицаСтрокПоСчету.Добавить();
				СтрокаТЗ.СчетИерархия 		= СтрокаТЗ1.СчетИерархия;
				СтрокаТЗ.СчетГруппировка 	= СтрокаТЗ1.СчетГруппировка;
				СтрокаТЗ.СчетРасчетов 		= ВыборкаБезИерархии.СчетРасчетов;
				СтрокаТЗ.СтрокаРасчетов = Новый Массив();
				СтрокаТЗ.СтрокаДетальная = Новый Массив(100, 1);
			Иначе
				СтрокаТЗ = СтрокаТЗ1;
				СтрокаТЗ.СчетРасчетов 		= ВыборкаБезИерархии.СчетРасчетов;
			КонецЕсли;	
			СтрокаТЗ.СтрокаРасчетов.Добавить(ОбластьСтрока);
			//Если СтрокаТЗ.СтрокаДетальная = Неопределено Тогда
			//	СтрокаТЗ.СтрокаДетальная = Новый Массив(100, 100);
			//КонецЕсли;	
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтруктураПоказателей.Колонка12ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка12ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка12Ч;
		СтруктураПоказателей.Колонка13ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка13ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка13Ч;
		СтруктураПоказателей.Колонка14ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка14ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка14Ч;
		СтруктураПоказателей.Колонка15ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка15ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка15Ч;
		СтруктураПоказателей.Колонка16ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка16ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка16Ч;
		СтруктураПоказателей.Колонка17ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка17ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка17Ч;
		
		СтруктураПоказателей.СуммаДЗБезРезерваПоСчетуИтого = СтруктураПоказателей.СуммаДЗБезРезерваПоСчетуИтого + СуммаДЗБезРезерва;
		СтруктураПоказателей.СуммаРезерваПоСчетуИтого 	= СтруктураПоказателей.СуммаРезерваПоСчетуИтого + СуммаРезерва;
		СтруктураПоказателей.СуммаДЗСРезервомПоСчетуИтого = СтруктураПоказателей.СуммаДЗСРезервомПоСчетуИтого + СуммаДЗСРезервом;
		
		Для каждого СтрокаТЗДляСтруктуры Из ТЗДляСтруктуры Цикл
			ОбластьСтрокаД = Макет.ПолучитьОбласть("СтрокаДетальная");
			ОбластьСтрокаД.Параметры.ДатаДолга 	= СтрокаТЗДляСтруктуры.ДатаДок;
			ОбластьСтрокаД.Параметры.ЗаЧто 		= СтрокаТЗДляСтруктуры.ЗаЧто;
			ОбластьСтрокаД.Параметры.Регистратор= СтрокаТЗДляСтруктуры.Регистратор;
			ОбластьСтрокаД.Параметры.Колонка12Ч = СтрокаТЗДляСтруктуры.Колонка12;
			ОбластьСтрокаД.Параметры.Колонка13Ч = СтрокаТЗДляСтруктуры.Колонка13;
			ОбластьСтрокаД.Параметры.Колонка14Ч = СтрокаТЗДляСтруктуры.Колонка14;
			ОбластьСтрокаД.Параметры.Колонка15Ч = СтрокаТЗДляСтруктуры.Колонка15;
			ОбластьСтрокаД.Параметры.Колонка16Ч = СтрокаТЗДляСтруктуры.Колонка16;
			ОбластьСтрокаД.Параметры.Колонка17Ч = СтрокаТЗДляСтруктуры.Колонка17;
			Если СтрокаТЗ.СтрокаДетальная[СтрокаТЗ.СтрокаРасчетов.ВГраница()][0] = Неопределено Тогда
				СтрокаТЗ.СтрокаДетальная[СтрокаТЗ.СтрокаРасчетов.ВГраница()].Вставить(0, ОбластьСтрокаД);
			Иначе	
				СтрокаТЗ.СтрокаДетальная[СтрокаТЗ.СтрокаРасчетов.ВГраница()].Добавить(ОбластьСтрокаД);
			КонецЕсли;	
		КонецЦикла;
		
		
	КонецЦикла;
КонецПроцедуры

Процедура ВыбратьЭлементы(Выборка, ТаблицаСтрокПоСчету, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, КоличествоВСтеке)    //ВыборкаОстатков, 
	//Пока Выборка.Следующий() Цикл
    // Вставить обработку выборки ВыборкаБезИерархии
	//КонецЦикла;
КонецПроцедуры

Функция ПолучитьДанныеСтроки(Знач ВыборкаШапка, Знач ВыборкаБезИерархии, Знач ВыборкаДокументов, Знач ВыборкаОстатков, Знач Выборка_3, Знач ДтКт = "Дт", Знач СуммаДолгаПоДоговору = 0, Знач Просроченная = Ложь, Знач ДанныеОДокПросроч = Неопределено) 
	КонПериода 		= ВыборкаШапка.КонецПериода;
	Организация 	= ВыборкаШапка.Организация;
	Счет            = ВыборкаБезИерархии.СчетРасчетов;
	Контрагент		= ВыборкаБезИерархии.Контрагент;
	ДоговорКонтрагента = ВыборкаБезИерархии.ДоговорКонтрагента;
	
	СуммаРезерва 	= ПолучитьРезерв(Счет, Контрагент, ДоговорКонтрагента, Выборка_3);
	СтруктураСтроки = Новый Структура;     //Просроченная 
	
	ТЗДляСтруктуры = новый ТаблицаЗначений;
	ТЗДляСтруктуры.Колонки.Добавить("ТипДокумента");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаДок");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаДокСист");
	ТЗДляСтруктуры.Колонки.Добавить("НомерДок");
	ТЗДляСтруктуры.Колонки.Добавить("ЗаЧто");
	ТЗДляСтруктуры.Колонки.Добавить("ПроверятьГалочку");
	ТЗДляСтруктуры.Колонки.Добавить("Регистратор");
	
	ТЗДляСтруктуры.Колонки.Добавить("ДатаПогашенияДЗ");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаПогашенияДЗСтр");
	
	ТЗДляСтруктуры.Колонки.Добавить("Колонка12", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка13", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка14", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка15", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка16", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка17", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	СписокСтрокПоТекущейЗадолженности1 = Новый Массив();
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(ВыборкаБезИерархии.СчетРасчетов);
	Если ЗначениеЗаполнено(ВыборкаБезИерархии.ДоговорКонтрагента) и ТипЗнч(ВыборкаБезИерархии.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Если ВыборкаБезИерархии.ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
			и ВыборкаБезИерархии.СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаБезИерархии.Контрагент, ВыборкаБезИерархии.ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
			СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
		ИначеЕсли ВыборкаБезИерархии.ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
			и ВыборкаБезИерархии.СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками Тогда
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаБезИерархии.Контрагент, ВыборкаБезИерархии.ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
			СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
		КонецЕсли; 
	КонецЕсли;
	//СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаЗадолженность.Контрагент, ВыборкаЗадолженность.ДоговорКонтрагента, МассивСчетов);
	СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаБезИерархии.Контрагент, ВыборкаБезИерархии.ДоговорКонтрагента, ВыборкаБезИерархии.СчетРасчетов);
	СписокСтрокПоТекущейЗадолженности = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрокПоТекущейЗадолженности1.Количество() Тогда
		Для Каждого СтрокаТЗТЗ Из СписокСтрокПоТекущейЗадолженности1 Цикл
			Если СписокСтрокПоТекущейЗадолженности.Найти(СтрокаТЗТЗ) = Неопределено Тогда
				СписокСтрокПоТекущейЗадолженности.Добавить(СтрокаТЗТЗ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МассивОбъектовРасчета = Новый Массив();
	Для Каждого ЭлМассива Из СписокСтрокПоТекущейЗадолженности Цикл
		Если Не МассивОбъектовРасчета.Найти(ЭлМассива.ОбъектРасчетов) = Неопределено Тогда Продолжить; КонецЕсли;
		МассивОбъектовРасчета.Добавить(ЭлМассива.ОбъектРасчетов);
	КонецЦикла;
	
	КоличествоОбъектовРасчета = МассивОбъектовРасчета.Количество();
	Для Каждого ЭлМассива Из МассивОбъектовРасчета Цикл	  
		Если КоличествоОбъектовРасчета > 1 Тогда
			СписокСтрокПоТекущейЗадолженности1 = Новый Массив();
			МассивСчетов = Новый Массив();
			МассивСчетов.Добавить(ВыборкаБезИерархии.СчетРасчетов);
			Если ЗначениеЗаполнено(ВыборкаБезИерархии.ДоговорКонтрагента) и ТипЗнч(ВыборкаБезИерархии.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Если ВыборкаБезИерархии.ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
					и ВыборкаБезИерархии.СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
					МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
					СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет, ОбъектРасчетов", ВыборкаБезИерархии.Контрагент, ВыборкаБезИерархии.ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным, ЭлМассива);
					СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
				ИначеЕсли ВыборкаБезИерархии.ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
					и ВыборкаБезИерархии.СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками Тогда
					МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
					СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет, ОбъектРасчетов", ВыборкаБезИерархии.Контрагент, ВыборкаБезИерархии.ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным, ЭлМассива);
					СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
				КонецЕсли; 
			КонецЕсли;
			//СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаЗадолженность.Контрагент, ВыборкаЗадолженность.ДоговорКонтрагента, МассивСчетов);
			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет, ОбъектРасчетов", ВыборкаБезИерархии.Контрагент, ВыборкаБезИерархии.ДоговорКонтрагента, ВыборкаБезИерархии.СчетРасчетов, ЭлМассива);
			СписокСтрокПоТекущейЗадолженности = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрокПоТекущейЗадолженности1.Количество() Тогда
				Для Каждого СтрокаТЗТЗ Из СписокСтрокПоТекущейЗадолженности1 Цикл
					Если СписокСтрокПоТекущейЗадолженности.Найти(СтрокаТЗТЗ) = Неопределено Тогда
						СписокСтрокПоТекущейЗадолженности.Добавить(СтрокаТЗТЗ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ВыборкаОстатков.Сбросить();
			СуммаДолгаПоДоговору = ПолучитьОстаток(Счет, Контрагент, ДоговорКонтрагента, ЭлМассива, ВыборкаОстатков, ДтКт);
			Если СуммаДолгаПоДоговору = 0 Тогда Продолжить; КонецЕсли;
		КонецЕсли;	
	
		ТаблицаДокументовДолга = ПолучитьТаблицуДокументовДолга(СписокСтрокПоТекущейЗадолженности, СуммаДолгаПоДоговору, ДтКт);
		
		Для каждого ВыборкаДетальныеЗаписи из ТаблицаДокументовДолга цикл
			НовСтрока = ТЗДляСтруктуры.Добавить();
			НовСтрока.Регистратор = ВыборкаДетальныеЗаписи.Регистратор;
			ЗаполнитьСтрокуДаннымиДокумента(НовСтрока, ВыборкаДетальныеЗаписи.Регистратор
				, ?(ЗначениеЗаполнено(ЭлМассива) и (ТипЗнч(ЭлМассива) = Тип("СправочникСсылка.ДоговорыКонтрагентов") или ТипЗнч(ЭлМассива) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями")), "", ЭлМассива)
				, ВыборкаДетальныеЗаписи.ПроверятьГалочку, ВыборкаДетальныеЗаписи.ЕстьУслуги);
			ЗаполнитьСтрокуДаннымиДоговора(НовСтрока, ДоговорКонтрагента);
					
			НовСтрока.Колонка12 = 0;
			НовСтрока.Колонка13 = 0;
			НовСтрока.Колонка14 = 0; 
			НовСтрока.Колонка15 = 0;
			НовСтрока.Колонка16 = 0;
			НовСтрока.Колонка17 = 0;
			КолДней = (КонПериода - НовСтрока.ДатаДок) / (60 * 60 * 24);   // fix Suetin 23.10.2017 16:14:54  ТЗДляСтруктуры[КоличествоСтрок - 1].ДатаДок
			
			Если КолДней > 1095 Тогда
				НовСтрока.Колонка16 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			ИначеЕсли КолДней > 180 Тогда
				НовСтрока.Колонка15 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;	
			ИначеЕсли КолДней > 90 Тогда
				НовСтрока.Колонка14 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			ИначеЕсли КолДней > 30 Тогда
				НовСтрока.Колонка13 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			Иначе	//Если КолДней > 0 Тогда
				НовСтрока.Колонка12 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			КонецЕсли; 
			Если НовСтрока.ДатаПогашенияДЗ > Дата(1,1,1) и Не НовСтрока.ДатаПогашенияДЗ > КонПериода Тогда
				НовСтрока.Колонка17 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;	
	
	//ПараметрыОтбора = Новый Структура("Колонка11,Колонка12,Колонка13,Колонка14,Колонка15", 0, 0, 0, 0, 0);
	//МассивСтрокПросроченных = ТЗДляСтруктуры.НайтиСтроки(ПараметрыОтбора);
	//Для каждого СтрокаНеПросроч Из МассивСтрокПросроченных Цикл
	//	ТЗДляСтруктуры.Удалить(СтрокаНеПросроч);
	//КонецЦикла;
	
	ТЗДляСтруктуры.Свернуть("ТипДокумента, ДатаДок, НомерДок, ДатаДокСист, ЗаЧто, ПроверятьГалочку, Регистратор, ДатаПогашенияДЗ, ДатаПогашенияДЗСтр", "Колонка12, Колонка13, Колонка14, Колонка15, Колонка16, Колонка17");
	ТЗДляСтруктуры.Сортировать("ДатаДок Убыв, ЗаЧто Возр");
	ТипДокумента 	= "";
	ДатаДок 		= "";
	НомерДок 		= "";
	//ДатаПогашенияДЗ = Дата;
	Для каждого СтрокаДС из ТЗДляСтруктуры цикл
		ТипДокумента = ТипДокумента + ?(ТипДокумента = "", "", Символы.ПС) + строкаДС.ТипДокумента; 	
		НомерДок = НомерДок + ?(НомерДок = "", "", Символы.ПС) + ?(строкаДС.НомерДок = "", "б/н", строкаДС.НомерДок);
		ДатаДок = ДатаДок + ?(ДатаДок = "", "", Символы.ПС) + ?(строкаДС.ДатаДок = Дата(1,1,1,0,0,0), "б/д", Формат(строкаДС.ДатаДок, "ДФ=dd.MM.yyyy"));
		//ДатаПогашенияДЗ = ?(ТипЗнч(СтрокаДС.ДатаПогашенияДЗ) = Тип("Дата"), Мин(ДатаПогашенияДЗ, СтрокаДС.ДатаПогашенияДЗ), ДатаПогашенияДЗ);
	КонецЦикла;
	КоличествоСтрок = ТЗДляСтруктуры.Количество();
	СтруктураСтроки.Вставить("ДокСтр"					, ТипДокумента);
	СтруктураСтроки.Вставить("ДатаДок"					, ДатаДок);
	СтруктураСтроки.Вставить("НомерДок"					, НомерДок);
	СтруктураСтроки.Вставить("ЗаЧто"					, ?(ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов"), ДоговорКонтрагента.ТипДоговора, ""));
	СтруктураСтроки.Вставить("ДатаПогашенияДЗ"			, ?(КоличествоСтрок, ТЗДляСтруктуры[КоличествоСтрок - 1].ДатаПогашенияДЗСтр, ""));
	СтруктураСтроки.Вставить("Регистратор"				, ?(КоличествоСтрок, ТЗДляСтруктуры[КоличествоСтрок - 1].Регистратор, Неопределено));  
	СтруктураСтроки.Вставить("ТЗДляСтруктуры"			, ТЗДляСтруктуры);
	СтруктураСтроки.Вставить("СуммаРезерва"				, СуммаРезерва);
	СтруктураСтроки.Вставить("ИсполняющееПодразделение"	, ?(ЗначениеЗаполнено(ДоговорКонтрагента), ДоговорКонтрагента.Подразделение, Справочники.СтруктураПредприятия.ПустаяСсылка()));    //  ИсполняющееПодразделение
	СтруктураСтроки.Вставить("Контрагент"				, Контрагент);
	СтруктураСтроки.Вставить("ДоговорКонтрагента"		, ДоговорКонтрагента);
	
	Возврат СтруктураСтроки;
	
КонецФункции	//ПолучитьДанныеСтроки()	                    

Процедура ЗаполнитьСтрокуДаннымиДокумента(НовСтрока, Регистратор, ЗаЧто, ПроверятьГалочку, ЕстьУслуги = Ложь)
	НовСтрока.ЗаЧто 			= ЗаЧто;
	НовСтрока.ПроверятьГалочку 	= ПроверятьГалочку;
	НовСтрока.ДатаДок 			= Регистратор.Дата;
	НовСтрока.ДатаДокСист 		= НовСтрока.ДатаДок;

	Попытка
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОтчетДавальцу") тогда   //    РеализацияУслугПоПереработке
			НовСтрока.ТипДокумента = "акт выполненных услуг";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПередачаДавальцу") тогда   //    РеализацияУслугПоПереработке
			НовСтрока.ТипДокумента = "накладная";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
		
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
			Если ЕстьУслуги тогда
				НовСтрока.ТипДокумента = "акт выполненных услуг";
			Иначе
				НовСтрока.ТипДокумента = "накладная";
			КонецЕсли;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
		
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") тогда
			Если ЕстьУслуги тогда
				НовСтрока.ТипДокумента = "акт выполненных услуг";
			Иначе
				НовСтрока.ТипДокумента = "накладная";
			КонецЕсли;
			НовСтрока.ДатаДок 		= ?(Регистратор.ДатаВходящегоДокумента = Дата(1,1,1), Регистратор.Дата, Регистратор.ДатаВходящегоДокумента);
			НовСтрока.НомерДок 		= ?(Регистратор.НомерВходящегоДокумента = "", "б/н", Регистратор.НомерВходящегоДокумента);
		
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеТоваровНаСклад") тогда
			Если ЕстьУслуги тогда
				НовСтрока.ТипДокумента = "акт выполненных услуг";
			Иначе
				НовСтрока.ТипДокумента = "накладная";
			КонецЕсли;
			НовСтрока.ДатаДок 		= ?(Регистратор.ДатаВходящегоДокумента = Дата(1,1,1), Регистратор.Дата, Регистратор.ДатаВходящегоДокумента);
			НовСтрока.НомерДок 		= ?(Регистратор.НомерВходящегоДокумента = "", "б/н", Регистратор.НомерВходящегоДокумента);

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") тогда
			НовСтрока.ТипДокумента 	= "платежное поручение";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") тогда
			НовСтрока.ТипДокумента 	= "платежное поручение";
			НовСтрока.ДатаДок 		= ?(Регистратор.ДатаВходящегоДокумента = Дата(1,1,1), Регистратор.Дата, Регистратор.ДатаВходящегоДокумента);
			НовСтрока.НомерДок 		= ?(Регистратор.НомерВходящегоДокумента = "", "б/н", Регистратор.НомерВходящегоДокумента);

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") тогда
			НовСтрока.ТипДокумента 	= "ПКО";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") тогда
			НовСтрока.ТипДокумента 	= "РКО";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.АвансовыйОтчет") тогда
			НовСтрока.ТипДокумента 	= "Авансовый отчет";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОперацияБух") тогда
			НовСтрока.ТипДокумента 	= "Опреация бух.";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);

		//ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") тогда  //?????????????????????????????
		//	НовСтрока.ТипДокумента 	= "акт выполненных услуг";
		//	НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПервичныйДокумент") тогда
			НовСтрока.ТипДокумента 	= "" + Регистратор.ТипПервичногоДокумента;//"д/расч.";
			НовСтрока.ДатаДок 		= ?(Регистратор.ДатаВходящегоДокумента = Дата(1,1,1), Регистратор.Дата, Регистратор.ДатаВходящегоДокумента);;
			НовСтрока.НомерДок 		= ?(Регистратор.НомерВходящегоДокумента = "", "б/н", Регистратор.НомерВходящегоДокумента);	//ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаЗадолженностиПоФинансовымИнструментам") тогда
			НовСтрока.ТипДокумента 	= "к/задолженности";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") тогда
			НовСтрока.ТипДокумента 	= "в/задолженности";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.СписаниеЗадолженности") тогда
			НовСтрока.ТипДокумента 	= "с/задолженности";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") тогда
			НовСтрока.ТипДокумента 	= "доп/расх";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВводОстатков") тогда
			НовСтрока.ТипДокумента 	= "Ввод нач. остатков";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") тогда
			НовСтрока.ТипДокумента 	= "Корректировка реализ.";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаПриобретения") тогда
			НовСтрока.ТипДокумента 	= "Корректировка поступ.";                                                            
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") тогда
			НовСтрока.ТипДокумента 	= "Накладная";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") тогда
			НовСтрока.ТипДокумента 	= "Накладная";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.НачислениеДивидендов") тогда
			НовСтрока.ТипДокумента 	= "Начисление дивидендов";
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= "Дивиденды по акциям";
			
		Иначе
			НовСтрока.ТипДокумента 	= Регистратор.Метаданные().Синоним;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			
		КонецЕсли;	
	Исключение
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьТекстЗапроса(ДтКт)
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1	//0
	|	Инвентаризация.Дата КАК Дата,
	|	КОНЕЦПЕРИОДА(Инвентаризация.Дата, ДЕНЬ) КАК КонецПериода,
	|	Инвентаризация.Номер КАК Номер,
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	Инвентаризация.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	Инвентаризация.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	Инвентаризация.ДокументОснованиеНомер КАК ДокументОснованиеНомер
	|ПОМЕСТИТЬ Шапка
	|ИЗ 
	|	Документ.ИнвентаризацияРасчетов КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ //1
	|	Задолженность.Ссылка.Организация КАК Организация,
	|	Задолженность.ДебиторКредитор КАК Контрагент,
	|	Задолженность.ВИЛС_Договор КАК ДоговорКонтрагента,
	|	Задолженность.ВидЗадолженности КАК ВидЗадолженности,
	|	Задолженность.СчетРасчетов КАК СчетРасчетов,
	|	Задолженность.Подтверждено КАК Подтверждено,
	|	Задолженность.НеПодтверждено КАК НеПодтверждено,
	|	Задолженность.ИстекСрокДавности КАК ИстекСрокДавности
	|ПОМЕСТИТЬ Задолженность	
	|ИЗ 
	|	Документ.ИнвентаризацияРасчетов.Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.Ссылка = &Ссылка
	|	И Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности." + ?(ДтКт = "Дт", "Дебиторская", "Кредиторская") + ")
	|;	
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ //2
	|	Т.Регистратор КАК Регистратор,
	|	Т.Организация КАК Организация,
	|	Т.Контрагент КАК Контрагент,
	|	Т.Договор КАК Договор,
	|	МАКСИМУМ(Т.ЕстьУслуги) КАК ЕстьУслуги,
	|	Т.РасчетныйДокумент КАК РасчетныйДокумент,
	|   ВЫБОР 
	|   	КОГДА Т.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|   		ТОГДА ЕСТЬNULL(Т.РасчетныйДокумент.ДатаВходящегоДокумента, Т.РасчетныйДокумент.Дата)
	|   	ИНАЧЕ Т.Регистратор.Дата
	|   КОНЕЦ КАК Период
	|ПОМЕСТИТЬ РегистраторыСУслугами
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Ссылка КАК Регистратор,
	|		Т.Ссылка.Организация КАК Организация,
	|		Т.Ссылка.Контрагент КАК Контрагент,
	|		Т.Ссылка.Договор КАК Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЕстьУслуги,
	|		Т.Ссылка КАК РасчетныйДокумент
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг.ВидыЗапасов КАК Т
	|	ГДЕ
	|		(Т.Ссылка.Организация, Т.Ссылка.Контрагент) В (ВЫБРАТЬ Организация, Контрагент ИЗ Задолженность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Организация,
	|		Т.Ссылка.Контрагент,
	|		Т.Ссылка.Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		Т.Ссылка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК Т
	|	ГДЕ
	|		(Т.Ссылка.Организация, Т.Ссылка.Контрагент) В (ВЫБРАТЬ Организация, Контрагент ИЗ Задолженность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Организация,
	|		Т.Ссылка.Контрагент,
	|		Т.Ссылка.Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		Т.Ссылка
	|	ИЗ
	|		Документ.ПоступлениеТоваровНаСклад.ВидыЗапасов КАК Т
	|	ГДЕ
	|		(Т.Ссылка.Организация, Т.Ссылка.Контрагент) В (ВЫБРАТЬ Организация, Контрагент ИЗ Задолженность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Организация,
	|		Т.Контрагент,
	|		ВЫБОР КОГДА НЕ ЕСТЬNULL(Т.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА 
	|				Т.Договор
	|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Т.ОбъектРасчетов КАК Справочник.ДоговорыКонтрагентов), ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) 	 
	|			ТОГДА
	|				ВЫРАЗИТЬ(Т.ОбъектРасчетов КАК Справочник.ДоговорыКонтрагентов)
	|			ИНАЧЕ	
	|				Т.ДокументРасчетов.Договор
	|			КОНЕЦ,	
	|		ЛОЖЬ,
	|		Т.ДокументРасчетов
	|	ИЗ
	|		Документ.ВводОстатков.РасчетыСПартнерами КАК Т
	|	ГДЕ
	|		(Т.Ссылка.Организация, Т.Контрагент) В (ВЫБРАТЬ Организация, Контрагент ИЗ Задолженность)
	|	    ) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.Организация,
	|	Т.Контрагент,
	|	Т.Договор,
	|	Т.РасчетныйДокумент,
	|   ВЫБОР 
	|   	КОГДА Т.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|   		ТОГДА ЕСТЬNULL(Т.РасчетныйДокумент.ДатаВходящегоДокумента, Т.РасчетныйДокумент.Дата)
	|   	ИНАЧЕ Т.Регистратор.Дата
	|   КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Контрагент,
	|	Договор
	|;
	|///////////////////////////////////////////////////////////////////////////////   
	|ВЫБРАТЬ	//3
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонПериода,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам),
	|			, (Организация, Субконто1, Субконто2) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность)
	|															) КАК ХозрасчетныйОстатки
	|
	|;
	|///////////////////////////////////////////////////////////////////////////////   
	|ВЫБРАТЬ ИСТИНА	//4
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ //5
	|	ХозрасчетныйОбороты.ДебиторКредитор КАК ДебиторКредитор,
	|	ХозрасчетныйОбороты.ВИЛС_Договор КАК ВИЛС_Договор,
	|	ХозрасчетныйОбороты.ЕстьУслуги,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.ПроверятьГалочку КАК ПроверятьГалочку,
	|   НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК СуммаОборот,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	(ВЫБРАТЬ

	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто3
	|		ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|		ЕСТЬNULL(РегистраторыСУслугами.Период, ХозрасчетныйОбороты.Период) КАК Период,
	|		ХозрасчетныйОбороты.Счет КАК Счет,
    |	   	ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент, ХозрасчетныйОбороты.Регистратор) КАК Регистратор, 
	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) = 0
	|			ТОГДА
	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
	|			ИНАЧЕ
	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) 
	|		КОНЕЦ КАК СуммаОборот,		
	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) = 0
	|			ТОГДА
	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
	|			ИНАЧЕ
	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) 
	|		КОНЕЦ КАК СуммаОборотДт,
	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) = 0
	|			ТОГДА
	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
	|			ИНАЧЕ
	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) 
	|		КОНЕЦ КАК СуммаОборотКт,
	|		ВЫБОР
	|			КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент 
	|					И РегистраторыСУслугами.РасчетныйДокумент.ТипПервичногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику)
	|				ТОГДА ""Деньги""
	|			КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент 
	|					И РегистраторыСУслугами.РасчетныйДокумент.ТипПервичногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаОтКлиента)
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы)
	|				ТОГДА ""Деньги""
	//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
	//|					И ХозрасчетныйОбороты.КорСубконто1 = &ВТБ_Факторинг
	//|				ТОГДА ""Деньги""
	//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
	//|					И ХозрасчетныйОбороты.КорСубконто1 = &Транскапиталбанк
	//|				ТОГДА ""Деньги""
	|			ИНАЧЕ ""Поставка""
	|		КОНЕЦ КАК ПроверятьГалочку,
	|		РегистраторыСУслугами.ЕстьУслуги КАК ЕстьУслуги
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				,
	|				&КонПериода,
	|				Регистратор,
	|				ВЫБОР 
	|					КОГДА Счет В (ВЫБРАТЬ СчетРасчетов ИЗ Задолженность)
	|				    	ТОГДА ИСТИНА
	|					КОГДА Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
	|				    	ТОГДА ИСТИНА
	|                    ИНАЧЕ ЛОЖЬ КОНЕЦ,
	|					, (Организация, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ NULL
	|						КОНЕЦ, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|						КОНЕЦ) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность),
	|					,
	|					) КАК ХозрасчетныйОбороты
	|    ЛЕВОЕ СОЕДИНЕНИЕ РегистраторыСУслугами
	|    	ПО ХозрасчетныйОбороты.Регистратор = РегистраторыСУслугами.Регистратор
	|			И ХозрасчетныйОбороты.Организация = РегистраторыСУслугами.Организация
	|			И ВЫБОР
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто2
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто3
	|				ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
	|			КОНЕЦ = РегистраторыСУслугами.Контрагент
	|			И ВЫБОР 
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто2
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто3
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			КОНЕЦ = РегистраторыСУслугами.Договор 
	|			
	|											) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.ДебиторКредитор,
	|	ХозрасчетныйОбороты.ВИЛС_Договор,
	|	ХозрасчетныйОбороты.ЕстьУслуги,
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.ПроверятьГалочку
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДебиторКредитор,
	|	ВИЛС_Договор,
	|	Период,
	|	Регистратор,
	|	ОбъектРасчетов,
	|	Счет   
	|	
	|ИТОГИ
	|	СУММА(СуммаОборот)
	|ПО
	|	Счет
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ //6
	|	Задолженность.СчетРасчетов КАК СчетРасчетов,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Задолженность.ВидЗадолженности КАК ВидЗадолженности,
	|	Задолженность.Подтверждено КАК Подтверждено,
	|	Задолженность.НеПодтверждено КАК НеПодтверждено,
	|	Задолженность.ИстекСрокДавности КАК ИстекСрокДавности
	|ИЗ 
	|	Задолженность КАК Задолженность
	|УПОРЯДОЧИТЬ ПО
	|	СчетРасчетов
	|ИТОГИ
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено)
	|ПО
	|	СчетРасчетов ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|///////////////////////////////////////////////////////////////////////////////   
	|ВЫБРАТЬ ИСТИНА	//7
	|;
	|";
	
	Возврат(ТекстЗапроса);
КонецФункции

Функция ПолучитьТекстЗапросаСЗаказами(ДтКт)
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 //0
	|	Инвентаризация.Дата КАК Дата,
	|	КОНЕЦПЕРИОДА(Инвентаризация.Дата, ДЕНЬ) КАК КонецПериода,
	|	Инвентаризация.Номер КАК Номер,
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	Инвентаризация.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	Инвентаризация.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	Инвентаризация.ДокументОснованиеНомер КАК ДокументОснованиеНомер
	|ПОМЕСТИТЬ Шапка
	|ИЗ
	|	Документ.ИнвентаризацияРасчетов КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ    //1
	|	Задолженность.Ссылка.Организация КАК Организация,
	|	Задолженность.ДебиторКредитор КАК Контрагент,
	|	Задолженность.ВидЗадолженности КАК ВидЗадолженности,
	|	Задолженность.СчетРасчетов КАК СчетРасчетов,
	|	Задолженность.Подтверждено КАК Подтверждено,
	|	Задолженность.НеПодтверждено КАК НеПодтверждено,
	|	Задолженность.ИстекСрокДавности КАК ИстекСрокДавности,
	|	Задолженность.ВИЛС_Договор КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ Задолженность
	|ИЗ
	|	Документ.ИнвентаризацияРасчетов.Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.Ссылка = &Ссылка
	|	И Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности." + ?(ДтКт = "Дт", "Дебиторская", "Кредиторская") + ")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ  //2
	|	Т.Регистратор КАК Регистратор,
	|	Т.Организация КАК Организация,
	|	Т.Контрагент КАК Контрагент,
	|	Т.Договор КАК Договор,
	|	МАКСИМУМ(Т.ЕстьУслуги) КАК ЕстьУслуги//,
	//|	Т.РасчетныйДокумент КАК РасчетныйДокумент
	|ПОМЕСТИТЬ РегистраторыСУслугами
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Ссылка КАК Регистратор,
	|		Т.Ссылка.Организация КАК Организация,
	|		Т.Ссылка.Контрагент КАК Контрагент,
	|		Т.Ссылка.Договор КАК Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЕстьУслуги//,
	//|		Т.Ссылка КАК РасчетныйДокумент
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг.ВидыЗапасов КАК Т
	|	ГДЕ (Т.Ссылка.Организация, Т.Ссылка.Контрагент) В (ВЫБРАТЬ Организация, Контрагент ИЗ Задолженность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Организация,
	|		Т.Ссылка.Контрагент,
	|		Т.Ссылка.Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ//,
	//|		Т.Ссылка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК Т
	|	ГДЕ (Т.Ссылка.Организация, Т.Ссылка.Контрагент) В (ВЫБРАТЬ Организация, Контрагент ИЗ Задолженность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Организация,
	|		Т.Ссылка.Контрагент,
	|		Т.Ссылка.Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ//,
	//|		Т.Ссылка
	|	ИЗ
	|		Документ.ПоступлениеТоваровНаСклад.ВидыЗапасов КАК Т
	|	ГДЕ (Т.Ссылка.Организация, Т.Ссылка.Контрагент) В (ВЫБРАТЬ Организация, Контрагент ИЗ Задолженность)
	|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ
	//|		Т.Ссылка,
	//|		Т.Ссылка.Организация,
	//|		Т.Контрагент,
	//|		ВЫБОР
	//|			КОГДА НЕ ЕСТЬNULL(Т.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//|				ТОГДА Т.Договор
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Т.ОбъектРасчетов КАК Справочник.ДоговорыКонтрагентов), ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//|				ТОГДА ВЫРАЗИТЬ(Т.ОбъектРасчетов КАК Справочник.ДоговорыКонтрагентов)
	//|			ИНАЧЕ Т.ДокументРасчетов.Договор
	//|		КОНЕЦ,
	//|		ЛОЖЬ,
	//|		Т.ДокументРасчетов
	//|	ИЗ
	//|		Документ.ВводОстатков.РасчетыСПартнерами КАК Т
	//|	ГДЕ (Т.Ссылка.Организация, Т.Ссылка.Контрагент) В (ВЫБРАТЬ Организация, Контрагент ИЗ Задолженность)
	|														) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.Организация,
	|	Т.Контрагент,
	|	Т.Договор//,
	//|	Т.РасчетныйДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Контрагент,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ  //3
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонПериода,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам),
	|			, (Организация, Субконто1, Субконто2) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность)
	|															) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ  //4
	|   ВЫБОР 
	|   	КОГДА РасчетыСКлиентамиПоСрокам.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|   		ТОГДА ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.РасчетныйДокумент.ДатаВходящегоДокумента, РасчетыСКлиентамиПоСрокам.РасчетныйДокумент.Дата)
	|   	ИНАЧЕ
	|           РасчетыСКлиентамиПоСрокам.Период
	|       КОНЕЦ КАК Период,
	|	РасчетыСКлиентамиПоСрокам.ДокументРегистратор КАК Регистратор,
	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО) КАК ОбъектРасчетов,
	|	ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.РасчетныйДокумент, НЕОПРЕДЕЛЕНО) КАК РасчетныйДокумент,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА РасчетыСКлиентамиПоСрокам.ПредоплатаРегл + РасчетыСКлиентамиПоСрокам.ДолгРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК СуммаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА РасчетыСКлиентамиПоСрокам.ПредоплатаРегл + РасчетыСКлиентамиПоСрокам.ДолгРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОборотДт,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА РасчетыСКлиентамиПоСрокам.ПредоплатаРегл + РасчетыСКлиентамиПоСрокам.ДолгРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК СуммаОборотКт,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ПредоплатаРегл, 0) = 0
	|			ТОГДА РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаАвансовПолученных
	|		ИНАЧЕ РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаРасчетовСКлиентами
	|	КОНЕЦ КАК Счет
	|ПОМЕСТИТЬ РасчетыПоСрокам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|ГДЕ (РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация, РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент, РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность)
	//|	И ВЫБОР
	//|			КОГДА РасчетыСКлиентамиПоСрокам.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	//|				ТОГДА ЛОЖЬ
	//|			КОГДА РасчетыСКлиентамиПоСрокам.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыМеждуОрганизациями
	//|				ТОГДА ЛОЖЬ
	//|			ИНАЧЕ ИСТИНА
	//|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|   ВЫБОР 
	|   	КОГДА РасчетыСКлиентамиПоСрокам.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|   		ТОГДА ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.РасчетныйДокумент.ДатаВходящегоДокумента, РасчетыСКлиентамиПоСрокам.РасчетныйДокумент.Дата)
	|   	ИНАЧЕ
	|           РасчетыСКлиентамиПоСрокам.Период
	|       КОНЕЦ,
	|	РасчетыСКлиентамиПоСрокам.ДокументРегистратор,
	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация,
	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент,
	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор,
	|	ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.РасчетныйДокумент, НЕОПРЕДЕЛЕНО),
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ПредоплатаРегл, 0) = 0
	|			ТОГДА РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаАвансовПолученных
	|		ИНАЧЕ РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаРасчетовСКлиентами
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   ВЫБОР 
	|   	КОГДА РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|   		ТОГДА ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент.ДатаВходящегоДокумента, РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент.Дата)
	|   	ИНАЧЕ
	|           РасчетыСПоставщикамиПоСрокам.Период
	|       КОНЕЦ КАК Период,
	|	РасчетыСПоставщикамиПоСрокам.ДокументРегистратор,
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация,
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент,
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор,
	|	ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА -(РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл + РасчетыСПоставщикамиПоСрокам.ДолгРегл)
	|				ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл + РасчетыСПоставщикамиПоСрокам.ДолгРегл
	|			КОНЕЦ), 0),
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл + РасчетыСПоставщикамиПоСрокам.ДолгРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл + РасчетыСПоставщикамиПоСрокам.ДолгРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл, 0) = 0
	|			ТОГДА РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаАвансовВыданных
	|		ИНАЧЕ РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаРасчетовСПоставщиками
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|ГДЕ (РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация, РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент, РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность)
	//|	И ВЫБОР
	//|			КОГДА РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	//|				ТОГДА ЛОЖЬ
	//|			КОГДА РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыМеждуОрганизациями
	//|				ТОГДА ЛОЖЬ
	//|			ИНАЧЕ ИСТИНА
	//|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|   ВЫБОР 
	|   	КОГДА РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|   		ТОГДА ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент.ДатаВходящегоДокумента, РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент.Дата)
	|   	ИНАЧЕ
	|           РасчетыСПоставщикамиПоСрокам.Период
	|       КОНЕЦ,
	|	РасчетыСПоставщикамиПоСрокам.ДокументРегистратор,
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация,
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент,
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор,
	|	ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент, НЕОПРЕДЕЛЕНО),
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл, 0) = 0
	|			ТОГДА РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаАвансовВыданных
	|		ИНАЧЕ РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаРасчетовСПоставщиками
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Контрагент,
	|	Договор,
	|	Счет,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ  //5
	|	ХозрасчетныйОбороты.ДебиторКредитор КАК ДебиторКредитор,
	|	ХозрасчетныйОбороты.ВИЛС_Договор КАК ВИЛС_Договор,
	|	ХозрасчетныйОбороты.ЕстьУслуги КАК ЕстьУслуги,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.ПроверятьГалочку КАК ПроверятьГалочку,
	|	ХозрасчетныйОбороты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК СуммаОборот,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.ДебиторКредитор КАК ДебиторКредитор,
	|		ХозрасчетныйОбороты.ВИЛС_Договор КАК ВИЛС_Договор,
	|		ХозрасчетныйОбороты.Период КАК Период,
	|		ХозрасчетныйОбороты.Счет КАК Счет,
	|		ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|		ХозрасчетныйОбороты.ОбъектРасчетов КАК ОбъектРасчетов,
	|		ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) КАК СуммаОборот,
	|		ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК СуммаОборотДт,
	|		ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК СуммаОборотКт,
	|			ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПервичныйДокумент
	|						И ХозрасчетныйОбороты.Регистратор.ТипПервичногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику)
	|					ТОГДА ""Деньги""
	|				КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПервичныйДокумент
	|						И ХозрасчетныйОбороты.Регистратор.ТипПервичногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаОтКлиента)
	|					ТОГДА ""Деньги""
	|				КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
	|					ТОГДА ""Деньги""
	|				КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
	|					ТОГДА ""Деньги""
	|				КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|					ТОГДА ""Деньги""
	|				КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|						И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками))
	|					ТОГДА ""Деньги""
	|				КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|						И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
	|					ТОГДА ""Деньги""
	|				КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|						И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы)
	|					ТОГДА ""Деньги""
	|				ИНАЧЕ ""Поставка""
	|			КОНЕЦ КАК ПроверятьГалочку,
	|			РегистраторыСУслугами.ЕстьУслуги КАК ЕстьУслуги
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто2
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто3
	|				ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
	|			КОНЕЦ КАК ДебиторКредитор,
	|			ВЫБОР
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто2
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто3
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			КОНЕЦ КАК ВИЛС_Договор,
	|			ЕСТЬNULL(РасчетыПоСрокам.Период, ХозрасчетныйОбороты.Период) КАК Период,
	|			ХозрасчетныйОбороты.Счет КАК Счет,
	|			ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|			ЕСТЬNULL(РасчетыПоСрокам.РасчетныйДокумент, ХозрасчетныйОбороты.Регистратор) КАК Регистратор,
	|			РасчетыПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|			ВЫБОР
	|				КОГДА НЕ ЕСТЬNULL(РасчетыПоСрокам.РасчетныйДокумент, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|						//И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) = 0
	|					ТОГДА ЕСТЬNULL(РасчетыПоСрокам.СуммаОборот, 0)
	|				ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0)
	|			КОНЕЦ КАК СуммаОборот,
	|			ВЫБОР
	|				КОГДА НЕ ЕСТЬNULL(РасчетыПоСрокам.РасчетныйДокумент, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|						//И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) = 0
	|					ТОГДА ЕСТЬNULL(РасчетыПоСрокам.СуммаОборотДт, 0)
	|				ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0)
	|			КОНЕЦ КАК СуммаОборотДт,
	|			ВЫБОР
	|				КОГДА НЕ ЕСТЬNULL(РасчетыПоСрокам.РасчетныйДокумент, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|						//И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) = 0
	|					ТОГДА ЕСТЬNULL(РасчетыПоСрокам.СуммаОборотКт, 0)
	|				ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0)
	|			КОНЕЦ КАК СуммаОборотКт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Обороты(
	|					,
	|					&КонПериода,
	|					Регистратор,
	|					ВЫБОР
	|						КОГДА Счет В (ВЫБРАТЬ СчетРасчетов ИЗ Задолженность)
	|							ТОГДА ИСТИНА
	|						КОГДА Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ,
	|					, (Организация, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ NULL
	|						КОНЕЦ, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|						КОНЕЦ) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность),
	|					,
	|					) КАК ХозрасчетныйОбороты
	|				ЛЕВОЕ СОЕДИНЕНИЕ РасчетыПоСрокам КАК РасчетыПоСрокам
	|				ПО ХозрасчетныйОбороты.Регистратор = РасчетыПоСрокам.Регистратор
	|					И ХозрасчетныйОбороты.Организация = РасчетыПоСрокам.Организация
	|					И ХозрасчетныйОбороты.Счет = РасчетыПоСрокам.Счет
	|					И (ВЫБОР
	|						КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|							ТОГДА ХозрасчетныйОбороты.Субконто1
	|						КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							ТОГДА ХозрасчетныйОбороты.Субконто1
	|						КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ХозрасчетныйОбороты.Субконто1
	|						КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|							ТОГДА ХозрасчетныйОбороты.Субконто2
	|						КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|							ТОГДА ХозрасчетныйОбороты.Субконто3
	|						ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
	|					КОНЕЦ = РасчетыПоСрокам.Контрагент)
	|					И (ВЫБОР
	|						КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ХозрасчетныйОбороты.Субконто2
	|						КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ХозрасчетныйОбороты.Субконто3
	|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					КОНЕЦ = РасчетыПоСрокам.Договор)) КАК ХозрасчетныйОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистраторыСУслугами КАК РегистраторыСУслугами
	|			ПО ХозрасчетныйОбороты.Регистратор = РегистраторыСУслугами.Регистратор
	|				И ХозрасчетныйОбороты.ДебиторКредитор = РегистраторыСУслугами.Контрагент
	|				И ХозрасчетныйОбороты.ВИЛС_Договор = РегистраторыСУслугами.Договор
	|				//И ХозрасчетныйОбороты.РасчетныйДокумент = РегистраторыСУслугами.РасчетныйДокумент
	|																									) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.ДебиторКредитор,
	|	ХозрасчетныйОбороты.ВИЛС_Договор,
	|	ХозрасчетныйОбороты.ОбъектРасчетов,
	|	ХозрасчетныйОбороты.ЕстьУслуги,
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.ПроверятьГалочку
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДебиторКредитор,
	|	ВИЛС_Договор,
	|	Период,
	|	Регистратор,
	|	ОбъектРасчетов,
	|	Счет   
	|
	|ИТОГИ
	|	СУММА(СуммаОборот)
	|ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ   //6
	|	Задолженность.СчетРасчетов КАК СчетРасчетов,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Задолженность.ВидЗадолженности КАК ВидЗадолженности,
	|	Задолженность.Подтверждено КАК Подтверждено,
	|	Задолженность.НеПодтверждено КАК НеПодтверждено,
	|	Задолженность.ИстекСрокДавности КАК ИстекСрокДавности
	|ИЗ
	|	Задолженность КАК Задолженность
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетРасчетов
	|ИТОГИ
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено)
	|ПО
	|	СчетРасчетов ИЕРАРХИЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ   //7
	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО) КАК ОбъектРасчетов,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА  РасчетыСКлиентамиПоСрокам.ПредоплатаРеглОстаток + РасчетыСКлиентамиПоСрокам.ДолгРеглОстаток < 0
	|					ТОГДА -(РасчетыСКлиентамиПоСрокам.ПредоплатаРеглОстаток + РасчетыСКлиентамиПоСрокам.ДолгРеглОстаток)
	|				ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаРеглОстаток + РасчетыСКлиентамиПоСрокам.ДолгРеглОстаток
	|			КОНЕЦ), 0) КАК СуммаОстаток,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ДолгРеглОстаток > 0
	|				ТОГДА РасчетыСКлиентамиПоСрокам.ДолгРеглОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОстатокДт,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ПредоплатаРеглОстаток > 0
	|					ТОГДА РасчетыСКлиентамиПоСрокам.ПредоплатаРеглОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК СуммаОстатокКт,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ПредоплатаРеглОстаток, 0) = 0
	|			ТОГДА РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаАвансовПолученных
	|		ИНАЧЕ РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаРасчетовСКлиентами
	|	КОНЕЦ КАК Счет
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&КонПериода,
	|							(АналитикаУчетаПоПартнерам.Организация, АналитикаУчетаПоПартнерам.Контрагент, АналитикаУчетаПоПартнерам.Договор) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность)
	|							И ВЫБОР
	|								КОГДА ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	|									ТОГДА ЛОЖЬ
	|								КОГДА ОбъектРасчетов ССЫЛКА Справочник.ДоговорыМеждуОрганизациями
	|									ТОГДА ЛОЖЬ
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|             													) КАК РасчетыСКлиентамиПоСрокам
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация,
	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент,
	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор,
	|	ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО),
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ПредоплатаРеглОстаток, 0) = 0
	|			ТОГДА РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаАвансовПолученных
	|		ИНАЧЕ РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаРасчетовСКлиентами
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация,
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент,
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор,
	|	ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА РасчетыСПоставщикамиПоСрокам.ПредоплатаРеглОстаток + РасчетыСПоставщикамиПоСрокам.ДолгРеглОстаток < 0
	|					ТОГДА -(РасчетыСПоставщикамиПоСрокам.ПредоплатаРеглОстаток + РасчетыСПоставщикамиПоСрокам.ДолгРеглОстаток)
	|				ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаРеглОстаток + РасчетыСПоставщикамиПоСрокам.ДолгРеглОстаток
	|			КОНЕЦ), 0),
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА РасчетыСПоставщикамиПоСрокам.ПредоплатаРеглОстаток > 0
	|					ТОГДА РасчетыСПоставщикамиПоСрокам.ПредоплатаРеглОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА РасчетыСПоставщикамиПоСрокам.ДолгРеглОстаток > 0
	|					ТОГДА РасчетыСПоставщикамиПоСрокам.ДолгРеглОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.ПредоплатаРеглОстаток, 0) = 0
	|			ТОГДА РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаАвансовВыданных
	|		ИНАЧЕ РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаРасчетовСПоставщиками
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&КонПериода,
	|							(АналитикаУчетаПоПартнерам.Организация, АналитикаУчетаПоПартнерам.Контрагент, АналитикаУчетаПоПартнерам.Договор) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность)
	|							И ВЫБОР
	|								КОГДА ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	|									ТОГДА ЛОЖЬ
	|								КОГДА ОбъектРасчетов ССЫЛКА Справочник.ДоговорыМеждуОрганизациями
	|									ТОГДА ЛОЖЬ
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|             													) КАК РасчетыСПоставщикамиПоСрокам
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация,
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент,
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор,
	|	ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО),
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.ПредоплатаРеглОстаток, 0) = 0
	|			ТОГДА РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаАвансовВыданных
	|		ИНАЧЕ РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаРасчетовСПоставщиками
	|	КОНЕЦ
	|
	|;
	|";
	Возврат(ТекстЗапроса);
КонецФункции

Функция ПечатьРеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2(МассивОбъектов, ОбъектыПечати)
	ДтКт = "Дт";
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияПророченныхРасчетовСконтрагентами_Дбт";
	Макет = ПолучитьМакет("ПФ_MXL_РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2");
	ТекстЗапроса = ПолучитьТекстПросроченногоЗапроса(ДтКт);
	ТекстЗаголовка = "Реестр просроченной дебиторской задолженности";
	СвойствоМероприятие = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "МероприятиеДт");
	Возврат(ПечатьРеестрПросроченнойЗадолженностиПриложение_7_2(МассивОбъектов, ОбъектыПечати, ТабДокумент, "Дт", Макет, ТекстЗапроса, ТекстЗаголовка, СвойствоМероприятие));
КонецФункции

Функция ПечатьРеестрПросроченнойКредиторскойЗадолженностиПриложение_7_2(МассивОбъектов, ОбъектыПечати)
	ДтКт = "Кт";
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияПророченныхРасчетовСконтрагентами_Крт";
	Макет = ПолучитьМакет("ПФ_MXL_РеестрПросроченнойКредиторскойЗадолженностиПриложение_7_2");
	ТекстЗапроса = ПолучитьТекстПросроченногоЗапроса(ДтКт);
	ТекстЗаголовка = "Реестр просроченной кредиторской задолженности";
	СвойствоМероприятие = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "МероприятиеКт");
	Возврат(ПечатьРеестрПросроченнойЗадолженностиПриложение_7_2(МассивОбъектов, ОбъектыПечати, ТабДокумент, "Кт", Макет, ТекстЗапроса, ТекстЗаголовка, СвойствоМероприятие));
КонецФункции

Функция ПечатьРеестрПросроченнойЗадолженностиПриложение_7_2(Знач МассивОбъектов, Знач ОбъектыПечати, ТабДокумент, Знач ДтКт = "Дт", Знач Макет, Знач ТекстЗапроса, Знач ТекстЗаголовка, Знач СвойствоМероприятие)
	СвойствоСрокПогашенияЗадолженности 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "СрокПогашенияЗадолженности");
	ПервыйДокумент = Истина;
	
	Для каждого СсылкаОбъекта Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		ДатаДокументаИнветаризации = КонецДня(СсылкаОбъекта.Дата);
		Запрос.УстановитьПараметр("Ссылка"				, СсылкаОбъекта);
		Запрос.УстановитьПараметр("КонПериода2М"		, Новый Граница(ДобавитьМесяц(НачалоМесяца(ДатаДокументаИнветаризации), -1) - 1	, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("НачПериода1М"		, Новый Граница(ДобавитьМесяц(НачалоМесяца(ДатаДокументаИнветаризации), -1)		, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонПериода1М"		, Новый Граница(НачалоМесяца(ДатаДокументаИнветаризации) - 1					, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("НачПериода"			, Новый Граница(НачалоМесяца(ДатаДокументаИнветаризации)						, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонПериода"			, Новый Граница(ДатаДокументаИнветаризации										, ВидГраницы.Включая)); 
		Запрос.УстановитьПараметр("СвойствоМероприятие"	, СвойствоМероприятие);
		Запрос.УстановитьПараметр("СвойствоСрокПогашенияЗадолженности" , СвойствоСрокПогашенияЗадолженности);
		//Запрос.УстановитьПараметр("КонПериода2МНеМеньше20181231235959", Не Запрос.Параметры.КонПериода2М.Значение < Дата(2018,12,31,23,59,59));
		//Запрос.УстановитьПараметр("КонПериода1МНеМеньше20181231235959", Не Запрос.Параметры.КонПериода1М.Значение < Дата(2018,12,31,23,59,59));
		//Запрос.УстановитьПараметр("УСчетаЕстьРодитель", ЗначениеЗаполнено(Счет.Родитель));
		//Запрос.УстановитьПараметр("СчетРодитель", 	Счет.Родитель);  
		
		ПакетЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		ВыборкаШапка = ПакетЗапросов[0].Выбрать();
		Если НЕ ВыборкаШапка.Следующий() Тогда
			Возврат ТабДокумент;
		КонецЕсли;
		//ДатаДокументаИнветаризации = КонецДня(ВыборкаШапка.Дата);
		
		Область = Макет.ПолучитьОбласть("Шапка|Тело");
				
		ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаШапка);
		
		Область.Параметры.ТекстЗаголовка 	= ТекстЗаголовка;
		Область.Параметры.Дата  			= Формат(ДатаДокументаИнветаризации, "ДФ=dd.MM.yyyy");
		Если ДтКт = "Дт" Тогда
			Область.Параметры.ДатаВозникновенияЗ1М	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата возникновения просроченной ДЗ на %1.'"), Формат(НачалоМесяца(ДатаДокументаИнветаризации) -1,"ДФ=""дд.ММ.гг 'г.'"""));
			Область.Параметры.КонПериода2М 			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сумма просроченной ДЗ на %1 руб.'"), 			Формат(ДобавитьМесяц(НачалоМесяца(ДатаДокументаИнветаризации), -1) - 1,"ДФ=""дд.ММ.гг 'г.'"""));
			Область.Параметры.КонПериода1М 			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сумма просроченной ДЗ на %1 руб.'"), 			Формат(НачалоМесяца(ДатаДокументаИнветаризации) - 1, "ДФ=""дд.ММ.гг 'г.'"""));
		Иначе
			Область.Параметры.ДатаВозникновенияЗ1М	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата возникновения просроченной КЗ на %1.'"), Формат(НачалоМесяца(ДатаДокументаИнветаризации) -1,"ДФ=""дд.ММ.гг 'г.'"""));
			Область.Параметры.КонПериода2М 			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сумма просроченной КЗ на %1 руб.'"), 			Формат(ДобавитьМесяц(НачалоМесяца(ДатаДокументаИнветаризации), -1) - 1,"ДФ=""дд.ММ.гг 'г.'"""));
			Область.Параметры.КонПериода1М 			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сумма просроченной КЗ на %1 руб.'"), 			Формат(НачалоМесяца(ДатаДокументаИнветаризации) - 1, "ДФ=""дд.ММ.гг 'г.'"""));
		КонецЕсли;	
		Область.Параметры.ОборотыПериода1М 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оплачено (погашено) в %1 руб.'"), 			Формат(НачалоМесяца(ДатаДокументаИнветаризации) - 1, "ДФ=""ММММ гг 'г.'"""));
		ТабДокумент.Вывести(Область);
		ТабДокумент.ФиксацияСверху = 5;
		
		ТабДокумент.НачатьГруппуКолонок("По срокам 1 месяц", Ложь); 
		Область = Макет.ПолучитьОбласть("Шапка|КонПериода1МПоСрокам");
		Если ДтКт = "Дт" Тогда
			Область.Параметры.КонПериода1МПоСрокам	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ДЗ просроченная по срокам на %1,  в т.ч.:'"), Формат(НачалоМесяца(ДатаДокументаИнветаризации) - 1, "ДФ=""дд.ММ.гг 'г.'"""));
		Иначе
			Область.Параметры.КонПериода1МПоСрокам	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'КЗ просроченная по срокам на %1,  в т.ч.:'"), Формат(НачалоМесяца(ДатаДокументаИнветаризации) - 1, "ДФ=""дд.ММ.гг 'г.'"""));
		КонецЕсли;	
		ТабДокумент.Присоединить(Область, 1, "По срокам 1 месяц", Ложь);
		ТабДокумент.ЗакончитьГруппуКолонок();
		
		Область = Макет.ПолучитьОбласть("Шапка|Тело1");
		Область.Параметры.ОборотыПериодаТекМ 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Оплачено (погашено) в %1 руб.'"), 			Формат(НачалоМесяца(ДатаДокументаИнветаризации), "ДФ=""ММММ гг 'г.'"""));
		Область.Параметры.Резерв	 			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Резерв по состоянию на %1 руб.'"), 			Формат(НачалоМесяца(ДатаДокументаИнветаризации) - 1, "ДФ=""дд.ММ.гг 'г.'"""));
		Если ДтКт = "Дт" Тогда
			Область.Параметры.ДатаВозникновенияЗ	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата возникновения просроченной ДЗ на %1.'"), Формат(ДатаДокументаИнветаризации,"ДФ=""дд.ММ.гг 'г.'"""));
		Иначе
			Область.Параметры.ДатаВозникновенияЗ	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата возникновения просроченной КЗ на %1.'"), Формат(ДатаДокументаИнветаризации,"ДФ=""дд.ММ.гг 'г.'"""));
		КонецЕсли;	
		ТабДокумент.Присоединить(Область,,, Истина);
		
		ТабДокумент.НачатьГруппуКолонок("По срокам на дату сдачи отчета", Ложь);
		Область = Макет.ПолучитьОбласть("Шапка|КонПериодаПоСрокам");
		Если ДтКт = "Дт" Тогда
			Область.Параметры.КонПериодаПоСрокам	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ДЗ просроченная по срокам на %1,  в т.ч.:'"), Формат(ДатаДокументаИнветаризации, "ДФ=""дд.ММ.гг 'г.'"""));
		Иначе	
			Область.Параметры.КонПериодаПоСрокам	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'КЗ просроченная по срокам на %1,  в т.ч.:'"), Формат(ДатаДокументаИнветаризации, "ДФ=""дд.ММ.гг 'г.'"""));
		КонецЕсли;
		ТабДокумент.Присоединить(Область, 2, "По срокам на дату сдачи отчета", Ложь);     
		ТабДокумент.ЗакончитьГруппуКолонок();	
		
		СтруктураПоказателей = Новый Структура;
		СтруктураПоказателей.Вставить("НПП"								, 1);
		СтруктураПоказателей.Вставить("КонПериодаТекМИтого"				, 0);
		СтруктураПоказателей.Вставить("СуммаРезерва"					, 0);
		СтруктураПоказателей.Вставить("СуммаРезерваИтого"				, 0);
		СтруктураПоказателей.Вставить("Колонка11ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка12ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка12ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка13ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка14ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка15ЧИтого"					, 0);   
		СтруктураПоказателей.Вставить("Колонка17ЧИтого"					, 0);    
		СтруктураПоказателей.Вставить("СуммаРезерваНУЧ"					, 0); 
		СтруктураПоказателей.Вставить("СуммаРезерваНУЧИтого"			, 0);
		СтруктураПоказателей.Вставить("КонПериода2МИтого"				, 0); 
		СтруктураПоказателей.Вставить("ОборотыПериода1МИтого"			, 0);
		СтруктураПоказателей.Вставить("КонПериода1МИтого"				, 0);
		СтруктураПоказателей.Вставить("ОборотыПериодаТекМИтого"			, 0);
		СтруктураПоказателей.Вставить("Колонка22ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка23ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка24ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка25ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("Колонка26ЧИтого"					, 0);
		СтруктураПоказателей.Вставить("КонПериодаТекМПоСчетуИтого"		, 0);
		СтруктураПоказателей.Вставить("СуммаРезерваПоСчетуИтого"		, 0);   
		СтруктураПоказателей.Вставить("Колонка11ЧПоСчетуИтого"			, 0);  
		СтруктураПоказателей.Вставить("Колонка12ЧПоСчетуИтого"			, 0);   
		СтруктураПоказателей.Вставить("Колонка13ЧПоСчетуИтого"			, 0);  
		СтруктураПоказателей.Вставить("Колонка14ЧПоСчетуИтого"			, 0);   
		СтруктураПоказателей.Вставить("Колонка15ЧПоСчетуИтого"			, 0);  
		СтруктураПоказателей.Вставить("Колонка17ЧПоСчетуИтого"			, 0);   
		СтруктураПоказателей.Вставить("СуммаРезерваНУЧПоСчетуИтого"		, 0);
		СтруктураПоказателей.Вставить("КонПериода2МПоСчетуИтого"		, 0);   
		СтруктураПоказателей.Вставить("ОборотыПериода1МПоСчетуИтого"	, 0);  
		СтруктураПоказателей.Вставить("КонПериода1МПоСчетуИтого"		, 0);   
		СтруктураПоказателей.Вставить("ОборотыПериодаТекМПоСчетуИтого"	, 0);  
		СтруктураПоказателей.Вставить("Колонка22ЧПоСчетуИтого"			, 0);   
		СтруктураПоказателей.Вставить("Колонка23ЧПоСчетуИтого"			, 0);  
		СтруктураПоказателей.Вставить("Колонка24ЧПоСчетуИтого"			, 0);   
		СтруктураПоказателей.Вставить("Колонка25ЧПоСчетуИтого"			, 0);       
		СтруктураПоказателей.Вставить("Колонка26ЧПоСчетуИтого"			, 0);
		
		ТаблицаСтрокПоСчету = Новый ТаблицаЗначений();
		Колонки = ТаблицаСтрокПоСчету.Колонки;
		Колонки.Добавить("СчетИерархия");
		Колонки.Добавить("СчетГруппировка");
		Колонки.Добавить("СчетРасчетов");
		Колонки.Добавить("СтрокаИерархия");
		Колонки.Добавить("СтрокаГруппировка");
		Колонки.Добавить("СтрокаРасчетов");
		Колонки.Добавить("СтрокаДетальная");
		
		КоличествоВСтеке=0;
		ТекущийСчет				 = Неопределено;
		//ТекущийСчетПервогоУровня = Неопределено;
		//ТекущийСчетВторогоУровня = Неопределено;
		
		Выборка_3 				= ПакетЗапросов[3].Выбрать();
		ВыборкаДокументов 		= ПакетЗапросов[5].Выгрузить();
		ВыборкаОстатков 		= ПакетЗапросов[8].Выгрузить();
		ВыборкаЗадолженность 	= ПакетЗапросов[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "СчетРасчетов");
		ВыбратьЭлементыДляПросроченнойВИерархии(ВыборкаЗадолженность, ТаблицаСтрокПоСчету, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке);        //ВыборкаОстатков, 
		
		Если ТаблицаСтрокПоСчету.Количество() > 1 Тогда
			ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|Тело");
			ОбластьСтрока.Параметры.Итого			 	= "Итого по счету: " + ТаблицаСтрокПоСчету[0].СчетИерархия;
			ОбластьСтрока.Параметры.КонПериода2М 		= СтруктураПоказателей.КонПериода2МПоСчетуИтого;
			ОбластьСтрока.Параметры.ОборотыПериода1М	= СтруктураПоказателей.ОборотыПериода1МПоСчетуИтого;
			ОбластьСтрока.Параметры.КонПериода1М		= СтруктураПоказателей.КонПериода1МПоСчетуИтого;
			ТабДокумент.Вывести(ОбластьСтрока);
			
			ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|КонПериода1МПоСрокам");
			ОбластьСтрока.Параметры.Колонка11Ч			= СтруктураПоказателей.Колонка11ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка12Ч			= СтруктураПоказателей.Колонка12ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка13Ч			= СтруктураПоказателей.Колонка13ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка14Ч			= СтруктураПоказателей.Колонка14ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка15Ч			= СтруктураПоказателей.Колонка15ЧПоСчетуИтого;
			ТабДокумент.Присоединить(ОбластьСтрока, 1, "По срокам 1 месяц", Ложь);
			
			ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|Тело1");
			ОбластьСтрока.Параметры.СуммаРезерва		= СтруктураПоказателей.СуммаРезерваПоСчетуИтого;
			ОбластьСтрока.Параметры.ОборотыПериодаТекМ	= СтруктураПоказателей.ОборотыПериодаТекМПоСчетуИтого;
			ОбластьСтрока.Параметры.КонПериодаТекМ		= СтруктураПоказателей.КонПериодаТекМПоСчетуИтого;
			ТабДокумент.Присоединить(ОбластьСтрока,,, Истина);
			
			ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|КонПериодаПоСрокам");
			ОбластьСтрока.Параметры.Колонка22Ч			= СтруктураПоказателей.Колонка22ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка23Ч			= СтруктураПоказателей.Колонка23ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка24Ч			= СтруктураПоказателей.Колонка24ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка25Ч			= СтруктураПоказателей.Колонка25ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка26Ч			= СтруктураПоказателей.Колонка26ЧПоСчетуИтого;
			ТабДокумент.Присоединить(ОбластьСтрока, 2, "По срокам на дату сдачи отчета", Ложь);
			
			ТабДокумент.НачатьГруппуСтрок("ИтогоПоСчету" + ТаблицаСтрокПоСчету[0].СчетИерархия, Ложь);
			
			СтруктураПоказателей.КонПериода2МИтого 		= СтруктураПоказателей.КонПериода2МИтого 		+ СтруктураПоказателей.КонПериода2МПоСчетуИтого;
			СтруктураПоказателей.ОборотыПериода1МИтого 	= СтруктураПоказателей.ОборотыПериода1МИтого 	+ СтруктураПоказателей.ОборотыПериода1МПоСчетуИтого;
			СтруктураПоказателей.КонПериода1МИтого 		= СтруктураПоказателей.КонПериода1МИтого 		+ СтруктураПоказателей.КонПериода1МПоСчетуИтого;
			СтруктураПоказателей.Колонка11ЧИтого 		= СтруктураПоказателей.Колонка11ЧИтого 			+ СтруктураПоказателей.Колонка11ЧПоСчетуИтого;
			СтруктураПоказателей.Колонка12ЧИтого 		= СтруктураПоказателей.Колонка12ЧИтого 			+ СтруктураПоказателей.Колонка12ЧПоСчетуИтого;
			СтруктураПоказателей.Колонка13ЧИтого 		= СтруктураПоказателей.Колонка13ЧИтого 			+ СтруктураПоказателей.Колонка13ЧПоСчетуИтого;	
			СтруктураПоказателей.Колонка14ЧИтого 		= СтруктураПоказателей.Колонка14ЧИтого 			+ СтруктураПоказателей.Колонка14ЧПоСчетуИтого;
			СтруктураПоказателей.Колонка15ЧИтого 		= СтруктураПоказателей.Колонка15ЧИтого 			+ СтруктураПоказателей.Колонка15ЧПоСчетуИтого;
			СтруктураПоказателей.СуммаРезерваИтого 		= СтруктураПоказателей.СуммаРезерваИтого 		+ СтруктураПоказателей.СуммаРезерваПоСчетуИтого;
			СтруктураПоказателей.ОборотыПериодаТекМИтого= СтруктураПоказателей.ОборотыПериодаТекМИтого 	+ СтруктураПоказателей.ОборотыПериодаТекМПоСчетуИтого;
			СтруктураПоказателей.КонПериодаТекМИтого 	= СтруктураПоказателей.КонПериодаТекМИтого 		+ СтруктураПоказателей.КонПериодаТекМПоСчетуИтого;
			СтруктураПоказателей.Колонка22ЧИтого		= СтруктураПоказателей.Колонка22ЧИтого 			+ СтруктураПоказателей.Колонка22ЧПоСчетуИтого;
			СтруктураПоказателей.Колонка23ЧИтого		= СтруктураПоказателей.Колонка23ЧИтого 			+ СтруктураПоказателей.Колонка23ЧПоСчетуИтого;
			СтруктураПоказателей.Колонка24ЧИтого		= СтруктураПоказателей.Колонка24ЧИтого 			+ СтруктураПоказателей.Колонка24ЧПоСчетуИтого;
			СтруктураПоказателей.Колонка25ЧИтого		= СтруктураПоказателей.Колонка25ЧИтого 			+ СтруктураПоказателей.Колонка25ЧПоСчетуИтого;
			СтруктураПоказателей.Колонка26ЧИтого		= СтруктураПоказателей.Колонка26ЧИтого 			+ СтруктураПоказателей.Колонка26ЧПоСчетуИтого;
		
			ГруппировкаВыводилась = Ложь;
			Для Инд = 0 По ТаблицаСтрокПоСчету.Количество() - 1 Цикл
				Для Инд1 = 0 По ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов.Количество() - 1 Цикл
					МассивОбластей = ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов[Инд1];
					ТабДокумент.Вывести(МассивОбластей[0]);
					ТабДокумент.Присоединить(МассивОбластей[1], 1, "По срокам 1 месяц", Ложь);
					ТабДокумент.Присоединить(МассивОбластей[2],,, Истина);
					ТабДокумент.Присоединить(МассивОбластей[3], 2, "По срокам на дату сдачи отчета", Ложь);
					ТабДокумент.НачатьГруппуСтрок("ИтогоПодоговору" + МассивОбластей[0].Параметры.ДоговорКонтрагента, Ложь);
					Для Инд2 = 0 По ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1].Количество() - 1 Цикл
						Если ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1][Инд2] = Неопределено Тогда Продолжить; КонецЕсли;
						МассивОбластей = ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1][Инд2];
						ТабДокумент.Вывести(МассивОбластей[0]);
						ТабДокумент.Присоединить(МассивОбластей[1], 1, "По срокам 1 месяц", Ложь);
						ТабДокумент.Присоединить(МассивОбластей[2],,, Истина);
						ТабДокумент.Присоединить(МассивОбластей[3], 2, "По срокам на дату сдачи отчета", Ложь);
					КонецЦикла;	          
					ТабДокумент.ЗакончитьГруппуСтрок();
				КонецЦикла;	
			КонецЦикла;
			ТабДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;	
				
		ОблИтого = Макет.ПолучитьОбласть("Итого|Тело");
		//ОблИтого.Параметры.Итого			 	= "Итого:";
		ОблИтого.Параметры.КонПериода2М 		= формат(СтруктураПоказателей.КонПериода2МИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.ОборотыПериода1М 	= формат(СтруктураПоказателей.ОборотыПериода1МИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.КонПериода1М  		= формат(СтруктураПоказателей.КонПериода1МИтого, "ЧЦ=15; ЧДЦ=2");
		ТабДокумент.Вывести(ОблИтого);
		
		ОблИтого = Макет.ПолучитьОбласть("Итого|КонПериода1МПоСрокам");
		ОблИтого.Параметры.Колонка11Ч 	 	 	= формат(СтруктураПоказателей.Колонка11ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка12Ч 	 	 	= формат(СтруктураПоказателей.Колонка12ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка13Ч 	 	 	= формат(СтруктураПоказателей.Колонка13ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка14Ч 	 	 	= формат(СтруктураПоказателей.Колонка14ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка15Ч 	 	 	= формат(СтруктураПоказателей.Колонка15ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ТабДокумент.Присоединить(ОблИтого, 1, "По срокам 1 месяц", Ложь);
		
		ОблИтого = Макет.ПолучитьОбласть("Итого|Тело1");
		ОблИтого.Параметры.СуммаРезерва 	 	= формат(СтруктураПоказателей.СуммаРезерваИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.ОборотыПериодаТекМ	= формат(СтруктураПоказателей.ОборотыПериодаТекМИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.КонПериодаТекМ	 	= формат(СтруктураПоказателей.КонПериодаТекМИтого, "ЧЦ=15; ЧДЦ=2");
		ТабДокумент.Присоединить(ОблИтого,,, Истина);
		
		ОблИтого = Макет.ПолучитьОбласть("Итого|КонПериодаПоСрокам");
		ОблИтого.Параметры.Колонка22Ч 	 	 	= формат(СтруктураПоказателей.Колонка22ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка23Ч 	 	 	= формат(СтруктураПоказателей.Колонка23ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка24Ч 	 	 	= формат(СтруктураПоказателей.Колонка24ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка25Ч 	 	 	= формат(СтруктураПоказателей.Колонка25ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка26Ч 	 	 	= формат(СтруктураПоказателей.Колонка26ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ТабДокумент.Присоединить(ОблИтого, 2, "По срокам на дату сдачи отчета", Ложь);
		
		//ОблПод = Макет.ПолучитьОбласть("Подвал");
		//Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ВыборкаШапка.Организация, ДатаДокументаИнветаризации,);
		//ОблПод.Параметры.Бухгалтер    = Руководители.ГлавныйБухгалтер;
		//ТабДокумент.Вывести(ОблПод);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаОбъекта);
	КонецЦикла;
	Возврат ТабДокумент;
КонецФункции // ПечатьРеестрПросроченнойЗадолженностиПриложение_7_2()

Процедура ВыбратьЭлементыДляПросроченнойВИерархии(ВыборкаСИерархией, ТаблицаСтрокПоСчету, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке) 
	Пока ВыборкаСИерархией.Следующий() Цикл
		Если ВыборкаСИерархией.ТипЗаписи()=ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			Если ТаблицаСтрокПоСчету.Количество() > 1 Тогда
				ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|Тело");
				ОбластьСтрока.Параметры.Итого			 	= "Итого по счету: " + ТаблицаСтрокПоСчету[0].СчетИерархия;
				ОбластьСтрока.Параметры.КонПериода2М 		= СтруктураПоказателей.КонПериода2МПоСчетуИтого;
				ОбластьСтрока.Параметры.ОборотыПериода1М	= СтруктураПоказателей.ОборотыПериода1МПоСчетуИтого;
				ОбластьСтрока.Параметры.КонПериода1М		= СтруктураПоказателей.КонПериода1МПоСчетуИтого;
				ТабДокумент.Вывести(ОбластьСтрока);
				
				ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|КонПериода1МПоСрокам");
				ОбластьСтрока.Параметры.Колонка11Ч			= СтруктураПоказателей.Колонка11ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка12Ч			= СтруктураПоказателей.Колонка12ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка13Ч			= СтруктураПоказателей.Колонка13ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка14Ч			= СтруктураПоказателей.Колонка14ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка15Ч			= СтруктураПоказателей.Колонка15ЧПоСчетуИтого;
				ТабДокумент.Присоединить(ОбластьСтрока, 1, "По срокам 1 месяц", Ложь);
				
				ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|Тело1");
				ОбластьСтрока.Параметры.СуммаРезерва		= СтруктураПоказателей.СуммаРезерваПоСчетуИтого;
				ОбластьСтрока.Параметры.ОборотыПериодаТекМ	= СтруктураПоказателей.ОборотыПериодаТекМПоСчетуИтого;
				ОбластьСтрока.Параметры.КонПериодаТекМ		= СтруктураПоказателей.КонПериодаТекМПоСчетуИтого;
				ТабДокумент.Присоединить(ОбластьСтрока,,, Истина);
				
				ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету|КонПериодаПоСрокам");
				ОбластьСтрока.Параметры.Колонка22Ч			= СтруктураПоказателей.Колонка22ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка23Ч			= СтруктураПоказателей.Колонка23ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка24Ч			= СтруктураПоказателей.Колонка24ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка25Ч			= СтруктураПоказателей.Колонка25ЧПоСчетуИтого;
				ОбластьСтрока.Параметры.Колонка26Ч			= СтруктураПоказателей.Колонка26ЧПоСчетуИтого;
				ТабДокумент.Присоединить(ОбластьСтрока, 2, "По срокам на дату сдачи отчета", Ложь);
				
				ТабДокумент.НачатьГруппуСтрок("ИтогоПоСчету" + ТаблицаСтрокПоСчету[0].СчетИерархия, Ложь);
				
				СтруктураПоказателей.КонПериода2МИтого 		= СтруктураПоказателей.КонПериода2МИтого 		+ СтруктураПоказателей.КонПериода2МПоСчетуИтого;
				СтруктураПоказателей.ОборотыПериода1МИтого 	= СтруктураПоказателей.ОборотыПериода1МИтого 	+ СтруктураПоказателей.ОборотыПериода1МПоСчетуИтого;
				СтруктураПоказателей.КонПериода1МИтого 		= СтруктураПоказателей.КонПериода1МИтого 		+ СтруктураПоказателей.КонПериода1МПоСчетуИтого;
				СтруктураПоказателей.Колонка11ЧИтого 		= СтруктураПоказателей.Колонка11ЧИтого 			+ СтруктураПоказателей.Колонка11ЧПоСчетуИтого;
				СтруктураПоказателей.Колонка12ЧИтого 		= СтруктураПоказателей.Колонка12ЧИтого 			+ СтруктураПоказателей.Колонка12ЧПоСчетуИтого;
				СтруктураПоказателей.Колонка13ЧИтого 		= СтруктураПоказателей.Колонка13ЧИтого 			+ СтруктураПоказателей.Колонка13ЧПоСчетуИтого;	
				СтруктураПоказателей.Колонка14ЧИтого 		= СтруктураПоказателей.Колонка14ЧИтого 			+ СтруктураПоказателей.Колонка14ЧПоСчетуИтого;
				СтруктураПоказателей.Колонка15ЧИтого 		= СтруктураПоказателей.Колонка15ЧИтого 			+ СтруктураПоказателей.Колонка15ЧПоСчетуИтого;
				СтруктураПоказателей.СуммаРезерваИтого 		= СтруктураПоказателей.СуммаРезерваИтого 		+ СтруктураПоказателей.СуммаРезерваПоСчетуИтого;
				СтруктураПоказателей.ОборотыПериодаТекМИтого= СтруктураПоказателей.ОборотыПериодаТекМИтого 	+ СтруктураПоказателей.ОборотыПериодаТекМПоСчетуИтого;
				СтруктураПоказателей.КонПериодаТекМИтого 	= СтруктураПоказателей.КонПериодаТекМИтого 		+ СтруктураПоказателей.КонПериодаТекМПоСчетуИтого;
				СтруктураПоказателей.Колонка22ЧИтого		= СтруктураПоказателей.Колонка22ЧИтого 			+ СтруктураПоказателей.Колонка22ЧПоСчетуИтого;
				СтруктураПоказателей.Колонка23ЧИтого		= СтруктураПоказателей.Колонка23ЧИтого 			+ СтруктураПоказателей.Колонка23ЧПоСчетуИтого;
				СтруктураПоказателей.Колонка24ЧИтого		= СтруктураПоказателей.Колонка24ЧИтого 			+ СтруктураПоказателей.Колонка24ЧПоСчетуИтого;
				СтруктураПоказателей.Колонка25ЧИтого		= СтруктураПоказателей.Колонка25ЧИтого 			+ СтруктураПоказателей.Колонка25ЧПоСчетуИтого;
				СтруктураПоказателей.Колонка26ЧИтого		= СтруктураПоказателей.Колонка26ЧИтого 			+ СтруктураПоказателей.Колонка26ЧПоСчетуИтого;
				
				ГруппировкаВыводилась = Ложь;
				Для Инд = 0 По ТаблицаСтрокПоСчету.Количество() - 1 Цикл
					Для Инд1 = 0 По ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов.Количество() - 1 Цикл
						МассивОбластей = ТаблицаСтрокПоСчету[Инд].СтрокаРасчетов[Инд1];
						ТабДокумент.Вывести(МассивОбластей[0]);
						ТабДокумент.Присоединить(МассивОбластей[1], 1, "По срокам 1 месяц", Ложь);
						ТабДокумент.Присоединить(МассивОбластей[2],,, Истина);
						ТабДокумент.Присоединить(МассивОбластей[3], 2, "По срокам на дату сдачи отчета", Ложь);
						ТабДокумент.НачатьГруппуСтрок("ИтогоПодоговору" + МассивОбластей[0].Параметры.ДоговорКонтрагента, Ложь);
						Для Инд2 = 0 По ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1].Количество() - 1 Цикл
							Если ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1][Инд2] = Неопределено Тогда Продолжить; КонецЕсли;
							МассивОбластей = ТаблицаСтрокПоСчету[Инд].СтрокаДетальная[Инд1][Инд2];
							ТабДокумент.Вывести(МассивОбластей[0]);
							ТабДокумент.Присоединить(МассивОбластей[1], 1, "По срокам 1 месяц", Ложь);
							ТабДокумент.Присоединить(МассивОбластей[2],,, Истина);
							ТабДокумент.Присоединить(МассивОбластей[3], 2, "По срокам на дату сдачи отчета", Ложь);
						КонецЦикла;	          
						ТабДокумент.ЗакончитьГруппуСтрок();
					КонецЦикла;	
				КонецЦикла;
				ТабДокумент.ЗакончитьГруппуСтрок();
				
				СтруктураПоказателей.Вставить("КонПериодаТекМПоСчетуИтого"		, 0);
				СтруктураПоказателей.Вставить("СуммаРезерваПоСчетуИтого"		, 0);   
				СтруктураПоказателей.Вставить("Колонка11ЧПоСчетуИтого"			, 0);  
				СтруктураПоказателей.Вставить("Колонка12ЧПоСчетуИтого"			, 0);   
				СтруктураПоказателей.Вставить("Колонка13ЧПоСчетуИтого"			, 0);  
				СтруктураПоказателей.Вставить("Колонка14ЧПоСчетуИтого"			, 0);   
				СтруктураПоказателей.Вставить("Колонка15ЧПоСчетуИтого"			, 0);  
				СтруктураПоказателей.Вставить("Колонка17ЧПоСчетуИтого"			, 0);   
				СтруктураПоказателей.Вставить("СуммаРезерваНУЧПоСчетуИтого"		, 0);
				СтруктураПоказателей.Вставить("КонПериода2МПоСчетуИтого"		, 0);   
				СтруктураПоказателей.Вставить("ОборотыПериода1МПоСчетуИтого"	, 0);  
				СтруктураПоказателей.Вставить("КонПериода1МПоСчетуИтого"		, 0);   
				СтруктураПоказателей.Вставить("ОборотыПериодаТекМПоСчетуИтого"	, 0);  
				СтруктураПоказателей.Вставить("Колонка22ЧПоСчетуИтого"			, 0);   
				СтруктураПоказателей.Вставить("Колонка23ЧПоСчетуИтого"			, 0);  
				СтруктураПоказателей.Вставить("Колонка24ЧПоСчетуИтого"			, 0);   
				СтруктураПоказателей.Вставить("Колонка25ЧПоСчетуИтого"			, 0);       
				СтруктураПоказателей.Вставить("Колонка26ЧПоСчетуИтого"			, 0);
			КонецЕсли;
			Если ТаблицаСтрокПоСчету.Количество() и ВыборкаСИерархией.СчетРасчетов.Родитель = ТаблицаСтрокПоСчету[0].СчетИерархия Тогда
				СтрокаТЗ = ТаблицаСтрокПоСчету[ТаблицаСтрокПоСчету.Количество() - 1];
				СтрокаТЗ.СчетГруппировка = ВыборкаСИерархией.СчетРасчетов;
			Иначе	
				ТаблицаСтрокПоСчету.Очистить();
				СтрокаТЗ = ТаблицаСтрокПоСчету.Добавить();
				СтрокаТЗ.СчетИерархия = ВыборкаСИерархией.СчетРасчетов;
				СтрокаТЗ.СтрокаИерархия = ОбластьСтрока;
				СтрокаТЗ.СтрокаРасчетов = Новый Массив();
				СтрокаТЗ.СтрокаДетальная = Новый Массив(1, 1);
			КонецЕсли;	
			
			ВыбратьЭлементыДляПросроченнойВИерархии(ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией,"СчетРасчетов"), ТаблицаСтрокПоСчету, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке); 
		ИначеЕсли ВыборкаСИерархией.ТипЗаписи()=ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			//ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету");
			//ОбластьСтрока.Параметры.Итого			 	= "Итого по счету: " + ВыборкаСИерархией.СчетРасчетов;
			//ОбластьСтрока.Параметры.СуммаДЗБезРезерва 	= СтруктураПоказателей.СуммаДЗБезРезерваПоСчетуИтого;
			//ОбластьСтрока.Параметры.СуммаРезерва		= СтруктураПоказателей.СуммаРезерваПоСчетуИтого;
			//ОбластьСтрока.Параметры.СуммаДЗСРезервом	= СтруктураПоказателей.СуммаДЗСРезервомПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка12Ч			= СтруктураПоказателей.Колонка12ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка13Ч			= СтруктураПоказателей.Колонка13ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка14Ч			= СтруктураПоказателей.Колонка14ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка15Ч			= СтруктураПоказателей.Колонка15ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка16Ч			= СтруктураПоказателей.Колонка16ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.Колонка17Ч			= СтруктураПоказателей.Колонка17ЧПоСчетуИтого;
			//ОбластьСтрока.Параметры.СуммаРезерваНУ		= СтруктураПоказателей.СуммаРезерваНУЧПоСчетуИтого;
			
			СтрокаТЗ = ТаблицаСтрокПоСчету[ТаблицаСтрокПоСчету.Количество() - 1];
			СтрокаТЗ.СчетГруппировка = ВыборкаСИерархией.СчетРасчетов;
			//СтрокаТЗ.СтрокаГруппировка = ОбластьСтрока;
			
			ВыбратьЭлементыДляПросроченнойБезИерархии(ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), ТаблицаСтрокПоСчету, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке); 
		ИначеЕсли ВыборкаСИерархией.ТипЗаписи()=ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
      		ВыбратьЭлементыДляПросроченной(ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.Прямой), ТаблицаСтрокПоСчету, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, КоличествоВСтеке); 
    	КонецЕсли;   
  	КонецЦикла;
КонецПроцедуры

Процедура ВыбратьЭлементыДляПросроченнойБезИерархии(ВыборкаБезИерархии, ТаблицаСтрокПоСчету, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, СтруктураПоказателей, КоличествоВСтеке) 
	Пока ВыборкаБезИерархии.Следующий() Цикл
		СуммаДЗБезРезерва = ВыборкаБезИерархии.Подтверждено + ВыборкаБезИерархии.НеПодтверждено;
		Если СуммаДЗБезРезерва = 0 и (ВыборкаБезИерархии.ВИЛС_Подтверждено1Месяц + ВыборкаБезИерархии.ВИЛС_НеПодтверждено1Месяц = 0) и (ВыборкаБезИерархии.ВИЛС_Подтверждено2Месяц + ВыборкаБезИерархии.ВИЛС_НеПодтверждено2Месяц = 0) Тогда Продолжить; КонецЕсли;
		
		//МассивСтрокОстатковПоДоговору = ВыборкаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Выборка_3.Сбросить();
		
		ДанныеДляПросроченной_1 = ПолучитьДанныеСтрокиДляПросроченной_1(ВыборкаШапка, ВыборкаБезИерархии, ВыборкаДокументов, ВыборкаОстатков, ДтКт);
		
		ДанныеДляПросроченной_2 = ПолучитьДанныеСтрокиДляПросроченной_2(ВыборкаШапка, ВыборкаБезИерархии, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ДтКт, СуммаДЗБезРезерва, ДанныеДляПросроченной_1);
			
		ТЗДляСтруктуры = ДанныеДляПросроченной_2.ТЗДляСтруктуры;
		КоличествоСтрокТЗДляСтруктуры = ТЗДляСтруктуры.Количество();
		Если КоличествоСтрокТЗДляСтруктуры = 0 Тогда Продолжить; КонецЕсли; 
		
		МассивОбластей = Новый Массив();
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка|Тело");
		ОбластьСтрока.Параметры.Заполнить(ДанныеДляПросроченной_1);
		ОбластьСтрока.Параметры.Заполнить(ДанныеДляПросроченной_2);
		//ОбластьСтрока.Параметры.НомерСтроки = НПП;
		СтруктураПоказателей.НПП = СтруктураПоказателей.НПП + 1;
		
		СведенияОбКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаБезИерархии.Контрагент, ВыборкаШапка.КонецПериода);
		КонтраНаим = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование, ЮридическийАдрес, Телефоны");
		
		ОбластьСтрока.Параметры.НаименованиеСтр = КонтраНаим;
		ОбластьСтрока.Параметры.Счет = ВыборкаБезИерархии.СчетРасчетов;
		ОбластьСтрока.Параметры.НомерДоговора = ?(ЗначениеЗаполнено(ВыборкаБезИерархии.ДоговорКонтрагента),?(ЗначениеЗаполнено(ВыборкаБезИерархии.ДоговорКонтрагента.Номер), ВыборкаБезИерархии.ДоговорКонтрагента.Номер, ВыборкаБезИерархии.ДоговорКонтрагента.Наименование), "б.н.");
		ОбластьСтрока.Параметры.ДатаДоговора = ?(ЗначениеЗаполнено(ВыборкаБезИерархии.ДоговорКонтрагента),ВыборкаБезИерархии.ДоговорКонтрагента.Дата, Дата(1,1,1,0,0,0));
		ОбластьСтрока.Параметры.ИНН = ВыборкаБезИерархии.Контрагент.ИНН;
		ОбластьСтрока.Параметры.КонПериода2М 	= ТЗДляСтруктуры.Итог("Колонка01");
		ОбластьСтрока.Параметры.КонПериода1М 	= ТЗДляСтруктуры.Итог("Колонка11") 
												+ ТЗДляСтруктуры.Итог("Колонка12") 
												+ ТЗДляСтруктуры.Итог("Колонка13") 
												+ ТЗДляСтруктуры.Итог("Колонка14") 
												+ ТЗДляСтруктуры.Итог("Колонка15");
		МассивОбластей.Добавить(ОбластьСтрока);	
		
		ОбластьСтрока1 = Макет.ПолучитьОбласть("Строка|КонПериода1МПоСрокам");
		ОбластьСтрока1.Параметры.Колонка11Ч = ТЗДляСтруктуры.Итог("Колонка11");
		ОбластьСтрока1.Параметры.Колонка12Ч = ТЗДляСтруктуры.Итог("Колонка12");
		ОбластьСтрока1.Параметры.Колонка13Ч = ТЗДляСтруктуры.Итог("Колонка13");
		ОбластьСтрока1.Параметры.Колонка14Ч = ТЗДляСтруктуры.Итог("Колонка14");
		ОбластьСтрока1.Параметры.Колонка15Ч = ТЗДляСтруктуры.Итог("Колонка15");
		МассивОбластей.Добавить(ОбластьСтрока1);
		
		ОбластьСтрока2 = Макет.ПолучитьОбласть("Строка|Тело1"); 
		ОбластьСтрока2.Параметры.Заполнить(ДанныеДляПросроченной_1);
		ОбластьСтрока2.Параметры.Заполнить(ДанныеДляПросроченной_2);
		//Если ЗначениеЗаполнено(ВыборкаБезИерархии.ДоговорКонтрагента) и ТипЗнч(ВыборкаБезИерархии.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		//	ДатаПогашенияДЗИзКарточкиДоговора = УправлениеСвойствами.ЗначениеСвойства(ВыборкаБезИерархии.ДоговорКонтрагента, СвойствоСрокПогашенияЗадолженности);
		//	ОбластьСтрока2.Параметры.ДатаПогашенияДЗИзКарточкиДоговора 	= ДатаПогашенияДЗИзКарточкиДоговора;
		//Конецесли;	
		ОбластьСтрока2.Параметры.КонПериодаТекМ = ТЗДляСтруктуры.Итог("Колонка22") 
												+ ТЗДляСтруктуры.Итог("Колонка23") 
												+ ТЗДляСтруктуры.Итог("Колонка24") 
												+ ТЗДляСтруктуры.Итог("Колонка25") 
												+ ТЗДляСтруктуры.Итог("Колонка26");
		МассивОбластей.Добавить(ОбластьСтрока2);
		
		ОбластьСтрока3 = Макет.ПолучитьОбласть("Строка|КонПериодаПоСрокам");
		ОбластьСтрока3.Параметры.Колонка22Ч = ТЗДляСтруктуры.Итог("Колонка22");
		ОбластьСтрока3.Параметры.Колонка23Ч = ТЗДляСтруктуры.Итог("Колонка23");
		ОбластьСтрока3.Параметры.Колонка24Ч = ТЗДляСтруктуры.Итог("Колонка24");
		ОбластьСтрока3.Параметры.Колонка25Ч = ТЗДляСтруктуры.Итог("Колонка25");
		ОбластьСтрока3.Параметры.Колонка26Ч = ТЗДляСтруктуры.Итог("Колонка26");
		МассивОбластей.Добавить(ОбластьСтрока3);	
		
		Если 	Не ?(ОбластьСтрока. Параметры.КонПериода2М  		= Неопределено, 0, ОбластьСтрока. Параметры.КонПериода2М) = 0 
			или Не ?(ОбластьСтрока. Параметры.ОборотыПериода1М  	= Неопределено, 0, ОбластьСтрока. Параметры.ОборотыПериода1М) = 0
			или Не ?(ОбластьСтрока. Параметры.КонПериода1М  		= Неопределено, 0, ОбластьСтрока. Параметры.КонПериода1М) = 0
			или Не ?(ОбластьСтрока1.Параметры.Колонка11Ч  			= Неопределено, 0, ОбластьСтрока1.Параметры.Колонка11Ч) = 0
			или Не ?(ОбластьСтрока1.Параметры.Колонка12Ч  			= Неопределено, 0, ОбластьСтрока1.Параметры.Колонка12Ч) = 0
			или Не ?(ОбластьСтрока1.Параметры.Колонка13Ч  			= Неопределено, 0, ОбластьСтрока1.Параметры.Колонка13Ч) = 0
			или Не ?(ОбластьСтрока1.Параметры.Колонка14Ч  			= Неопределено, 0, ОбластьСтрока1.Параметры.Колонка14Ч) = 0
			или Не ?(ОбластьСтрока1.Параметры.Колонка15Ч  			= Неопределено, 0, ОбластьСтрока1.Параметры.Колонка15Ч) = 0
			или Не ?(ОбластьСтрока2.Параметры.СуммаРезерва  		= Неопределено, 0, ОбластьСтрока2.Параметры.СуммаРезерва) = 0
			или Не ?(ОбластьСтрока2.Параметры.ОборотыПериодаТекМ  	= Неопределено, 0, ОбластьСтрока2.Параметры.ОборотыПериодаТекМ) = 0
			или Не ?(ОбластьСтрока2.Параметры.КонПериодаТекМ  		= Неопределено, 0, ОбластьСтрока2.Параметры.КонПериодаТекМ) = 0
			или Не ?(ОбластьСтрока3.Параметры.Колонка22Ч  			= Неопределено, 0, ОбластьСтрока3.Параметры.Колонка22Ч) = 0
			или Не ?(ОбластьСтрока3.Параметры.Колонка23Ч  			= Неопределено, 0, ОбластьСтрока3.Параметры.Колонка23Ч) = 0
			или Не ?(ОбластьСтрока3.Параметры.Колонка24Ч  			= Неопределено, 0, ОбластьСтрока3.Параметры.Колонка24Ч) = 0
			или Не ?(ОбластьСтрока3.Параметры.Колонка25Ч  			= Неопределено, 0, ОбластьСтрока3.Параметры.Колонка25Ч) = 0
			или Не ?(ОбластьСтрока3.Параметры.Колонка26Ч  			= Неопределено, 0, ОбластьСтрока3.Параметры.Колонка26Ч) = 0
			Тогда
			СтрокаТЗ1 = ТаблицаСтрокПоСчету[ТаблицаСтрокПоСчету.Количество() - 1];
			Если ЗначениеЗаполнено(СтрокаТЗ1.СчетРасчетов) тогда
				СтрокаТЗ = ТаблицаСтрокПоСчету.Добавить();
				СтрокаТЗ.СчетИерархия 		= СтрокаТЗ1.СчетИерархия;
				СтрокаТЗ.СчетГруппировка 	= СтрокаТЗ1.СчетГруппировка;
				СтрокаТЗ.СчетРасчетов 		= ВыборкаБезИерархии.СчетРасчетов;
				СтрокаТЗ.СтрокаРасчетов = Новый Массив();
				СтрокаТЗ.СтрокаДетальная = Новый Массив(1, 1);   //100
			Иначе
				СтрокаТЗ = СтрокаТЗ1;
				СтрокаТЗ.СчетРасчетов 		= ВыборкаБезИерархии.СчетРасчетов;
			КонецЕсли;	
			СтрокаТЗ.СтрокаРасчетов.Добавить(МассивОбластей);
			//Если СтрокаТЗ.СтрокаДетальная = Неопределено Тогда
			//	СтрокаТЗ.СтрокаДетальная = Новый Массив(100, 100);
			//КонецЕсли;	
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтруктураПоказателей.Колонка11ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка11ЧПоСчетуИтого 	+ ОбластьСтрока1.Параметры.Колонка11Ч;
		СтруктураПоказателей.Колонка12ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка12ЧПоСчетуИтого 	+ ОбластьСтрока1.Параметры.Колонка12Ч;
		СтруктураПоказателей.Колонка13ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка13ЧПоСчетуИтого 	+ ОбластьСтрока1.Параметры.Колонка13Ч;
		СтруктураПоказателей.Колонка14ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка14ЧПоСчетуИтого 	+ ОбластьСтрока1.Параметры.Колонка14Ч;
		СтруктураПоказателей.Колонка15ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка15ЧПоСчетуИтого 	+ ОбластьСтрока1.Параметры.Колонка15Ч;
		
		СтруктураПоказателей.Колонка22ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка22ЧПоСчетуИтого 	+ ОбластьСтрока3.Параметры.Колонка22Ч;
		СтруктураПоказателей.Колонка23ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка23ЧПоСчетуИтого 	+ ОбластьСтрока3.Параметры.Колонка23Ч; 
		СтруктураПоказателей.Колонка24ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка24ЧПоСчетуИтого 	+ ОбластьСтрока3.Параметры.Колонка24Ч;
		СтруктураПоказателей.Колонка25ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка25ЧПоСчетуИтого 	+ ОбластьСтрока3.Параметры.Колонка25Ч;
		СтруктураПоказателей.Колонка26ЧПоСчетуИтого 	= СтруктураПоказателей.Колонка26ЧПоСчетуИтого 	+ ОбластьСтрока3.Параметры.Колонка26Ч;
		
		СтруктураПоказателей.КонПериода2МПоСчетуИтого 		= СтруктураПоказателей.КонПериода2МПоСчетуИтого 		+ ОбластьСтрока.Параметры.КонПериода2М;
		СтруктураПоказателей.ОборотыПериода1МПоСчетуИтого	= СтруктураПоказателей.ОборотыПериода1МПоСчетуИтого 	+ ОбластьСтрока.Параметры.ОборотыПериода1М;
		СтруктураПоказателей.КонПериода1МПоСчетуИтого	 	= СтруктураПоказателей.КонПериода1МПоСчетуИтого 		+ ОбластьСтрока.Параметры.КонПериода1М;
		
		СтруктураПоказателей.СуммаРезерваПоСчетуИтого 		= СтруктураПоказателей.СуммаРезерваПоСчетуИтого 		+ ОбластьСтрока2.Параметры.СуммаРезерва;
		СтруктураПоказателей.ОборотыПериодаТекМПоСчетуИтого	= СтруктураПоказателей.ОборотыПериодаТекМПоСчетуИтого 	+ ОбластьСтрока2.Параметры.ОборотыПериодаТекМ;
		СтруктураПоказателей.КонПериодаТекМПоСчетуИтого 	= СтруктураПоказателей.КонПериодаТекМПоСчетуИтого 		+ ОбластьСтрока2.Параметры.КонПериодаТекМ;
		
		Для каждого СтрокаТЗДляСтруктуры Из ТЗДляСтруктуры Цикл
			МассивОбластей = Новый Массив();
			ОбластьСтрокаД = Макет.ПолучитьОбласть("СтрокаДетальная|Тело");
			ОбластьСтрокаД.Параметры.ЗаЧто1М 		= СтрокаТЗДляСтруктуры.ЗаЧто1М;
			ОбластьСтрокаД.Параметры.ДатаДолга1М 	= СтрокаТЗДляСтруктуры.ДатаДок1М;
			ОбластьСтрокаД.Параметры.Регистратор1М	= СтрокаТЗДляСтруктуры.Регистратор1М;
			МассивОбластей.Добавить(ОбластьСтрокаД);
			
			ОбластьСтрокаД1 = Макет.ПолучитьОбласть("СтрокаДетальная|КонПериода1МПоСрокам");
			ОбластьСтрокаД1.Параметры.Колонка11Ч 	= СтрокаТЗДляСтруктуры.Колонка11;
			ОбластьСтрокаД1.Параметры.Колонка12Ч 	= СтрокаТЗДляСтруктуры.Колонка12;
			ОбластьСтрокаД1.Параметры.Колонка13Ч 	= СтрокаТЗДляСтруктуры.Колонка13;
			ОбластьСтрокаД1.Параметры.Колонка14Ч 	= СтрокаТЗДляСтруктуры.Колонка14;
			ОбластьСтрокаД1.Параметры.Колонка15Ч 	= СтрокаТЗДляСтруктуры.Колонка15;
			//ОбластьСтрокаД.Присоединить(ОбластьСтрокаД1, 1, "По срокам 1 месяц", Ложь); 
			МассивОбластей.Добавить(ОбластьСтрокаД1);
			
			ОбластьСтрокаД2 = Макет.ПолучитьОбласть("СтрокаДетальная|Тело1");
			ОбластьСтрокаД2.Параметры.ЗаЧто			= СтрокаТЗДляСтруктуры.ЗаЧто;
			ОбластьСтрокаД2.Параметры.ДатаДолга 	= СтрокаТЗДляСтруктуры.ДатаДок;
			ОбластьСтрокаД2.Параметры.Регистратор 	= СтрокаТЗДляСтруктуры.Регистратор;
			//ОбластьСтрокаД.Присоединить(ОбластьСтрокаД2,,, Истина); 
			МассивОбластей.Добавить(ОбластьСтрокаД2);
			
			ОбластьСтрокаД3 = Макет.ПолучитьОбласть("СтрокаДетальная|КонПериодаПоСрокам");
			ОбластьСтрокаД3.Параметры.Колонка22Ч 	= СтрокаТЗДляСтруктуры.Колонка22;
			ОбластьСтрокаД3.Параметры.Колонка23Ч 	= СтрокаТЗДляСтруктуры.Колонка23;
			ОбластьСтрокаД3.Параметры.Колонка24Ч 	= СтрокаТЗДляСтруктуры.Колонка24;
			ОбластьСтрокаД3.Параметры.Колонка25Ч 	= СтрокаТЗДляСтруктуры.Колонка25;
			ОбластьСтрокаД3.Параметры.Колонка26Ч 	= СтрокаТЗДляСтруктуры.Колонка26;
			//ОбластьСтрокаД.Присоединить(ОбластьСтрокаД3, 2, "По срокам на дату сдачи отчета", Ложь); 
			МассивОбластей.Добавить(ОбластьСтрокаД3);
			
			Если СтрокаТЗ.СтрокаДетальная[СтрокаТЗ.СтрокаРасчетов.ВГраница()][0] = Неопределено Тогда
				СтрокаТЗ.СтрокаДетальная[СтрокаТЗ.СтрокаРасчетов.ВГраница()].Вставить(0, МассивОбластей);
			Иначе	
				СтрокаТЗ.СтрокаДетальная[СтрокаТЗ.СтрокаРасчетов.ВГраница()].Добавить(МассивОбластей);
			КонецЕсли;	
		КонецЦикла;
		
		
	КонецЦикла;
КонецПроцедуры

Процедура ВыбратьЭлементыДляПросроченной(Выборка, ТаблицаСтрокПоСчету, ВыборкаДокументов, ВыборкаОстатков, Выборка_3, ВыборкаШапка, ДтКт, ТабДокумент, Макет, КоличествоВСтеке)    //ВыборкаОстатков, 
	Пока Выборка.Следующий() Цикл
    // Вставить обработку выборки ВыборкаБезИерархии
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьДанныеСтрокиДляПросроченной_1(Знач ВыборкаШапка, Знач ВыборкаБезИерархии, Знач ВыборкаДокументов, Знач ВыборкаОстатков, Знач ДтКт = "Дт")
	КонПериода 		= ВыборкаШапка.КонецПериода;
	Организация 	= ВыборкаШапка.Организация;
	Счет            = ВыборкаБезИерархии.СчетРасчетов;
	Контрагент		= ВыборкаБезИерархии.Контрагент;
	ДоговорКонтрагента = ВыборкаБезИерархии.ДоговорКонтрагента;
	КонПериода2М = 0;  
	ОборотыПериода1М = 0;
	КонПериода1М = 0;
	ОборотыПериодаТекМ = 0;
	Мероприятие = Неопределено;
	СрокПогашенияЗадолженности = Неопределено; 
	СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", Контрагент, ДоговорКонтрагента, Счет);
	СписокСтрокПоТекущейЗадолженности = ВыборкаОстатков.НайтиСтроки(СтруктураПоиска);
	КоличествоНайденныхСтрок = СписокСтрокПоТекущейЗадолженности.Количество();
	Если КоличествоНайденныхСтрок Тогда
		Если ДтКт = "Дт" Тогда
			КонПериода2М 		= СписокСтрокПоТекущейЗадолженности[0].КонПериода2МДт;  
			ОборотыПериода1М 	= СписокСтрокПоТекущейЗадолженности[0].ОборотыПериода1МКт;// - Выборка.ОборотыПериода1МДт;
			КонПериода1М 		= СписокСтрокПоТекущейЗадолженности[0].КонПериода1МДт;
			ОборотыПериодаТекМ 	= СписокСтрокПоТекущейЗадолженности[0].ОборотыПериодаКт;// - Выборка.ОборотыПериодаДт;
			КонПериодаТекМ		= СписокСтрокПоТекущейЗадолженности[0].КонПериодаДт;
		Иначе
			КонПериода2М 		= СписокСтрокПоТекущейЗадолженности[0].КонПериода2МКт;  
			ОборотыПериода1М 	= СписокСтрокПоТекущейЗадолженности[0].ОборотыПериода1МДт;// - Выборка.ОборотыПериода1МКт;
			КонПериода1М 		= СписокСтрокПоТекущейЗадолженности[0].КонПериода1МКт;
			ОборотыПериодаТекМ 	= СписокСтрокПоТекущейЗадолженности[0].ОборотыПериодаДт;// - Выборка.ОборотыПериодаКт;
			КонПериодаТекМ		= СписокСтрокПоТекущейЗадолженности[0].КонПериодаКт;
		КонецЕсли; 
		Мероприятие 				= СписокСтрокПоТекущейЗадолженности[0].Мероприятие;  
		СрокПогашенияЗадолженности 	= СписокСтрокПоТекущейЗадолженности[0].СрокПогашенияЗадолженности;
	КонецЕсли; 
	
	//Если КонПериода < Дата(2019,2,1) Тогда
	//	СписокСтрокПоТекущейЗадолженности1 = Новый Массив();
	//	МассивСчетов = Новый Массив();
	//	МассивСчетов.Добавить(Счет);
	//	Если ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	//		Если ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          						// КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
	//			и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
	//			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	//			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", Контрагент, ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	//			СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
	//		ИначеЕсли ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
	//			и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками Тогда
	//			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
	//			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", Контрагент, ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
	//			СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
	//		КонецЕсли; 
	//	КонецЕсли;
	//	СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", Контрагент, ДоговорКонтрагента, Счет);
	//	СписокСтрокПоТекущейЗадолженности = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
	//	Если СписокСтрокПоТекущейЗадолженности1.Количество() Тогда
	//		Для Каждого СтрокаТЗТЗ Из СписокСтрокПоТекущейЗадолженности1 Цикл
	//			Если СписокСтрокПоТекущейЗадолженности.Найти(СтрокаТЗТЗ) = Неопределено Тогда
	//				СписокСтрокПоТекущейЗадолженности.Добавить(СтрокаТЗТЗ);
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//	КолС = СписокСтрокПоТекущейЗадолженности.Количество() - 1;
	//	Для НомС = 0 По КолС Цикл
	//		Если КонПериода1 > СписокСтрокПоТекущейЗадолженности[КолС - НомС].Период Тогда Продолжить; КонецЕсли;
	//		СписокСтрокПоТекущейЗадолженности.Удалить(КолС - НомС);
	//	КонецЦикла;
	//Конецесли;
		
	
	Колонка24 = "";
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("КонПериода2М", 		КонПериода2М);
	СтруктураСтроки.Вставить("ОборотыПериода1М", 	ОборотыПериода1М);
	СтруктураСтроки.Вставить("КонПериода1М", 		КонПериода1М);
	СтруктураСтроки.Вставить("ОборотыПериодаТекМ", 	ОборотыПериодаТекМ);
	СтруктураСтроки.Вставить("Колонка23", 			?(ЗначениеЗаполнено(ДоговорКонтрагента), ДоговорКонтрагента.Подразделение, ""));  
	СтруктураСтроки.Вставить("Колонка24", 			Колонка24);  
	СтруктураСтроки.Вставить("КонПериодаТекМ", 		КонПериодаТекМ);   
	СтруктураСтроки.Вставить("Мероприятие", 		Мероприятие);    
	СтруктураСтроки.Вставить("СрокПогашенияЗадолженности", СрокПогашенияЗадолженности);
	
	Возврат СтруктураСтроки;
КонецФункции	//	ПолучитьДанныеСтрокиПросроченной1()	                    
		
Функция ПолучитьДанныеСтрокиДляПросроченной_2(Знач ВыборкаШапка, Знач ВыборкаБезИерархии, Знач ВыборкаДокументов, Знач ВыборкаОстатков, Знач Выборка_3, Знач ДтКт = "Дт", Знач СуммаДолгаПоДоговору = 0, Знач ДанныеОДокПросроч = Неопределено) 
	КонПериода 		= ВыборкаШапка.КонецПериода;
	Организация 	= ВыборкаШапка.Организация;
	Счет            = ВыборкаБезИерархии.СчетРасчетов;
	Контрагент		= ВыборкаБезИерархии.Контрагент;
	ДоговорКонтрагента = ВыборкаБезИерархии.ДоговорКонтрагента;

	СуммаРезерва = ПолучитьРезерв(Счет, Контрагент, ДоговорКонтрагента, Выборка_3);
	СтруктураСтроки = Новый Структура;     //Просроченная 
	
	ТЗДляСтруктуры = Новый ТаблицаЗначений;
	ТЗДляСтруктуры.Колонки.Добавить("ТипДокумента");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаДок");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаДок1М");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаДокСист");
	ТЗДляСтруктуры.Колонки.Добавить("НомерДок");
	ТЗДляСтруктуры.Колонки.Добавить("НомерДок1М");
	ТЗДляСтруктуры.Колонки.Добавить("ЗаЧто");
	ТЗДляСтруктуры.Колонки.Добавить("ЗаЧто1М");
	ТЗДляСтруктуры.Колонки.Добавить("ПроверятьГалочку");
	ТЗДляСтруктуры.Колонки.Добавить("Регистратор");
	ТЗДляСтруктуры.Колонки.Добавить("Регистратор1М");
	
	ТЗДляСтруктуры.Колонки.Добавить("ДатаПогашенияДЗ");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаПогашенияДЗСтр");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаПогашенияДЗ1М");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаПогашенияДЗ1МСтр");
	
	ТЗДляСтруктуры.Колонки.Добавить("Колонка01", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка11", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка12", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка13", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка14", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка15", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка17", Новый ОписаниеТипов("Булево"));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка22", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка23", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка24", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка25", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка26", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	СуммаДолгаПоДоговору = ДанныеОДокПросроч.КонПериодаТекМ;
	СписокСтрокПоТекущейЗадолженности1 = Новый Массив();
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счет);
	Если ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Если ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          						// КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
			и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", Контрагент, ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
			СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
		ИначеЕсли ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
			и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками Тогда
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", Контрагент, ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
			СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
		КонецЕсли; 
	КонецЕсли;
	//СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаЗадолженность.Контрагент, ВыборкаЗадолженность.ДоговорКонтрагента, МассивСчетов);
	СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", Контрагент, ДоговорКонтрагента, Счет);
	СписокСтрокПоТекущейЗадолженности = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрокПоТекущейЗадолженности1.Количество() Тогда
		Для Каждого СтрокаТЗТЗ Из СписокСтрокПоТекущейЗадолженности1 Цикл
			Если СписокСтрокПоТекущейЗадолженности.Найти(СтрокаТЗТЗ) = Неопределено Тогда
				СписокСтрокПоТекущейЗадолженности.Добавить(СтрокаТЗТЗ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МассивОбъектовРасчета = Новый Массив();
	Для Каждого ЭлМассива Из СписокСтрокПоТекущейЗадолженности Цикл
		Если Не МассивОбъектовРасчета.Найти(ЭлМассива.ОбъектРасчетов) = Неопределено Тогда Продолжить; КонецЕсли;
		МассивОбъектовРасчета.Добавить(ЭлМассива.ОбъектРасчетов);
	КонецЦикла;
	
	КоличествоОбъектовРасчета = МассивОбъектовРасчета.Количество();
	Для Каждого ЭлМассива Из МассивОбъектовРасчета Цикл	  
		Если КоличествоОбъектовРасчета > 1 Тогда
			СписокСтрокПоТекущейЗадолженности1 = Новый Массив();
			МассивСчетов = Новый Массив();
			МассивСчетов.Добавить(Счет);
			Если ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Если ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
					и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
					МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
					СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет, ОбъектРасчетов", Контрагент, ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным, ЭлМассива);
					СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
				ИначеЕсли ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
					и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками Тогда
					МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
					СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет, ОбъектРасчетов", Контрагент, ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным, ЭлМассива);
					СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
				КонецЕсли; 
			КонецЕсли;
			//СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаЗадолженность.Контрагент, ВыборкаЗадолженность.ДоговорКонтрагента, МассивСчетов);
			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет, ОбъектРасчетов", Контрагент, ДоговорКонтрагента, Счет, ЭлМассива);
			СписокСтрокПоТекущейЗадолженности = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрокПоТекущейЗадолженности1.Количество() Тогда
				Для Каждого СтрокаТЗТЗ Из СписокСтрокПоТекущейЗадолженности1 Цикл
					Если СписокСтрокПоТекущейЗадолженности.Найти(СтрокаТЗТЗ) = Неопределено Тогда
						СписокСтрокПоТекущейЗадолженности.Добавить(СтрокаТЗТЗ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ВыборкаОстатков.Сбросить();
			СуммаДолгаПоДоговору = ПолучитьОстаток(Счет, Контрагент, ДоговорКонтрагента, ЭлМассива, ВыборкаОстатков, ДтКт);
			Если СуммаДолгаПоДоговору = 0 Тогда Продолжить; КонецЕсли;
		КонецЕсли;	
	
		ТаблицаДокументовДолга = ПолучитьТаблицуДокументовДолга(СписокСтрокПоТекущейЗадолженности, СуммаДолгаПоДоговору, ДтКт);
	
		Для каждого ВыборкаДетальныеЗаписи из ТаблицаДокументовДолга цикл
			
			Если ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору = 0 Тогда Продолжить; КонецЕсли;
			 
			СтруктПолуч = ПолучитьСтруктуруДанныхДокумента(ВыборкаДетальныеЗаписи.Регистратор,  ?(ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов"), ДоговорКонтрагента.ТипДоговора, ""), ВыборкаДетальныеЗаписи.ПроверятьГалочку, ДоговорКонтрагента, ВыборкаДетальныеЗаписи.ЕстьУслуги);
			
			Если Не (СтруктПолуч.ДатаПогашенияДЗ > Дата(1,1,1) и Не СтруктПолуч.ДатаПогашенияДЗ > КонПериода) Тогда
			//Иначе
			//	ТЗДляСтруктуры.Удалить(НовСтрока);
				Продолжить;
			КонецЕсли;
			
			НовСтрока = ТЗДляСтруктуры.Добавить();
			НовСтрока.Регистратор = ВыборкаДетальныеЗаписи.Регистратор;
			ЗаполнитьЗначенияСвойств(НовСтрока, СтруктПолуч);
			
			НовСтрока.Колонка17 = Истина;
			НовСтрока.Колонка22 = 0;
			НовСтрока.Колонка23 = 0;
			НовСтрока.Колонка24 = 0;
			НовСтрока.Колонка25 = 0; 
			НовСтрока.Колонка26 = 0;
			КолДней = (КонПериода - НовСтрока.ДатаДок) / (60 * 60 * 24);   // fix Suetin 23.10.2017 16:14:54  ТЗДляСтруктуры[КоличествоСтрок - 1].ДатаДок   ДатаПогашенияДЗ
			
			Если КолДней > 1095 Тогда
				НовСтрока.Колонка26 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			ИначеЕсли КолДней > 180 Тогда
				НовСтрока.Колонка25 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;	
			ИначеЕсли КолДней > 90 Тогда
				НовСтрока.Колонка24 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			ИначеЕсли КолДней > 30 Тогда
				НовСтрока.Колонка23 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			ИначеЕсли КолДней >= 0 Тогда
				НовСтрока.Колонка22 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;	
	
	//ПараметрыОтбора = Новый Структура("Колонка17", Ложь);
	//МассивСтрокНеПросроченных = ТЗДляСтруктуры.НайтиСтроки(ПараметрыОтбора);
	//Для каждого СтрокаНеПросроч Из МассивСтрокНеПросроченных Цикл
	//	ТЗДляСтруктуры.Удалить(СтрокаНеПросроч);
	//КонецЦикла; 
	
	ТЗДляСтруктуры.Свернуть("ТипДокумента, ДатаДок, ДатаДок1М, НомерДок, НомерДок1М, ДатаДокСист, ЗаЧто1М, ЗаЧто, ПроверятьГалочку, Регистратор1М, Регистратор, ДатаПогашенияДЗ, ДатаПогашенияДЗСтр, ДатаПогашенияДЗ1М, ДатаПогашенияДЗ1МСтр, Колонка17", "Колонка01, Колонка11, Колонка12, Колонка13, Колонка14, Колонка15, Колонка22, Колонка23, Колонка24, Колонка25, Колонка26");
	ТЗДляСтруктуры.Сортировать("ДатаДок Убыв, ЗаЧто Возр");
	КоличествоТЗДляСтруктуры = ТЗДляСтруктуры.Количество();
	ТипДокумента = "";
	ДатаДок = "";
	НомерДок = "";
	ЗаЧто 			= Неопределено;
	ДатаДолга 		= Неопределено;
	Регистратор 	= Неопределено;
	ДатаПогашенияДЗСтр = Неопределено;
	Для каждого строкаДС из ТЗДляСтруктуры цикл
		ТипДокумента = ТипДокумента + ?(ТипДокумента = "", "", Символы.ПС) + строкаДС.ТипДокумента; 	
		НомерДок = НомерДок + ?(НомерДок = "", "", Символы.ПС) + ?(строкаДС.НомерДок = "", "б/н", строкаДС.НомерДок);
		ДатаДок = ДатаДок + ?(ДатаДок = "", "", Символы.ПС) + ?(строкаДС.ДатаДок = Дата(1,1,1,0,0,0), "б/д", Формат(строкаДС.ДатаДок, "ДФ=dd.MM.yyyy"));
		Если ЗначениеЗаполнено(строкаДС.Регистратор) Тогда
			Регистратор 		= строкаДС.Регистратор;
		КонецЕсли;
		Если ЗначениеЗаполнено(строкаДС.ДатаДок) Тогда
			ДатаДолга 			= строкаДС.ДатаДок;
		КонецЕсли;
		Если ЗначениеЗаполнено(строкаДС.ЗаЧто) Тогда
			ЗаЧто 				= строкаДС.ЗаЧто;
		КонецЕсли;
		Если ЗначениеЗаполнено(строкаДС.ДатаПогашенияДЗСтр) Тогда
			ДатаПогашенияДЗСтр 	= строкаДС.ДатаПогашенияДЗСтр;
		КонецЕсли;                    
	КонецЦикла;	
	
	СуммаДолгаПоДоговору = ДанныеОДокПросроч.КонПериода1М;
	КонПериода1 = НачалоМесяца(КонПериода) - 1;			/////////////////////////////////////////////
	СписокСтрокПоТекущейЗадолженности1 = Новый Массив();
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счет);
	Если ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Если ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          						// КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
			и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", Контрагент, ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
			СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
		ИначеЕсли ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
			и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками Тогда
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", Контрагент, ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
			СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
		КонецЕсли; 
	КонецЕсли;
	СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", Контрагент, ДоговорКонтрагента, Счет);
	СписокСтрокПоТекущейЗадолженности = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрокПоТекущейЗадолженности1.Количество() Тогда
		Для Каждого СтрокаТЗТЗ Из СписокСтрокПоТекущейЗадолженности1 Цикл
			Если СписокСтрокПоТекущейЗадолженности.Найти(СтрокаТЗТЗ) = Неопределено Тогда
				СписокСтрокПоТекущейЗадолженности.Добавить(СтрокаТЗТЗ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	МассивОбъектовРасчета = Новый Массив();
	Для Каждого ЭлМассива Из СписокСтрокПоТекущейЗадолженности Цикл
		Если Не МассивОбъектовРасчета.Найти(ЭлМассива.ОбъектРасчетов) = Неопределено Тогда Продолжить; КонецЕсли;
		МассивОбъектовРасчета.Добавить(ЭлМассива.ОбъектРасчетов);
	КонецЦикла;
	
	КоличествоОбъектовРасчета = МассивОбъектовРасчета.Количество();
	Для Каждого ЭлМассива Из МассивОбъектовРасчета Цикл	  
		Если КоличествоОбъектовРасчета > 1 Тогда
			СписокСтрокПоТекущейЗадолженности1 = Новый Массив();
			МассивСчетов = Новый Массив();
			МассивСчетов.Добавить(Счет);
			Если ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Если ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
					и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
					МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
					СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет, ОбъектРасчетов", Контрагент, ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным, ЭлМассива);
					СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
				ИначеЕсли ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
					и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками Тогда
					МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
					СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет, ОбъектРасчетов", Контрагент, ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным, ЭлМассива);
					СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
				КонецЕсли; 
			КонецЕсли;
			//СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаЗадолженность.Контрагент, ВыборкаЗадолженность.ДоговорКонтрагента, МассивСчетов);
			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет, ОбъектРасчетов", Контрагент, ДоговорКонтрагента, Счет, ЭлМассива);
			СписокСтрокПоТекущейЗадолженности = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрокПоТекущейЗадолженности1.Количество() Тогда
				Для Каждого СтрокаТЗТЗ Из СписокСтрокПоТекущейЗадолженности1 Цикл
					Если СписокСтрокПоТекущейЗадолженности.Найти(СтрокаТЗТЗ) = Неопределено Тогда
						СписокСтрокПоТекущейЗадолженности.Добавить(СтрокаТЗТЗ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ВыборкаОстатков.Сбросить();
			СуммаДолгаПоДоговору = ПолучитьОстаток(Счет, Контрагент, ДоговорКонтрагента, ЭлМассива, ВыборкаОстатков, ДтКт);
			Если СуммаДолгаПоДоговору = 0 Тогда Продолжить; КонецЕсли;
		КонецЕсли;	

		КолС = СписокСтрокПоТекущейЗадолженности.Количество() - 1;
		Для НомС = 0 По КолС Цикл
			Если КонПериода1 > СписокСтрокПоТекущейЗадолженности[КолС - НомС].Период Тогда Продолжить; КонецЕсли;
			СписокСтрокПоТекущейЗадолженности.Удалить(КолС - НомС);
		КонецЦикла;	
		ТаблицаДокументовДолга = ПолучитьТаблицуДокументовДолга(СписокСтрокПоТекущейЗадолженности, СуммаДолгаПоДоговору, ДтКт);
	
		Инд = 0;
		Для каждого ВыборкаДетальныеЗаписи из ТаблицаДокументовДолга Цикл
			
			Если ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору = 0 Тогда Продолжить; КонецЕсли;
			 
			СтруктПолуч = ПолучитьСтруктуруДанныхДокумента(ВыборкаДетальныеЗаписи.Регистратор, ?(ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов"), ДоговорКонтрагента.ТипДоговора, ""), ВыборкаДетальныеЗаписи.ПроверятьГалочку, ДоговорКонтрагента, ВыборкаДетальныеЗаписи.ЕстьУслуги);
			
			Если Не (СтруктПолуч.ДатаПогашенияДЗ > Дата(1,1,1) и Не СтруктПолуч.ДатаПогашенияДЗ > КонПериода1) Тогда

			//Иначе
				//Если КоличествоТЗДляСтруктуры <= ТаблицаДокументовДолга.Индекс(ВыборкаДетальныеЗаписи) - Инд Тогда
				//	ТЗДляСтруктуры.Удалить(НовСтрока);
				//КонецЕсли;
				Инд = Инд + 1;
				Продолжить;
			КонецЕсли;
			
			Если КоличествоТЗДляСтруктуры <= ТаблицаДокументовДолга.Индекс(ВыборкаДетальныеЗаписи) - Инд Тогда
				НовСтрока = ТЗДляСтруктуры.Добавить();
			Иначе
			    НовСтрока = ТЗДляСтруктуры[ТаблицаДокументовДолга.Индекс(ВыборкаДетальныеЗаписи) - Инд]
			КонецЕсли; 
			
			НовСтрока.ДатаДок1М 			= СтруктПолуч.ДатаДок;
			НовСтрока.НомерДок1М 			= СтруктПолуч.НомерДок;
			НовСтрока.Регистратор1М 		= ВыборкаДетальныеЗаписи.Регистратор;
			НовСтрока.ЗаЧто1М 				= СтруктПолуч.ЗаЧто;
			НовСтрока.Колонка17 			= Истина;
			НовСтрока.ДатаПогашенияДЗ1М 	= СтруктПолуч.ДатаПогашенияДЗ; 
			НовСтрока.ДатаПогашенияДЗ1МСтр 	= СтруктПолуч.ДатаПогашенияДЗСтр;
			НовСтрока.Колонка11 			= 0;
			НовСтрока.Колонка12 			= 0;
			НовСтрока.Колонка13 			= 0;
			НовСтрока.Колонка14 			= 0; 
			НовСтрока.Колонка15 			= 0;
			КолДней = (КонПериода1 - СтруктПолуч.ДатаДок) / (60 * 60 * 24);   // fix Suetin 23.10.2017 16:14:54  ТЗДляСтруктуры[КоличествоСтрок - 1].ДатаДок   ДатаПогашенияДЗ
			
			Если КолДней > 1095 Тогда
				НовСтрока.Колонка15 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			ИначеЕсли КолДней > 180 Тогда
				НовСтрока.Колонка14 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;	
			ИначеЕсли КолДней > 90 Тогда
				НовСтрока.Колонка13 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			ИначеЕсли КолДней > 30 Тогда
				НовСтрока.Колонка12 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			ИначеЕсли КолДней >= 0 Тогда
				НовСтрока.Колонка11 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			КонецЕсли; 
			
		КонецЦикла;
	КонецЦикла;
	
	//ПараметрыОтбора = Новый Структура("Колонка17", Ложь);
	//МассивСтрокНеПросроченных = ТЗДляСтруктуры.НайтиСтроки(ПараметрыОтбора);
	//Для каждого СтрокаНеПросроч Из МассивСтрокНеПросроченных Цикл
	//	ТЗДляСтруктуры.Удалить(СтрокаНеПросроч);
	//КонецЦикла; 
	
	ТЗДляСтруктуры.Свернуть("ТипДокумента, ДатаДок, ДатаДок1М, НомерДок, НомерДок1М, ДатаДокСист, ЗаЧто1М, ЗаЧто, ПроверятьГалочку, Регистратор1М, Регистратор, ДатаПогашенияДЗ, ДатаПогашенияДЗСтр, ДатаПогашенияДЗ1М, ДатаПогашенияДЗ1МСтр, Колонка17", "Колонка01, Колонка11, Колонка12, Колонка13, Колонка14, Колонка15, Колонка22, Колонка23, Колонка24, Колонка25, Колонка26");
	ТЗДляСтруктуры.Сортировать("ДатаДок Убыв, ЗаЧто Возр");
	
	СуммаДолгаПоДоговору = ДанныеОДокПросроч.КонПериода2М;
	КонПериода2 = НачалоМесяца(КонПериода1) - 1;
	СписокСтрокПоТекущейЗадолженности1 = Новый Массив();
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счет);
	Если ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Если ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          						// КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
			и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", Контрагент, ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
			СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
		ИначеЕсли ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
			и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками Тогда
			МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", Контрагент, ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
			СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
		КонецЕсли; 
	КонецЕсли;
	СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", Контрагент, ДоговорКонтрагента, Счет);
	СписокСтрокПоТекущейЗадолженности = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрокПоТекущейЗадолженности1.Количество() Тогда
		Для Каждого СтрокаТЗТЗ Из СписокСтрокПоТекущейЗадолженности1 Цикл
			Если СписокСтрокПоТекущейЗадолженности.Найти(СтрокаТЗТЗ) = Неопределено Тогда
				СписокСтрокПоТекущейЗадолженности.Добавить(СтрокаТЗТЗ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	МассивОбъектовРасчета = Новый Массив();
	Для Каждого ЭлМассива Из СписокСтрокПоТекущейЗадолженности Цикл
		Если Не МассивОбъектовРасчета.Найти(ЭлМассива.ОбъектРасчетов) = Неопределено Тогда Продолжить; КонецЕсли;
		МассивОбъектовРасчета.Добавить(ЭлМассива.ОбъектРасчетов);
	КонецЦикла;
	
	КоличествоОбъектовРасчета = МассивОбъектовРасчета.Количество();
	Для Каждого ЭлМассива Из МассивОбъектовРасчета Цикл	  
		Если КоличествоОбъектовРасчета > 1 Тогда
			СписокСтрокПоТекущейЗадолженности1 = Новый Массив();
			МассивСчетов = Новый Массив();
			МассивСчетов.Добавить(Счет);
			Если ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Если ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
					и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
					МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
					СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет, ОбъектРасчетов", Контрагент, ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным, ЭлМассива);
					СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
				ИначеЕсли ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
					и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками Тогда
					МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
					СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет, ОбъектРасчетов", Контрагент, ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным, ЭлМассива);
					СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
				КонецЕсли; 
			КонецЕсли;
			//СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаЗадолженность.Контрагент, ВыборкаЗадолженность.ДоговорКонтрагента, МассивСчетов);
			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет, ОбъектРасчетов", Контрагент, ДоговорКонтрагента, Счет, ЭлМассива);
			СписокСтрокПоТекущейЗадолженности = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрокПоТекущейЗадолженности1.Количество() Тогда
				Для Каждого СтрокаТЗТЗ Из СписокСтрокПоТекущейЗадолженности1 Цикл
					Если СписокСтрокПоТекущейЗадолженности.Найти(СтрокаТЗТЗ) = Неопределено Тогда
						СписокСтрокПоТекущейЗадолженности.Добавить(СтрокаТЗТЗ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ВыборкаОстатков.Сбросить();
			СуммаДолгаПоДоговору = ПолучитьОстаток(Счет, Контрагент, ДоговорКонтрагента, ЭлМассива, ВыборкаОстатков, ДтКт);
			Если СуммаДолгаПоДоговору = 0 Тогда Продолжить; КонецЕсли;
		КонецЕсли;	
	
		КолС = СписокСтрокПоТекущейЗадолженности.Количество() - 1;
		Для НомС = 0 По КолС Цикл
			Если КонПериода1 > СписокСтрокПоТекущейЗадолженности[КолС - НомС].Период Тогда Продолжить; КонецЕсли;
			СписокСтрокПоТекущейЗадолженности.Удалить(КолС - НомС);
		КонецЦикла;
		ТаблицаДокументовДолга = ПолучитьТаблицуДокументовДолга(СписокСтрокПоТекущейЗадолженности, СуммаДолгаПоДоговору, ДтКт);
	
		Инд = 0;
		Для каждого ВыборкаДетальныеЗаписи из ТаблицаДокументовДолга Цикл
			
			Если ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору = 0 Тогда Продолжить; КонецЕсли;
			 
			СтруктПолуч = ПолучитьСтруктуруДанныхДокумента(ВыборкаДетальныеЗаписи.Регистратор, ?(ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов"), ДоговорКонтрагента.ТипДоговора, ""), ВыборкаДетальныеЗаписи.ПроверятьГалочку, ДоговорКонтрагента, ВыборкаДетальныеЗаписи.ЕстьУслуги);
			
			Если Не (СтруктПолуч.ДатаПогашенияДЗ > Дата(1,1,1) и Не СтруктПолуч.ДатаПогашенияДЗ > КонПериода2) Тогда
			//Иначе
				//Если КоличествоТЗДляСтруктуры <= ТаблицаДокументовДолга.Индекс(ВыборкаДетальныеЗаписи) - Инд Тогда
				//	ТЗДляСтруктуры.Удалить(НовСтрока);
				//КонецЕсли;
				Инд = Инд + 1;
				Продолжить;
			КонецЕсли;
			
			Если КоличествоТЗДляСтруктуры <= ТаблицаДокументовДолга.Индекс(ВыборкаДетальныеЗаписи) - Инд Тогда
				НовСтрока = ТЗДляСтруктуры.Добавить(); 
				//НовСтрока.ЗаЧто1М 		= СтруктПолуч.ЗаЧто; 
				//НовСтрока.ДатаДок1М 	= СтруктПолуч.ДатаДок;
				НовСтрока.Регистратор1М = ВыборкаДетальныеЗаписи.Регистратор;
			Иначе
			    НовСтрока = ТЗДляСтруктуры[ТаблицаДокументовДолга.Индекс(ВыборкаДетальныеЗаписи) - Инд]
			КонецЕсли; 
			
			//НовСтрока.ДатаДок2М 			= СтруктПолуч.ДатаДок;
			//НовСтрока.НомерДок2М 			= СтруктПолуч.НомерДок;
			//НовСтрока.Регистратор2М 		= ВыборкаДетальныеЗаписи.Регистратор;
			//НовСтрока.ЗаЧто2М 				= СтруктПолуч.ЗаЧто;
			//НовСтрока.Колонка17 			= Истина;
			//НовСтрока.ДатаПогашенияДЗ2М 	= СтруктПолуч.ДатаПогашенияДЗ; 
			//НовСтрока.ДатаПогашенияДЗ2МСтр 	= СтруктПолуч.ДатаПогашенияДЗСтр;
			НовСтрока.Колонка01 			= 0;
			//НовСтрока.Колонка02 			= 0;
			//НовСтрока.Колонка03 			= 0;
			//НовСтрока.Колонка04 			= 0; 
			//НовСтрока.Колонка05 			= 0;
			КолДней = (КонПериода2 - СтруктПолуч.ДатаДок) / (60 * 60 * 24);   // fix Suetin 23.10.2017 16:14:54  ТЗДляСтруктуры[КоличествоСтрок - 1].ДатаДок     ДатаПогашенияДЗ
			
			//Если КолДней > 1095 Тогда
			//	НовСтрока.Колонка05 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			//ИначеЕсли КолДней > 180 Тогда
			//	НовСтрока.Колонка04 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;	
			//ИначеЕсли КолДней > 90 Тогда
			//	НовСтрока.Колонка03 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			//ИначеЕсли КолДней > 30 Тогда
			//	НовСтрока.Колонка02 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			//Иначе
			Если КолДней >= 0 Тогда
				НовСтрока.Колонка01 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
			КонецЕсли; 
			
		КонецЦикла;
	КонецЦикла;
	
	//ПараметрыОтбора = Новый Структура("Колонка17", Ложь);
	//МассивСтрокНеПросроченных = ТЗДляСтруктуры.НайтиСтроки(ПараметрыОтбора);
	//Для каждого СтрокаНеПросроч Из МассивСтрокНеПросроченных Цикл
	//	ТЗДляСтруктуры.Удалить(СтрокаНеПросроч);
	//КонецЦикла; 
	
	ТЗДляСтруктуры.Свернуть("ТипДокумента, ДатаДок, ДатаДок1М, НомерДок, НомерДок1М, ДатаДокСист, ЗаЧто1М, ЗаЧто, ПроверятьГалочку, Регистратор1М, Регистратор, ДатаПогашенияДЗ, ДатаПогашенияДЗСтр, ДатаПогашенияДЗ1М, ДатаПогашенияДЗ1МСтр, Колонка17", "Колонка01, Колонка11, Колонка12, Колонка13, Колонка14, Колонка15, Колонка22, Колонка23, Колонка24, Колонка25, Колонка26");
	ТЗДляСтруктуры.Сортировать("ДатаДок Убыв, ЗаЧто Возр");
	ЗаЧто1М 		= Неопределено;
	ДатаДолга1М 	= Неопределено;
	Регистратор1М 	= Неопределено;
	
	Для каждого строкаДС из ТЗДляСтруктуры цикл
		Если ЗначениеЗаполнено(строкаДС.Регистратор1М) Тогда
			Регистратор1М 			= строкаДС.Регистратор1М;
		КонецЕсли;
		Если ЗначениеЗаполнено(строкаДС.ДатаДок1М) Тогда
			ДатаДолга1М 			= строкаДС.ДатаДок1М;
		КонецЕсли;
		Если ЗначениеЗаполнено(строкаДС.ЗаЧто1М) Тогда
			ЗаЧто1М 				= строкаДС.ЗаЧто1М;
		КонецЕсли;                    
		Если ЗначениеЗаполнено(строкаДС.ДатаПогашенияДЗ1МСтр) Тогда
			ДатаПогашенияДЗ1МСтр 	= строкаДС.ДатаПогашенияДЗ1МСтр;
		КонецЕсли;                    
	КонецЦикла;
	
	КоличествоСтрок = ТЗДляСтруктуры.Количество();
	
	СтруктураСтроки.Вставить("ДокСтр", 			ТипДокумента);
	СтруктураСтроки.Вставить("ДатаДок", 		ДатаДок);
	СтруктураСтроки.Вставить("НомерДок", 		НомерДок);
	СтруктураСтроки.Вставить("ЗаЧто", 			ЗаЧто);
	СтруктураСтроки.Вставить("ДатаПогашенияДЗ", ДатаПогашенияДЗСтр);
	СтруктураСтроки.Вставить("ДатаДолга", 		ДатаДолга);
	СтруктураСтроки.Вставить("Регистратор", 	?(КоличествоСтрок > 0, ТЗДляСтруктуры[КоличествоСтрок - 1].Регистратор, Неопределено));  
	
	СтруктураСтроки.Вставить("ТЗДляСтруктуры", ТЗДляСтруктуры);
	СтруктураСтроки.Вставить("СуммаРезерва", СуммаРезерва);
	СтруктураСтроки.Вставить("ИсполняющееПодразделение", ?(ЗначениеЗаполнено(ДоговорКонтрагента), ДоговорКонтрагента.Подразделение, Справочники.СтруктураПредприятия.ПустаяСсылка()));    //  ИсполняющееПодразделение
	СтруктураСтроки.Вставить("Контрагент", Контрагент);
	СтруктураСтроки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	
	СтруктураСтроки.Вставить("ЗаЧто1М", 					ЗаЧто1М);
	СтруктураСтроки.Вставить("Регистратор1М", 				Регистратор1М);
	СтруктураСтроки.Вставить("ДатаДолга1М", 				ДатаДолга1М);
	
	Возврат СтруктураСтроки;
	
КонецФункции	//ПолучитьДанныеСтроки()	                    

Функция ПолучитьСтруктуруДанныхДокумента(Регистратор, ЗаЧто, ПроверятьГалочку, ДоговорКонтрагента, ЕстьУслуги = Ложь)
	НовСтрока = Новый Структура("ТипДокумента, ДатаДок, ДатаДокСист, НомерДок, ЗаЧто, ПроверятьГалочку, ДатаПогашенияДЗ, ДатаПогашенияДЗСтр"); 
	ЗаполнитьСтрокуДаннымиДокумента(НовСтрока, Регистратор, ЗаЧто, ПроверятьГалочку, ЕстьУслуги);
	ЗаполнитьСтрокуДаннымиДоговора(НовСтрока, ДоговорКонтрагента);
	Возврат(НовСтрока);
КонецФункции

Процедура ЗаполнитьСтрокуДаннымиДоговора(НовСтрока, ДоговорКонтрагента)
	НовСтрока.ДатаПогашенияДЗ = Дата(1,1,1);
	Если НовСтрока.ДатаДок = "б/д" Тогда
	    НовСтрока.ДатаПогашенияДЗСтр = "б/д";
	ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			и ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса и НовСтрока.ПроверятьГалочку = "Деньги" Тогда
		Если ЗначениеЗаполнено(ДоговорКонтрагента.ВИЛС_СрокПоставкиПослеАванса)  Тогда
			НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + ДоговорКонтрагента.ВИЛС_СрокПоставкиПослеАванса * 60 * 60 * 24;
			НовСтрока.ДатаПогашенияДЗСтр = Формат(НовСтрока.ДатаПогашенияДЗ, "ДФ=dd.MM.yyyy");
		Иначе
			НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 30 * 60 * 60 * 24;
			НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
		КонецЕсли; 
		
	ИначеЕсли  ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			 и ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса и НовСтрока.ПроверятьГалочку = "Поставка" Тогда
		//Если ЗначениеЗаполнено(ДоговорКонтрагента.СрокПоставкиОтАванса)  Тогда
		//	НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + ДоговорКонтрагента.СрокПоставкиОтАванса * 60 * 60 * 24;
		//	НовСтрока.ДатаПогашенияДЗСтр = Формат(НовСтрока.ДатаПогашенияДЗ, "ДФ=dd.MM.yyyy");
		//Иначе
			НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 1 * 60 * 60 * 24;
			НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
		//КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) и ТипЗнч(ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			 и ДоговорКонтрагента.УстановленСрокОплаты и НовСтрока.ПроверятьГалочку = "Поставка"  Тогда
		Если ЗначениеЗаполнено(ДоговорКонтрагента.СрокОплаты) Тогда
			НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + ДоговорКонтрагента.СрокОплаты * 60 * 60 * 24;
			НовСтрока.ДатаПогашенияДЗСтр = Формат(НовСтрока.ДатаПогашенияДЗ, "ДФ=dd.MM.yyyy");
		Иначе
			НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 30 * 60 * 60 * 24;
			НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
		КонецЕсли; 
	Иначе
		НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 30 * 60 * 60 * 24; 
	    НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТекстПросроченногоЗапроса(ДтКт)
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1	//0
	|	Инвентаризация.Дата КАК Дата,
	|	КОНЕЦПЕРИОДА(Инвентаризация.Дата, ДЕНЬ) КАК КонецПериода,
	|	Инвентаризация.Номер КАК Номер,
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	Инвентаризация.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	Инвентаризация.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	Инвентаризация.ДокументОснованиеНомер КАК ДокументОснованиеНомер
	|ПОМЕСТИТЬ Шапка
	|ИЗ 
	|	Документ.ИнвентаризацияРасчетов КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ //1
	|	Задолженность.Ссылка.Организация КАК Организация,
	|	Задолженность.ДебиторКредитор КАК Контрагент,
	|	Задолженность.ВИЛС_Договор КАК ДоговорКонтрагента,
	|	Задолженность.ВидЗадолженности КАК ВидЗадолженности,
	|	Задолженность.СчетРасчетов КАК СчетРасчетов,
	|	Задолженность.Подтверждено КАК Подтверждено,
	|	Задолженность.НеПодтверждено КАК НеПодтверждено,
	|	Задолженность.ИстекСрокДавности КАК ИстекСрокДавности,
	|	Задолженность.ВИЛС_Подтверждено1Месяц КАК ВИЛС_Подтверждено1Месяц,
	|	Задолженность.ВИЛС_НеПодтверждено1Месяц КАК ВИЛС_НеПодтверждено1Месяц,
	|	Задолженность.ВИЛС_ИстекСрокДавности1Месяц КАК ВИЛС_ИстекСрокДавности1Месяц,
	|	Задолженность.ВИЛС_Подтверждено2Месяц КАК ВИЛС_Подтверждено2Месяц,
	|	Задолженность.ВИЛС_НеПодтверждено2Месяц КАК ВИЛС_НеПодтверждено2Месяц,
	|	Задолженность.ВИЛС_ИстекСрокДавности2Месяц КАК ВИЛС_ИстекСрокДавности2Месяц
	|ПОМЕСТИТЬ Задолженность	
	|ИЗ 
	|	Документ.ИнвентаризацияРасчетов.Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.Ссылка = &Ссылка
	|	И Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности." + ?(ДтКт = "Дт", "Дебиторская", "Кредиторская") + ")
	|;	
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ //2
	|	Т.Регистратор КАК Регистратор,
	|	Т.Организация КАК Организация,
	|	Т.Контрагент КАК Контрагент,
	|	Т.Договор КАК Договор,
	|	МАКСИМУМ(Т.ЕстьУслуги) КАК ЕстьУслуги,
	|	Т.РасчетныйДокумент КАК РасчетныйДокумент,
	|   ВЫБОР 
	|   	КОГДА Т.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|   		ТОГДА ЕСТЬNULL(Т.РасчетныйДокумент.ДатаВходящегоДокумента, Т.РасчетныйДокумент.Дата)
	|   	ИНАЧЕ Т.Регистратор.Дата
	|   КОНЕЦ КАК Период
	|ПОМЕСТИТЬ РегистраторыСУслугами
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Ссылка КАК Регистратор,
	|		Т.Ссылка.Организация КАК Организация,
	|		Т.Ссылка.Контрагент КАК Контрагент,
	|		Т.Ссылка.Договор КАК Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЕстьУслуги,
	|		Т.Ссылка КАК РасчетныйДокумент
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг.ВидыЗапасов КАК Т
	|	ГДЕ
	|		(Т.Ссылка.Организация, Т.Ссылка.Контрагент) В (ВЫБРАТЬ Организация, Контрагент ИЗ Задолженность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Организация,
	|		Т.Ссылка.Контрагент,
	|		Т.Ссылка.Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		Т.Ссылка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК Т
	|	ГДЕ
	|		(Т.Ссылка.Организация, Т.Ссылка.Контрагент) В (ВЫБРАТЬ Организация, Контрагент ИЗ Задолженность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Организация,
	|		Т.Ссылка.Контрагент,
	|		Т.Ссылка.Договор,
	|		ВЫБОР
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ТОГДА ИСТИНА
	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		Т.Ссылка
	|	ИЗ
	|		Документ.ПоступлениеТоваровНаСклад.ВидыЗапасов КАК Т
	|	ГДЕ
	|		(Т.Ссылка.Организация, Т.Ссылка.Контрагент) В (ВЫБРАТЬ Организация, Контрагент ИЗ Задолженность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка,
	|		Т.Ссылка.Организация,
	|		Т.Контрагент,
	|		ВЫБОР КОГДА НЕ ЕСТЬNULL(Т.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА 
	|				Т.Договор
	|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Т.ОбъектРасчетов КАК Справочник.ДоговорыКонтрагентов), ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) 	 
	|			ТОГДА
	|				ВЫРАЗИТЬ(Т.ОбъектРасчетов КАК Справочник.ДоговорыКонтрагентов)
	|			ИНАЧЕ	
	|				Т.ДокументРасчетов.Договор
	|			КОНЕЦ,	
	|		ЛОЖЬ,
	|		Т.ДокументРасчетов
	|	ИЗ
	|		Документ.ВводОстатков.РасчетыСПартнерами КАК Т
	|	ГДЕ
	|		(Т.Ссылка.Организация, Т.Контрагент) В (ВЫБРАТЬ Организация, Контрагент ИЗ Задолженность)
	|	    ) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	Т.Организация,
	|	Т.Контрагент,
	|	Т.Договор,
	|	Т.РасчетныйДокумент,
	|   ВЫБОР 
	|   	КОГДА Т.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|   		ТОГДА ЕСТЬNULL(Т.РасчетныйДокумент.ДатаВходящегоДокумента, Т.РасчетныйДокумент.Дата)
	|   	ИНАЧЕ Т.Регистратор.Дата
	|   КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Контрагент,
	|	Договор
	|;
	|///////////////////////////////////////////////////////////////////////////////   
	|ВЫБРАТЬ	//3
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонПериода,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам),
	|			, (Организация, Субконто1, Субконто2) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность)
	|															) КАК ХозрасчетныйОстатки
	|
	|;
	|///////////////////////////////////////////////////////////////////////////////   
	|ВЫБРАТЬ ИСТИНА	//4
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ //5
	|	ХозрасчетныйОбороты.ДебиторКредитор КАК ДебиторКредитор,
	|	ХозрасчетныйОбороты.ВИЛС_Договор КАК ВИЛС_Договор,
	|	ХозрасчетныйОбороты.ЕстьУслуги,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.ПроверятьГалочку КАК ПроверятьГалочку,
	|   НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК СуммаОборот,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				ТОГДА ХозрасчетныйОбороты.Субконто1
	|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ХозрасчетныйОбороты.Субконто1
	|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ТОГДА ХозрасчетныйОбороты.Субконто1
	|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|				ТОГДА ХозрасчетныйОбороты.Субконто2
	|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|				ТОГДА ХозрасчетныйОбороты.Субконто3
	|			ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
	|		КОНЕЦ КАК ДебиторКредитор,
	|		ВЫБОР
	|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ТОГДА ХозрасчетныйОбороты.Субконто2
	|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ТОГДА ХозрасчетныйОбороты.Субконто3
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОНЕЦ КАК ВИЛС_Договор,
	|		ЕСТЬNULL(РегистраторыСУслугами.Период, ХозрасчетныйОбороты.Период) КАК Период,
	|		ХозрасчетныйОбороты.Счет КАК Счет,
    |	   	ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент, ХозрасчетныйОбороты.Регистратор) КАК Регистратор, 
	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) = 0
	|			ТОГДА
	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
	|			ИНАЧЕ
	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) 
	|		КОНЕЦ КАК СуммаОборот,		
	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) = 0
	|			ТОГДА
	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
	|			ИНАЧЕ
	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) 
	|		КОНЕЦ КАК СуммаОборотДт,
	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) = 0
	|			ТОГДА
	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
	|			ИНАЧЕ
	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) 
	|		КОНЕЦ КАК СуммаОборотКт,
	|		ВЫБОР
	|			КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент 
	|					И РегистраторыСУслугами.РасчетныйДокумент.ТипПервичногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику)
	|				ТОГДА ""Деньги""
	|			КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент 
	|					И РегистраторыСУслугами.РасчетныйДокумент.ТипПервичногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаОтКлиента)
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы)
	|				ТОГДА ""Деньги""
	//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
	//|					И ХозрасчетныйОбороты.КорСубконто1 = &ВТБ_Факторинг
	//|				ТОГДА ""Деньги""
	//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
	//|					И ХозрасчетныйОбороты.КорСубконто1 = &Транскапиталбанк
	//|				ТОГДА ""Деньги""
	|			ИНАЧЕ ""Поставка""
	|		КОНЕЦ КАК ПроверятьГалочку,
	|		РегистраторыСУслугами.ЕстьУслуги КАК ЕстьУслуги
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				,
	|				&КонПериода,
	|				Регистратор,
	|				ВЫБОР 
	|					КОГДА Счет В (ВЫБРАТЬ СчетРасчетов ИЗ Задолженность)
	|				    	ТОГДА ИСТИНА
	|					КОГДА Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
	|				    	ТОГДА ИСТИНА
	|                   ИНАЧЕ ЛОЖЬ КОНЕЦ,
	|					, (Организация, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ NULL
	|						КОНЕЦ, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|						КОНЕЦ) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность),
	|					,
	|					) КАК ХозрасчетныйОбороты
	|    ЛЕВОЕ СОЕДИНЕНИЕ РегистраторыСУслугами
	|    	ПО ХозрасчетныйОбороты.Регистратор = РегистраторыСУслугами.Регистратор
	|			И ХозрасчетныйОбороты.Организация = РегистраторыСУслугами.Организация
	|			И ВЫБОР
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто1
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто2
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто3
	|				ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
	|			КОНЕЦ = РегистраторыСУслугами.Контрагент
	|			И ВЫБОР
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто2
	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ХозрасчетныйОбороты.Субконто3
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			КОНЕЦ = РегистраторыСУслугами.Договор 
	|			
	|											) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.ДебиторКредитор,
	|	ХозрасчетныйОбороты.ВИЛС_Договор,
	|	ХозрасчетныйОбороты.ЕстьУслуги,
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.ПроверятьГалочку
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДебиторКредитор,
	|	ВИЛС_Договор,
	|	Период,
	|	Регистратор,
	|	ОбъектРасчетов,
	|	Счет   
	|	
	|ИТОГИ
	|	СУММА(СуммаОборот)
	|ПО
	|	Счет
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ //6
	|	Задолженность.СчетРасчетов КАК СчетРасчетов,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Задолженность.ВидЗадолженности КАК ВидЗадолженности,
	|	Задолженность.Подтверждено КАК Подтверждено,
	|	Задолженность.НеПодтверждено КАК НеПодтверждено,
	|	Задолженность.ИстекСрокДавности КАК ИстекСрокДавности,
	|	Задолженность.ВИЛС_Подтверждено1Месяц КАК ВИЛС_Подтверждено1Месяц,
	|	Задолженность.ВИЛС_НеПодтверждено1Месяц КАК ВИЛС_НеПодтверждено1Месяц,
	|	Задолженность.ВИЛС_ИстекСрокДавности1Месяц КАК ВИЛС_ИстекСрокДавности1Месяц,
	|	Задолженность.ВИЛС_Подтверждено2Месяц КАК ВИЛС_Подтверждено2Месяц,
	|	Задолженность.ВИЛС_НеПодтверждено2Месяц КАК ВИЛС_НеПодтверждено2Месяц,
	|	Задолженность.ВИЛС_ИстекСрокДавности2Месяц КАК ВИЛС_ИстекСрокДавности2Месяц
	|ИЗ 
	|	Задолженность КАК Задолженность
	|УПОРЯДОЧИТЬ ПО
	|	СчетРасчетов
	|ИТОГИ
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено),
	|	СУММА(ВИЛС_Подтверждено1Месяц),
	|	СУММА(ВИЛС_НеПодтверждено1Месяц),
	|	СУММА(ВИЛС_Подтверждено2Месяц),
	|	СУММА(ВИЛС_НеПодтверждено2Месяц)
	|ПО
	|	СчетРасчетов ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|///////////////////////////////////////////////////////////////////////////////   
	|ВЫБРАТЬ ИСТИНА	//7
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ //8
    |	ХозрасчетныйОбороты.ДебиторКредитор 			КАК ДебиторКредитор,
    |	ХозрасчетныйОбороты.ВИЛС_Договор 				КАК ВИЛС_Договор,
	|	ХозрасчетныйОбороты.Счет 						КАК Счет,
    |	СУММА(ХозрасчетныйОбороты.КонПериода2МДт) 		КАК КонПериода2МДт,
    |	СУММА(ХозрасчетныйОбороты.КонПериода2МКт) 		КАК КонПериода2МКт,
    |	СУММА(ХозрасчетныйОбороты.ОборотыПериода1МКт) 	КАК ОборотыПериода1МКт,
    |	СУММА(ХозрасчетныйОбороты.ОборотыПериода1МДт) 	КАК ОборотыПериода1МДт,
    |	СУММА(ХозрасчетныйОбороты.КонПериода1МДт) 		КАК КонПериода1МДт,
    |	СУММА(ХозрасчетныйОбороты.КонПериода1МКт) 		КАК КонПериода1МКт,
    |	СУММА(ХозрасчетныйОбороты.ОборотыПериодаКт) 	КАК ОборотыПериодаКт,
    |	СУММА(ХозрасчетныйОбороты.ОборотыПериодаДт) 	КАК ОборотыПериодаДт,
    |	СУММА(ХозрасчетныйОбороты.КонПериодаДт) 		КАК КонПериодаДт,
    |	СУММА(ХозрасчетныйОбороты.КонПериодаКт) 		КАК КонПериодаКт,
    |	ЗначенияСвойств.Значение 						КАК Мероприятие,
	|	ЗначенияСвойствСрокПогашенияЗадолженности.Значение КАК СрокПогашенияЗадолженности
    |ИЗ
    |	(ВЫБРАТЬ
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
    |		КОНЕЦ КАК ДебиторКредитор,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
    |		КОНЕЦ КАК ВИЛС_Договор,
	|		ХозрасчетныйОбороты.Счет КАК Счет,
    |		СУММА(ХозрасчетныйОбороты.СуммаОстатокДт) КАК КонПериода2МДт,
    |		СУММА(ХозрасчетныйОбороты.СуммаОстатокКт) КАК КонПериода2МКт,
    |		СУММА(0) КАК ОборотыПериода1МКт,
    |		СУММА(0) КАК ОборотыПериода1МДт,
    |		СУММА(0) КАК КонПериода1МДт,
    |		СУММА(0) КАК КонПериода1МКт,
    |		СУММА(0) КАК ОборотыПериодаКт,
    |		СУММА(0) КАК ОборотыПериодаДт,
    |		СУММА(0) КАК КонПериодаДт,
    |		СУММА(0) КАК КонПериодаКт
    |	ИЗ
    |		РегистрБухгалтерии.Хозрасчетный.Остатки(
    |				&КонПериода2М,
    |				ВЫБОР
    |					КОГДА Счет В (ВЫБРАТЬ СчетРасчетов ИЗ Задолженность)
    |						ТОГДА ИСТИНА
    |					КОГДА Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
    |						ТОГДА ИСТИНА
    |					ИНАЧЕ ЛОЖЬ
    |				КОНЕЦ,
	|					, (Организация, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ NULL
	|						КОНЕЦ, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|						КОНЕЦ) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность)
	|					) КАК ХозрасчетныйОбороты
	//|	ГДЕ
	//|		ИСТИНА = &КонПериода2МНеМеньше20181231235959
    |	
    |	СГРУППИРОВАТЬ ПО
	|		ХозрасчетныйОбороты.Счет,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
    |		КОНЕЦ,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
    |		КОНЕЦ
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
	
	//|	ВЫБРАТЬ
	//|		ВЫБОР
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	//|				ТОГДА ХозрасчетныйОбороты.Субконто1
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	//|				ТОГДА ХозрасчетныйОбороты.Субконто1
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	//|				ТОГДА ХозрасчетныйОбороты.Субконто1
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	//|				ТОГДА ХозрасчетныйОбороты.Субконто2
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	//|				ТОГДА ХозрасчетныйОбороты.Субконто3
	//|			ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
	//|		КОНЕЦ КАК ДебиторКредитор,
	//|		ВЫБОР
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	//|				ТОГДА ХозрасчетныйОбороты.Субконто2
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	//|				ТОГДА ХозрасчетныйОбороты.Субконто3
	//|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//|		КОНЕЦ КАК ВИЛС_Договор,
	//|		ХозрасчетныйОбороты.Счет КАК Счет,
	//|		СУММА(ХозрасчетныйОбороты.СуммаОстатокДт) КАК КонПериода2МДт,
	//|		СУММА(ХозрасчетныйОбороты.СуммаОстатокКт) КАК КонПериода2МКт,
	//|		СУММА(0) КАК ОборотыПериода1МКт,
	//|		СУММА(0) КАК ОборотыПериода1МДт,
	//|		СУММА(0) КАК КонПериода1МДт,
	//|		СУММА(0) КАК КонПериода1МКт,
	//|		СУММА(0) КАК ОборотыПериодаКт,
	//|		СУММА(0) КАК ОборотыПериодаДт,
	//|		СУММА(0) КАК КонПериодаДт,
	//|		СУММА(0) КАК КонПериодаКт
	//|	ИЗ
	//|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	//|				&КонПериода2018,
	//|				ВЫБОР
	//|					КОГДА Счет В (ВЫБРАТЬ СчетРасчетов ИЗ Задолженность)
	//|						ТОГДА ИСТИНА
	//|					КОГДА Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
	//|						ТОГДА ИСТИНА
	//|					ИНАЧЕ ЛОЖЬ
	//|				КОНЕЦ,
	//|					, (Организация, ВЫБОР
	//|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	//|								ТОГДА Субконто1
	//|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	//|								ТОГДА Субконто1
	//|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	//|								ТОГДА Субконто1
	//|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	//|								ТОГДА Субконто2
	//|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	//|								ТОГДА Субконто3
	//|							ИНАЧЕ NULL
	//|						КОНЕЦ, ВЫБОР
	//|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	//|								ТОГДА Субконто2
	//|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	//|								ТОГДА Субконто3
	//|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//|						КОНЕЦ) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность)
	//|					) КАК ХозрасчетныйОбороты
	//|	ГДЕ
	//|		ЛОЖЬ = &КонПериода2МНеМеньше20181231235959
	//|	
	//|	СГРУППИРОВАТЬ ПО
	//|		ХозрасчетныйОбороты.Счет,
	//|		ВЫБОР
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	//|				ТОГДА ХозрасчетныйОбороты.Субконто1
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	//|				ТОГДА ХозрасчетныйОбороты.Субконто1
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	//|				ТОГДА ХозрасчетныйОбороты.Субконто1
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	//|				ТОГДА ХозрасчетныйОбороты.Субконто2
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	//|				ТОГДА ХозрасчетныйОбороты.Субконто3
	//|			ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
	//|		КОНЕЦ,
	//|		ВЫБОР
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	//|				ТОГДА ХозрасчетныйОбороты.Субконто2
	//|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	//|				ТОГДА ХозрасчетныйОбороты.Субконто3
	//|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//|		КОНЕЦ
	//|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	
    |	ВЫБРАТЬ
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
    |		КОНЕЦ,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
    |		КОНЕЦ,
	|		ХозрасчетныйОбороты.Счет КАК Счет,
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(ХозрасчетныйОбороты.СуммаОстатокДт),
    |		СУММА(ХозрасчетныйОбороты.СуммаОстатокКт),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0)
    |	ИЗ
    |		РегистрБухгалтерии.Хозрасчетный.Остатки(
    |				&КонПериода1М,
    |				ВЫБОР
    |					КОГДА Счет В (ВЫБРАТЬ СчетРасчетов ИЗ Задолженность)
    |						ТОГДА ИСТИНА
    |					КОГДА Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
    |						ТОГДА ИСТИНА
    |					ИНАЧЕ ЛОЖЬ
    |				КОНЕЦ,
	|					, (Организация, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ NULL
	|						КОНЕЦ, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|						КОНЕЦ) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность)
	|					) КАК ХозрасчетныйОбороты
    |	
    |	СГРУППИРОВАТЬ ПО
	|		ХозрасчетныйОбороты.Счет,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
    |		КОНЕЦ,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
    |		КОНЕЦ
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
    |	ВЫБРАТЬ
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
    |		КОНЕЦ,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
    |		КОНЕЦ,
	|		ХозрасчетныйОбороты.Счет КАК Счет,
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(ХозрасчетныйОбороты.СуммаОборотКт),
    |		СУММА(ХозрасчетныйОбороты.СуммаОборотДт),
    |		СУММА(0),
    |		СУММА(0)
    |	ИЗ
    |		РегистрБухгалтерии.Хозрасчетный.Обороты(
    |				&НачПериода,
    |				&КонПериода,
    |				Регистратор,
    |				ВЫБОР
    |					КОГДА Счет В (ВЫБРАТЬ СчетРасчетов ИЗ Задолженность)
    |						ТОГДА ИСТИНА
    |					КОГДА Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
    |						ТОГДА ИСТИНА
    |					ИНАЧЕ ЛОЖЬ
    |				КОНЕЦ,
	|					, (Организация, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ NULL
	|						КОНЕЦ, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|						КОНЕЦ) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность),
	|					,
	|					) КАК ХозрасчетныйОбороты
    |	ГДЕ
    |		НЕ(ХозрасчетныйОбороты.Счет = ХозрасчетныйОбороты.КорСчет
    |					И ХозрасчетныйОбороты.Субконто1 = ХозрасчетныйОбороты.КорСубконто1
    |					И ХозрасчетныйОбороты.Субконто2 = ХозрасчетныйОбороты.КорСубконто2
    |					И ХозрасчетныйОбороты.Субконто3 = ХозрасчетныйОбороты.КорСубконто3)
    |	
    |	СГРУППИРОВАТЬ ПО
	|		ХозрасчетныйОбороты.Счет,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
    |		КОНЕЦ,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
    |		КОНЕЦ
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
    |	ВЫБРАТЬ
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
    |		КОНЕЦ,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
    |		КОНЕЦ,
	|		ХозрасчетныйОбороты.Счет КАК Счет,
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(ХозрасчетныйОбороты.СуммаОстатокДт),
    |		СУММА(ХозрасчетныйОбороты.СуммаОстатокКт)
    |	ИЗ
    |		РегистрБухгалтерии.Хозрасчетный.Остатки(
    |				&КонПериода,
    |				ВЫБОР
    |					КОГДА Счет В (ВЫБРАТЬ СчетРасчетов ИЗ Задолженность)
    |						ТОГДА ИСТИНА
    |					КОГДА Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
    |						ТОГДА ИСТИНА
    |					ИНАЧЕ ЛОЖЬ
    |				КОНЕЦ,
	|					, (Организация, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ NULL
	|						КОНЕЦ, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|						КОНЕЦ) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность)
	|					) КАК ХозрасчетныйОбороты
    |	
    |	СГРУППИРОВАТЬ ПО
	|		ХозрасчетныйОбороты.Счет,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
    |		КОНЕЦ,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
    |		КОНЕЦ
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
    |	ВЫБРАТЬ
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
    |		КОНЕЦ,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
    |		КОНЕЦ,
	|		ХозрасчетныйОбороты.Счет КАК Счет,
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(ХозрасчетныйОбороты.СуммаОборотКт),
    |		СУММА(ХозрасчетныйОбороты.СуммаОборотДт),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0),
    |		СУММА(0)
    |	ИЗ
    |		РегистрБухгалтерии.Хозрасчетный.Обороты(
    |				&НачПериода1М,
    |				&КонПериода1М,
    |				Регистратор,
    |				ВЫБОР
    |					КОГДА Счет В (ВЫБРАТЬ СчетРасчетов ИЗ Задолженность)
    |						ТОГДА ИСТИНА
    |					КОГДА Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
    |						ТОГДА ИСТИНА
    |					ИНАЧЕ ЛОЖЬ
    |				КОНЕЦ,
	|					, (Организация, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто1
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ NULL
	|						КОНЕЦ, ВЫБОР
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто2
	|							КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|								ТОГДА Субконто3
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|						КОНЕЦ) В (ВЫБРАТЬ Организация, Контрагент, ДоговорКонтрагента ИЗ Задолженность),
	|					,
	|					) КАК ХозрасчетныйОбороты
    |	ГДЕ
    |		НЕ(ХозрасчетныйОбороты.Счет = ХозрасчетныйОбороты.КорСчет
    |					И ХозрасчетныйОбороты.Субконто1 = ХозрасчетныйОбороты.КорСубконто1
    |					И ХозрасчетныйОбороты.Субконто2 = ХозрасчетныйОбороты.КорСубконто2
    |					И ХозрасчетныйОбороты.Субконто3 = ХозрасчетныйОбороты.КорСубконто3)
    |	
    |	СГРУППИРОВАТЬ ПО
	|		ХозрасчетныйОбороты.Счет,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто1
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
    |		КОНЕЦ,
    |		ВЫБОР
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто2
    |			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
    |				ТОГДА ХозрасчетныйОбороты.Субконто3
    |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
    |		КОНЕЦ) КАК ХозрасчетныйОбороты
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ЗначенияСвойств
    |		ПО ХозрасчетныйОбороты.ВИЛС_Договор = ЗначенияСвойств.Ссылка
    |			И (ЗначенияСвойств.Свойство = &СвойствоМероприятие)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ЗначенияСвойствСрокПогашенияЗадолженности
    |		ПО ХозрасчетныйОбороты.ВИЛС_Договор = ЗначенияСвойствСрокПогашенияЗадолженности.Ссылка
    |			И (ЗначенияСвойствСрокПогашенияЗадолженности.Свойство = &СвойствоСрокПогашенияЗадолженности)
    |
    |СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
    |	ХозрасчетныйОбороты.ДебиторКредитор,
    |	ХозрасчетныйОбороты.ВИЛС_Договор,
    |	ЗначенияСвойств.Значение,
	|  	ЗначенияСвойствСрокПогашенияЗадолженности.Значение
	|";
	
	Возврат(ТекстЗапроса);
КонецФункции

Функция ПолучитьТаблицуДокументовДолга(Знач СписокСтрокПоТекущейЗадолженности, Знач СуммаДолгаПоДоговору, Знач ДтКт)
	СальдоТекущееФ = 0;                                                     
	СуммаДолгаПоДоговору = ?(ЗначениеЗаполнено(СуммаДолгаПоДоговору), СуммаДолгаПоДоговору, 0);
	ТаблицаСФлагами = Новый ТаблицаЗначений();//Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Колонки = ТаблицаСФлагами.Колонки;
	Колонки.Добавить("ВИЛС_Договор"		, Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Колонки.Добавить("ДебиторКредитор"	, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Колонки.Добавить("ЕстьУслуги"		, Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Период"			, Новый ОписаниеТипов("Дата"));
	Колонки.Добавить("ПроверятьГалочку"	, Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Регистратор");
	Колонки.Добавить("СуммаОборот"		, Новый ОписаниеТипов("Число"));   
	Колонки.Добавить("СуммаОборотДт"	, Новый ОписаниеТипов("Число"));      
	Колонки.Добавить("СуммаОборотКт"	, Новый ОписаниеТипов("Число"));
	Колонки.Добавить("Счет"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Для каждого СтрокаТЗИ Из СписокСтрокПоТекущейЗадолженности Цикл
		СтрокаТЗТЗ = ТаблицаСФлагами.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗТЗ, СтрокаТЗИ);
	КонецЦикла;	
	
	ПараметрыОтбора = Новый Структура("Регистратор", Null);
	ЛишниеСтроки = ТаблицаСФлагами.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ЛишняяСтрока Из ЛишниеСтроки Цикл
		ТаблицаСФлагами.Удалить(ЛишняяСтрока);
	КонецЦикла; 
	ТаблицаСФлагами.Сортировать("Период Возр");
	ТаблицаСФлагами.Колонки.Добавить("Флаг", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1)));
	ТаблицаСФлагами.Колонки.Добавить("СуммаДолгаПоДоговору", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	Для каждого СтрокаТЗФ Из ТаблицаСФлагами Цикл
		СальдоТекущееФ = СальдоТекущееФ + СтрокаТЗФ.СуммаОборотДт - СтрокаТЗФ.СуммаОборотКт;
		СтрокаТЗФ.Флаг   = ?(СальдоТекущееФ = 0, "", ?(СальдоТекущееФ < 0, "К", "Д"));
		СтрокаТЗФ.СуммаДолгаПоДоговору = ?(СальдоТекущееФ < 0, -СальдоТекущееФ, СальдоТекущееФ);
	КонецЦикла; 
	ТаблицаСФлагами.Сортировать("Период Убыв");
	ТаблицаДокументовДолга = Новый ТаблицаЗначений;
	ТаблицаДокументовДолга.Колонки.Добавить("Регистратор");//,          Новый ОписаниеТипов("ДокументСсылка"));
	ТаблицаДокументовДолга.Колонки.Добавить("ПроверятьГалочку",     Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаДокументовДолга.Колонки.Добавить("СуммаДолгаПоДоговору", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТаблицаДокументовДолга.Колонки.Добавить("ЕстьУслуги", 			Новый ОписаниеТипов("Булево"));
	ТипДокумента = "";
	ДатаДок = "";
	НомерДок = "";
	БылиНайденыСтрокиЗадолженности = Ложь;
	
	Для каждого СтрокаТЗФ Из ТаблицаСФлагами Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗФ.Регистратор) Тогда Продолжить; КонецЕсли; 
		Если ДтКт = "Дт" и СтрокаТЗФ.Флаг = "Д" и СтрокаТЗФ.СуммаОборотДт <> 0 Тогда
			Нстрока = ТаблицаДокументовДолга.Добавить();
			Нстрока.Регистратор 			= СтрокаТЗФ.Регистратор;
			Нстрока.ПроверятьГалочку 		= СтрокаТЗФ.ПроверятьГалочку;
			Нстрока.ЕстьУслуги 				= СтрокаТЗФ.ЕстьУслуги;
			Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, Мин(СуммаДолгаПоДоговору, СтрокаТЗФ.СуммаОборотДт));
			СуммаДолгаПоДоговору 			= СуммаДолгаПоДоговору - СтрокаТЗФ.СуммаОборотДт;
			БылиНайденыСтрокиЗадолженности = Истина;
			Если Не СуммаДолгаПоДоговору > 0 Тогда Прервать; КонецЕсли; 
		ИначеЕсли ДтКт = "Кт" и СтрокаТЗФ.Флаг = "К" и СтрокаТЗФ.СуммаОборотКт <> 0 Тогда
			Нстрока = ТаблицаДокументовДолга.Добавить();
			Нстрока.Регистратор 			= СтрокаТЗФ.Регистратор;
			Нстрока.ПроверятьГалочку 		= СтрокаТЗФ.ПроверятьГалочку;
			Нстрока.ЕстьУслуги 				= СтрокаТЗФ.ЕстьУслуги;
			Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, Мин(СуммаДолгаПоДоговору, СтрокаТЗФ.СуммаОборотКт));
			СуммаДолгаПоДоговору 			= СуммаДолгаПоДоговору - СтрокаТЗФ.СуммаОборотКт;
			БылиНайденыСтрокиЗадолженности = Истина;
			Если Не СуммаДолгаПоДоговору > 0 Тогда Прервать; КонецЕсли; 
		ИначеЕсли Не БылиНайденыСтрокиЗадолженности Тогда
			Продолжить;
		ИначеЕсли СуммаДолгаПоДоговору > 0 Тогда
			Продолжить;	
		Иначе 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДокументовДолга;
КонецФункции

Функция ПолучитьРезерв(Знач Счет, Знач Контрагент, Знач ДоговорКонтрагента, Знач Выборка_3)
	СуммаРезерва = 0;
	Если Не Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам Тогда
		СтруктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента", Контрагент, ДоговорКонтрагента);
		Если Выборка_3.НайтиСледующий(СтруктураПоиска) Тогда
			СуммаРезерва = Выборка_3.Сумма;
		КонецЕсли; 
	КонецЕсли;
	Возврат СуммаРезерва;
КонецФункции

Функция ПолучитьОстаток(Знач Счет, Знач Контрагент, Знач ДоговорКонтрагента, Знач ОбъектРасчетов, Знач ВыборкаОстатков,Знач ДтКт = "Дт")
	СуммаОстатка = 0;
	СтруктураПоиска = Новый Структура("Счет, Контрагент, Договор, ОбъектРасчетов", Счет, Контрагент, ДоговорКонтрагента, ОбъектРасчетов);
	Если ВыборкаОстатков.НайтиСледующий(СтруктураПоиска) Тогда
		Если ДтКт = "Дт" Тогда
			СуммаОстатка = ВыборкаОстатков.СуммаОстатокДт;
		Иначе
			СуммаОстатка = ВыборкаОстатков.СуммаОстатокКт;
		КонецЕсли;	
	КонецЕсли; 
	Возврат СуммаОстатка;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли


//ПолучитьТекстЗапросаСЗаказами(ДтКт)
//	ТекстЗапроса = "
//	|ВЫБРАТЬ ПЕРВЫЕ 1	//0
//	|	Инвентаризация.Дата КАК Дата,
//	|	КОНЕЦПЕРИОДА(Инвентаризация.Дата, ДЕНЬ) КАК КонецПериода,
//	|	Инвентаризация.Номер КАК Номер,
//	|	Инвентаризация.Организация КАК Организация,
//	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
//	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
//	|	Инвентаризация.ДокументОснованиеВид КАК ДокументОснованиеВид,
//	|	Инвентаризация.ДокументОснованиеДата КАК ДокументОснованиеДата,
//	|	Инвентаризация.ДокументОснованиеНомер КАК ДокументОснованиеНомер
//	|ПОМЕСТИТЬ Шапка
//	|ИЗ 
//	|	Документ.ИнвентаризацияРасчетов КАК Инвентаризация
//	|ГДЕ
//	|	Инвентаризация.Ссылка = &Ссылка
//	|
//	|;
//	|/////////////////////////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ //1
//	|	Задолженность.ДебиторКредитор КАК Контрагент,
//	|	Задолженность.ВидЗадолженности КАК ВидЗадолженности,
//	|	Задолженность.СчетРасчетов КАК СчетРасчетов,
//	|	Задолженность.Подтверждено КАК Подтверждено,
//	|	Задолженность.НеПодтверждено КАК НеПодтверждено,
//	|	Задолженность.ИстекСрокДавности КАК ИстекСрокДавности,
//	|	Задолженность.ВИЛС_Договор КАК ДоговорКонтрагента
//	|ПОМЕСТИТЬ Задолженность	
//	|ИЗ 
//	|	Документ.ИнвентаризацияРасчетов.Задолженность КАК Задолженность
//	|ГДЕ
//	|	Задолженность.Ссылка = &Ссылка
//	|	И Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности." + ?(ДтКт = "Дт", "Дебиторская", "Кредиторская") + ")
//	//Дебиторская)
//	//
//	//|ИТОГИ
//	//|	СУММА(Подтверждено),
//	//|	СУММА(НеПодтверждено)
//	//|ПО
//	//|	СчетРасчетов
//	|;	
//	|/////////////////////////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ //2
//	|	Т.Регистратор КАК Регистратор,
//	|	Т.Организация КАК Организация,
//	|	Т.Контрагент КАК Контрагент,
//	|	Т.Договор КАК Договор,
//	|	МАКСИМУМ(Т.ЕстьУслуги) КАК ЕстьУслуги,
//	|	Т.РасчетныйДокумент КАК РасчетныйДокумент
//	|ПОМЕСТИТЬ РегистраторыСУслугами
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		Т.Ссылка КАК Регистратор,
//	|		Т.Ссылка.Организация КАК Организация,
//	|		Т.Ссылка.Контрагент КАК Контрагент,
//	|		Т.Ссылка.Договор КАК Договор,
//	|		ВЫБОР
//	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
//	|				ТОГДА ИСТИНА
//	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ КАК ЕстьУслуги,
//	|		Т.Ссылка КАК РасчетныйДокумент
//	|	ИЗ
//	|		Документ.ПриобретениеТоваровУслуг.ВидыЗапасов КАК Т
//	|	ГДЕ
//	|		Т.Ссылка.Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ ШАПКА КАК ШАПКА)	
//	|	    И Т.Ссылка.Контрагент В (ВЫБРАТЬ РАЗЛИЧНЫЕ  Задолженность.Контрагент ИЗ Задолженность КАК Задолженность)
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		Т.Ссылка,
//	|		Т.Ссылка.Организация,
//	|		Т.Ссылка.Контрагент,
//	|		Т.Ссылка.Договор,
//	|		ВЫБОР
//	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
//	|				ТОГДА ИСТИНА
//	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ,
//	|		Т.Ссылка
//	|	ИЗ
//	|		Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК Т
//	|	ГДЕ
//	|		Т.Ссылка.Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ ШАПКА КАК ШАПКА)	
//	|	    И Т.Ссылка.Контрагент В (ВЫБРАТЬ РАЗЛИЧНЫЕ  Задолженность.Контрагент ИЗ Задолженность КАК Задолженность)
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		Т.Ссылка,
//	|		Т.Ссылка.Организация,
//	|		Т.Ссылка.Контрагент,
//	|		Т.Ссылка.Договор,
//	|		ВЫБОР
//	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
//	|				ТОГДА ИСТИНА
//	|			КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ,
//	|		Т.Ссылка
//	|	ИЗ
//	|		Документ.ПоступлениеТоваровНаСклад.ВидыЗапасов КАК Т
//	|	ГДЕ
//	|		Т.Ссылка.Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ ШАПКА КАК ШАПКА)	
//	|	    И Т.Ссылка.Контрагент В (ВЫБРАТЬ РАЗЛИЧНЫЕ  Задолженность.Контрагент ИЗ Задолженность КАК Задолженность)
//	|	
//	|	ОБЪЕДИНИТЬ ВСЕ
//	|	
//	|	ВЫБРАТЬ
//	|		Т.Ссылка,
//	|		Т.Ссылка.Организация,
//	|		Т.Контрагент,
//	|		ВЫБОР КОГДА НЕ ЕСТЬNULL(Т.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
//	|			ТОГДА 
//	|				Т.Договор
//	|			КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Т.ОбъектРасчетов КАК Справочник.ДоговорыКонтрагентов), ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) 	 
//	|			ТОГДА
//	|				ВЫРАЗИТЬ(Т.ОбъектРасчетов КАК Справочник.ДоговорыКонтрагентов)
//	|			ИНАЧЕ	
//	|				Т.ДокументРасчетов.Договор
//	|			КОНЕЦ,	
//	|		ЛОЖЬ,
//	|		Т.ДокументРасчетов
//	|	ИЗ
//	|		Документ.ВводОстатков.РасчетыСПартнерами КАК Т
//	|	ГДЕ
//	|		Т.Ссылка.Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ ШАПКА КАК ШАПКА)	
//	|	    И Т.Контрагент В (ВЫБРАТЬ РАЗЛИЧНЫЕ  Задолженность.Контрагент ИЗ Задолженность КАК Задолженность)
//	|	    ) КАК Т
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	Т.Регистратор,
//	|	Т.Организация,
//	|	Т.Контрагент,
//	|	Т.Договор,
//	|	Т.РасчетныйДокумент
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	Регистратор,
//	|	Контрагент,
//	|	Договор
//	|;
//	|///////////////////////////////////////////////////////////////////////////////   
//	|ВЫБРАТЬ	//3
//	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
//	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
//	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
//	|ИЗ
//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
//	|			&КонПериода,
//	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам),
//	|			, Организация 	 В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ Шапка КАК Шапка)	//&Организация
//	|				И Субконто1  В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.Контрагент ИЗ Задолженность КАК ЗадолженностьНовая)
//	|				И Субконто2  В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДоговорКонтрагента ИЗ Задолженность КАК ЗадолженностьНовая)) КАК ХозрасчетныйОстатки
//	|
//	|;
//	|///////////////////////////////////////////////////////////////////////////////
//	| ВЫБРАТЬ РАЗРЕШЕННЫЕ //4
//	|	РасчетыСКлиентамиПоСрокам.ДокументРегистратор КАК Регистратор,
//	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация КАК Организация,
//	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
//	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор КАК Договор,
//	|	ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО) КАК ОбъектРасчетов,
//	|	ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.РасчетныйДокумент, НЕОПРЕДЕЛЕНО) КАК РасчетныйДокумент,
//	|	ЕСТЬNULL(СУММА(ВЫБОР
//	|				КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//	|					ТОГДА РасчетыСКлиентамиПоСрокам.ПредоплатаРегл + РасчетыСКлиентамиПоСрокам.ДолгРегл
//	|				ИНАЧЕ 0
//	|			КОНЕЦ), 0) КАК СуммаОборот,
//	|	СУММА(ВЫБОР
//	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//	|				ТОГДА РасчетыСКлиентамиПоСрокам.ПредоплатаРегл
//	|			ИНАЧЕ 0
//	|		КОНЕЦ) КАК СуммаОборотДт,
//	|	ЕСТЬNULL(СУММА(ВЫБОР
//	|				КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//	|					ТОГДА РасчетыСКлиентамиПоСрокам.ПредоплатаРегл + РасчетыСКлиентамиПоСрокам.ДолгРегл
//	|				ИНАЧЕ 0
//	|			КОНЕЦ), 0) КАК СуммаОборотКт,
//	|	ВЫБОР
//	|		КОГДА НЕ ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ПредоплатаРегл, 0) = 0
//	|			ТОГДА РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаАвансовПолученных
//	|		ИНАЧЕ РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаРасчетовСКлиентами
//	|	КОНЕЦ КАК Счет
//	|ПОМЕСТИТЬ РасчетыПоСрокам
//	|ИЗ
//	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
//	|ГДЕ
//	|	ВЫБОР
//	|			КОГДА РасчетыСКлиентамиПоСрокам.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
//	|				ТОГДА ЛОЖЬ
//	|			КОГДА РасчетыСКлиентамиПоСрокам.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыМеждуОрганизациями
//	|				ТОГДА ЛОЖЬ
//	|			ИНАЧЕ ИСТИНА
//	|		КОНЕЦ
//	|	//И РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
//	|	//И РасчетыСКлиентамиПоСрокам.ОбъектРасчетов = &ОбъектРасчетов
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	РасчетыСКлиентамиПоСрокам.ДокументРегистратор,
//	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация,
//	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент,
//	|	РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор,
//	|	ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО),
//	|	ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.РасчетныйДокумент, НЕОПРЕДЕЛЕНО),
//	|	ВЫБОР
//	|		КОГДА НЕ ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ПредоплатаРегл, 0) = 0
//	|			ТОГДА РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаАвансовПолученных
//	|		ИНАЧЕ РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаРасчетовСКлиентами
//	|	КОНЕЦ
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//    |
//	|ВЫБРАТЬ
//	|	РасчетыСПоставщикамиПоСрокам.ДокументРегистратор,
//	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация,
//	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент,
//	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор,
//	|	ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО),
//	|	ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент, НЕОПРЕДЕЛЕНО) КАК РасчетныйДокумент,
//	|	ЕСТЬNULL(СУММА(ВЫБОР
//	|				КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//	|					ТОГДА -(РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл + РасчетыСПоставщикамиПоСрокам.ДолгРегл)
//	|				ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл + РасчетыСПоставщикамиПоСрокам.ДолгРегл
//	|			КОНЕЦ), 0),
//	|	ЕСТЬNULL(СУММА(ВЫБОР
//	|				КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//	|					ТОГДА РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл + РасчетыСПоставщикамиПоСрокам.ДолгРегл
//	|				ИНАЧЕ 0
//	|			КОНЕЦ), 0),
//	|	ЕСТЬNULL(СУММА(ВЫБОР
//	|				КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//	|					ТОГДА РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл + РасчетыСПоставщикамиПоСрокам.ДолгРегл
//	|				ИНАЧЕ 0
//	|			КОНЕЦ), 0),
//	|	ВЫБОР
//	|		КОГДА НЕ ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл, 0) = 0
//	|			ТОГДА РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаАвансовВыданных
//	|		ИНАЧЕ РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаРасчетовСПоставщиками
//	|	КОНЕЦ
//	|ИЗ
//	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
//	|ГДЕ
//	|	ВЫБОР
//	|			КОГДА РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
//	|				ТОГДА ЛОЖЬ
//	|			КОГДА РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыМеждуОрганизациями
//	|				ТОГДА ЛОЖЬ
//	|			ИНАЧЕ ИСТИНА
//	|		КОНЕЦ
//	|	//И РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
//	|	//И РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов = &ОбъектРасчетов
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	РасчетыСПоставщикамиПоСрокам.ДокументРегистратор,
//	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация,
//	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Контрагент,
//	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор,
//	|	ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО),
//	|	ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент, НЕОПРЕДЕЛЕНО),
//	|	ВЫБОР
//	|		КОГДА НЕ ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл, 0) = 0
//	|			ТОГДА РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаАвансовВыданных
//	|		ИНАЧЕ РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.ГруппаФинансовогоУчета.СчетУчетаРасчетовСПоставщиками
//	|	КОНЕЦ
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	Регистратор,
//	|	Контрагент,
//	|	Договор,
//	|	Счет,
//	|	РасчетныйДокумент
//	|;
//	|///////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ //5
//	|	ХозрасчетныйОбороты.ДебиторКредитор КАК ДебиторКредитор,
//	|	ХозрасчетныйОбороты.ВИЛС_Договор КАК ВИЛС_Договор,
//	|	ХозрасчетныйОбороты.ЕстьУслуги,
//	|	ХозрасчетныйОбороты.Период КАК Период,
//	|	ХозрасчетныйОбороты.Счет КАК Счет,
//	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
//	|	ХозрасчетныйОбороты.ПроверятьГалочку КАК ПроверятьГалочку,
//	|   ХозрасчетныйОбороты.ОбъектРасчетов КАК ОбъектРасчетов,
//	|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК СуммаОборот,
//	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
//	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
//	|ИЗ
//	|(ВЫБРАТЬ
//	|	ХозрасчетныйОбороты.ДебиторКредитор КАК ДебиторКредитор,
//	|	ХозрасчетныйОбороты.ВИЛС_Договор КАК ВИЛС_Договор,
//	|	ХозрасчетныйОбороты.ЕстьУслуги,
//	|	ХозрасчетныйОбороты.Период КАК Период,
//	|	ХозрасчетныйОбороты.Счет КАК Счет,
//	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
//	|	ХозрасчетныйОбороты.ПроверятьГалочку КАК ПроверятьГалочку,
//	|   РасчетыПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов, 
//	|   ХозрасчетныйОбороты.РасчетныйДокумент КАК РасчетныйДокумент,
//	|   ВЫБОР КОГДА НЕ ЕСТЬNULL(РасчетыПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//	|       ТОГДА
//	|			ЕСТЬNULL(РасчетыПоСрокам.СуммаОборот, 0)
//	|		ИНАЧЕ
//	|			ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) 
//	|		КОНЕЦ КАК СуммаОборот,
//	|   ВЫБОР КОГДА НЕ ЕСТЬNULL(РасчетыПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//	|       ТОГДА
//	|			ЕСТЬNULL(РасчетыПоСрокам.СуммаОборотДт, 0)
//	|		ИНАЧЕ
//	|			ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) 
//	|		КОНЕЦ КАК СуммаОборотДт,
//	|   ВЫБОР КОГДА НЕ ЕСТЬNULL(РасчетыПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//	|       ТОГДА
//	|			ЕСТЬNULL(РасчетыПоСрокам.СуммаОборотКт, 0)
//	|		ИНАЧЕ
//	|			ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) 
//	|		КОНЕЦ КАК СуммаОборотКт
//	|ИЗ
//	|	(ВЫБРАТЬ

//	|	ВЫБОР
//	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
//	|			ТОГДА ХозрасчетныйОбороты.Субконто1
//	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
//	|			ТОГДА ХозрасчетныйОбороты.Субконто1
//	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	|			ТОГДА ХозрасчетныйОбороты.Субконто1
//	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
//	|			ТОГДА ХозрасчетныйОбороты.Субконто2
//	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
//	|			ТОГДА ХозрасчетныйОбороты.Субконто3
//	|		ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
//	|	КОНЕЦ КАК ДебиторКредитор,
//	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
//	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	|			ТОГДА ХозрасчетныйОбороты.Субконто2
//	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	|			ТОГДА ХозрасчетныйОбороты.Субконто3
//	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
//	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17

//	|		ХозрасчетныйОбороты.Период КАК Период,
//	|		ХозрасчетныйОбороты.Счет КАК Счет,
//    |	   	ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент, ХозрасчетныйОбороты.Регистратор) КАК Регистратор, 
//	
//	|       РегистраторыСУслугами.РасчетныйДокумент КАК РасчетныйДокумент,
//	
//	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) = 0
//	|			ТОГДА
//	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
//	//|           КОГДА НЕ ЕСТЬNULL(РасчетыПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//	//|           ТОГДА
//	//|				ЕСТЬNULL(РасчетыПоСрокам.СуммаОборот, 0)
//	|			ИНАЧЕ
//	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборот, 0) 
//	|		КОНЕЦ КАК СуммаОборот,		
//	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) = 0
//	|			ТОГДА
//	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
//	//|           КОГДА НЕ ЕСТЬNULL(РасчетыПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//	//|           ТОГДА
//	//|				ЕСТЬNULL(РасчетыПоСрокам.СуммаОборотДт, 0)
//	|			ИНАЧЕ
//	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) 
//	|		КОНЕЦ КАК СуммаОборотДт,
//	|		ВЫБОР КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент И НЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) = 0
//	|			ТОГДА
//	|				ЕСТЬNULL(РегистраторыСУслугами.РасчетныйДокумент.СуммаРегл, 0)
//	//|           КОГДА НЕ ЕСТЬNULL(РасчетыПоСрокам.ОбъектРасчетов, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
//	//|           ТОГДА
//	//|				ЕСТЬNULL(РасчетыПоСрокам.СуммаОборотКт, 0)
//	|			ИНАЧЕ
//	|				ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) 
//	|		КОНЕЦ КАК СуммаОборотКт,
//	|		ВЫБОР
//	|			КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент 
//	|					И РегистраторыСУслугами.РасчетныйДокумент.ТипПервичногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаПоставщику)
//	|				ТОГДА ""Деньги""
//	|			КОГДА РегистраторыСУслугами.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент 
//	|					И РегистраторыСУслугами.РасчетныйДокумент.ТипПервичногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ОплатаОтКлиента)
//	|				ТОГДА ""Деньги""
//	|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
//	|				ТОГДА ""Деньги""
//	|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
//	|				ТОГДА ""Деньги""
//	|			КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
//	|				ТОГДА ""Деньги""
//	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
//	|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками))
//	|				ТОГДА ""Деньги""
//	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
//	|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
//	|				ТОГДА ""Деньги""
//	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
//	|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы)
//	|				ТОГДА ""Деньги""
//	//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
//	//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
//	//|					И ХозрасчетныйОбороты.КорСубконто1 = &ВТБ_Факторинг
//	//|				ТОГДА ""Деньги""
//	//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
//	//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
//	//|					И ХозрасчетныйОбороты.КорСубконто1 = &Транскапиталбанк
//	//|				ТОГДА ""Деньги""
//	|			ИНАЧЕ ""Поставка""
//	|		КОНЕЦ КАК ПроверятьГалочку,
//	|		РегистраторыСУслугами.ЕстьУслуги КАК ЕстьУслуги
//	|	ИЗ
//	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
//	|				,
//	|				&КонПериода,
//	|				Регистратор,
//	|				ВЫБОР 
//	|					КОГДА Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.СчетРасчетов ИЗ Задолженность КАК ЗадолженностьНовая)	//В (&Счета),
//	|				    	ТОГДА ИСТИНА
//	|					КОГДА Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
//	|				    	ТОГДА ИСТИНА
//	|                    ИНАЧЕ ЛОЖЬ КОНЕЦ
//	|				,,//&ВидыСубконто,
//	|				Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ Шапка КАК Шапка)	//= &Организация

//	|	И ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
//	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
//	|			ТОГДА Субконто1
//	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
//	|			ТОГДА Субконто1
//	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	|			ТОГДА Субконто1
//	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
//	|			ТОГДА Субконто2
//	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
//	|			ТОГДА Субконто3
//	|		ИНАЧЕ NULL
//	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.Контрагент ИЗ Задолженность КАК ЗадолженностьНовая)    //= &Контрагент	//
//	|	И ВЫБОР
//	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	|			ТОГДА Субконто2
//	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	|			ТОГДА Субконто3
//	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
//	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДоговорКонтрагента ИЗ Задолженность КАК ЗадолженностьНовая) 	//= &Договор	//	
//	|,
//	|				,
//	|				) КАК ХозрасчетныйОбороты
//	|    ЛЕВОЕ СОЕДИНЕНИЕ РегистраторыСУслугами
//	|    	ПО ХозрасчетныйОбороты.Регистратор = РегистраторыСУслугами.Регистратор
//	
//	|			И ХозрасчетныйОбороты.Организация = РегистраторыСУслугами.Организация
//	|			И ВЫБОР
//	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
//	|					ТОГДА ХозрасчетныйОбороты.Субконто1
//	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
//	|					ТОГДА ХозрасчетныйОбороты.Субконто1
//	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	|					ТОГДА ХозрасчетныйОбороты.Субконто1
//	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
//	|					ТОГДА ХозрасчетныйОбороты.Субконто2
//	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
//	|					ТОГДА ХозрасчетныйОбороты.Субконто3
//	|				ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
//	|			КОНЕЦ = РегистраторыСУслугами.Контрагент
//	|			И ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
//	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	|					ТОГДА ХозрасчетныйОбороты.Субконто2
//	|				КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	|					ТОГДА ХозрасчетныйОбороты.Субконто3
//	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
//	|			КОНЕЦ = РегистраторыСУслугами.Договор 
//	|                             ) КАК ХозрасчетныйОбороты
//	|    ЛЕВОЕ СОЕДИНЕНИЕ РасчетыПоСрокам
//	|    	ПО ХозрасчетныйОбороты.Регистратор = РасчетыПоСрокам.Регистратор
//	|			//И ХозрасчетныйОбороты.Организация = РасчетыПоСрокам.Организация
//	|			И ХозрасчетныйОбороты.Счет = РасчетыПоСрокам.Счет
//	|			И ХозрасчетныйОбороты.ДебиторКредитор = РасчетыПоСрокам.Контрагент
//	|			И ХозрасчетныйОбороты.ВИЛС_Договор = РасчетыПоСрокам.Договор
//	|			И ХозрасчетныйОбороты.РасчетныйДокумент = РасчетыПоСрокам.РасчетныйДокумент
//	|			
//	|											) КАК ХозрасчетныйОбороты
//	|
//	|СГРУППИРОВАТЬ ПО

//	|	ХозрасчетныйОбороты.ДебиторКредитор,
//	|	ХозрасчетныйОбороты.ВИЛС_Договор, // fix Suetin 17.01.2019 12:58:17
//	|   ХозрасчетныйОбороты.ОбъектРасчетов,
//	|	ХозрасчетныйОбороты.ЕстьУслуги,   // fix Suetin 25.03.2019 18:45:23
//	|	ХозрасчетныйОбороты.Регистратор,
//	|	ХозрасчетныйОбороты.Период,
//	|	ХозрасчетныйОбороты.Счет,
//	|	ХозрасчетныйОбороты.ПроверятьГалочку
//	|
//	//|УПОРЯДОЧИТЬ ПО
//	//|	ХозрасчетныйОбороты.Период
//	|ИТОГИ
//	|	СУММА(СуммаОборот)
//	|ПО
//	//|	Счет.Родитель.Родитель,
//	//|	Счет.Родитель,
//	|	Счет
//	|;
//	|/////////////////////////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ //6
//	|	Задолженность.СчетРасчетов КАК СчетРасчетов,
//	|	Задолженность.Контрагент КАК Контрагент,
//	|	Задолженность.ДоговорКонтрагента КАК ДоговорКонтрагента,
//	|	Задолженность.ВидЗадолженности КАК ВидЗадолженности,
//	|	Задолженность.Подтверждено КАК Подтверждено,
//	|	Задолженность.НеПодтверждено КАК НеПодтверждено,
//	|	Задолженность.ИстекСрокДавности КАК ИстекСрокДавности
//	|ИЗ 
//	|	Задолженность КАК Задолженность
//	|УПОРЯДОЧИТЬ ПО
//	|	СчетРасчетов
//	|ИТОГИ
//	|	СУММА(Подтверждено),
//	|	СУММА(НеПодтверждено)
//	|ПО
//	|	СчетРасчетов ИЕРАРХИЯ
//	|АВТОУПОРЯДОЧИВАНИЕ
//	|;
//	//|/////////////////////////////////////////////////////////////////////////////////////////////////////
//	//|ВЫБРАТЬ   //6
//	//|	ВЫБОР
//	//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
//	//|			ТОГДА ХозрасчетныйОстатки.Субконто1
//	//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
//	//|			ТОГДА ХозрасчетныйОстатки.Субконто1
//	//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	//|			ТОГДА ХозрасчетныйОстатки.Субконто1
//	//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
//	//|			ТОГДА ХозрасчетныйОстатки.Субконто2
//	//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
//	//|			ТОГДА ХозрасчетныйОстатки.Субконто3
//	//|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
//	//|	КОНЕЦ КАК ДебиторКредитор,
//	//|	ВЫБОР
//	//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	//|			ТОГДА ХозрасчетныйОстатки.Субконто2
//	//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	//|			ТОГДА ХозрасчетныйОстатки.Субконто3
//	//|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
//	//|	КОНЕЦ КАК ВИЛС_Договор,
//	//|	ХозрасчетныйОстатки.Счет КАК Счет,
//	//|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстаток, 0) КАК СуммаОстаток,		
//	//|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаОстатокДт,
//	//|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК СуммаОстатокКт
//	//
//	//|	ИЗ
//	//|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонПериода,
//	//|				ВЫБОР 
//	//|					КОГДА Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.СчетРасчетов ИЗ Задолженность КАК ЗадолженностьНовая)
//	//|				    	ТОГДА ИСТИНА
//	//|					КОГДА Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
//	//|				    	ТОГДА ИСТИНА
//	//|                    ИНАЧЕ ЛОЖЬ КОНЕЦ
//	//|				,,
//	//|				Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ Шапка КАК Шапка)
//	//|				И ВЫБОР
//	//|					КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
//	//|						ТОГДА Субконто1
//	//|					КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
//	//|						ТОГДА Субконто1
//	//|					КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	//|						ТОГДА Субконто1
//	//|					КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
//	//|						ТОГДА Субконто2
//	//|					КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
//	//|						ТОГДА Субконто3
//	//|					ИНАЧЕ NULL
//	//|				КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.Контрагент ИЗ Задолженность КАК ЗадолженностьНовая)
//	//|				И ВЫБОР
//	//|					КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	//|						ТОГДА Субконто2
//	//|					КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
//	//|						ТОГДА Субконто3
//	//|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
//	//|				КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДоговорКонтрагента ИЗ Задолженность КАК ЗадолженностьНовая)	
//	//|				) КАК ХозрасчетныйОстатки
//	//|;
//	|";
