#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

&Вместо("ЗаполнитьЗадолженностьПоОстаткам")
Процедура ВИЛС_ЗаполнитьЗадолженностьПоОстаткам(ПараметрыЗаполнения, АдресХранилища)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(ПараметрыЗаполнения.Дата), ВидГраницы.Включая));
	// begin fix Suetin 17.01.2019 16:46:39
	Запрос.УстановитьПараметр("Дата1Месяц",Новый Граница(КонецДня(ДобавитьМесяц(ПараметрыЗаполнения.Дата, -1)), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Дата2Месяц",Новый Граница(КонецДня(ДобавитьМесяц(ПараметрыЗаполнения.Дата, -2)), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОпределенияСрокаИстеченияСрокаДавности", Новый Граница(?(ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -36) < Дата(2005,12,31,23,59,59), Дата(2005,12,31,23,59,59), ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -36)), ВидГраницы.Включая) );
	Запрос.УстановитьПараметр("ДатаОпределенияСрокаИстеченияСрокаДавности1Месяц",Новый Граница(?(ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -37) < Дата(2005,12,31,23,59,59), Дата(2005,12,31,23,59,59), ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -37)), ВидГраницы.Включая) );
	Запрос.УстановитьПараметр("ДатаОпределенияСрокаИстеченияСрокаДавности2Месяц",Новый Граница(?(ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -38) < Дата(2005,12,31,23,59,59), Дата(2005,12,31,23,59,59), ДобавитьМесяц(КонецДня(ПараметрыЗаполнения.Дата), -38)), ВидГраницы.Включая) );
	// end fix Suetin 17.01.2019 16:46:18
	Запрос.УстановитьПараметр("Организация", ПараметрыЗаполнения.Организация);
	Запрос.УстановитьПараметр("МассивСчетов", ПараметрыЗаполнения.СчетаРасчетов);
	Запрос.УстановитьПараметр("ТаблицаЗадолженности", ПараметрыЗаполнения.ТаблицаЗадолженности);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияРасчетовЗадолженность.СчетРасчетов,
	|	ИнвентаризацияРасчетовЗадолженность.ДебиторКредитор,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_Договор,   				// fix Suetin 17.01.2019 13:02:14
	|	ИнвентаризацияРасчетовЗадолженность.Подтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.НеПодтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.ИстекСрокДавности,
	|	ИнвентаризацияРасчетовЗадолженность.ВидЗадолженности,
	|	ИнвентаризацияРасчетовЗадолженность.ВсегоДебиторская,
	|	ИнвентаризацияРасчетовЗадолженность.ВсегоКредиторская,        		// begin fix Suetin 06.02.2019 15:50:43
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_Подтверждено1Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_НеПодтверждено1Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_ИстекСрокДавности1Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_Подтверждено2Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_НеПодтверждено2Месяц,
	|	ИнвентаризацияРасчетовЗадолженность.ВИЛС_ИстекСрокДавности2Месяц   	// end fix Suetin 06.02.2019 15:50:48
	|ПОМЕСТИТЬ ЗадолженностьСтарая
	|ИЗ
	|	&ТаблицаЗадолженности КАК ИнвентаризацияРасчетовЗадолженность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоДебиторская,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНовая
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата, Счет В (&МассивСчетов), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ, 					// end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	// begin fix Suetin 17.01.2019 12:58:11	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено	//ИстекСрокДавности	//,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоДебиторская,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНоваяИстечениеСрокаДавности
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОпределенияСрокаИстеченияСрокаДавности, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)                   // end fix Suetin 17.01.2019 12:58:11
	|	) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,                  // end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоДебиторская,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНовая1Месяц
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата1Месяц, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ, 					// end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено	//ИстекСрокДавности	//,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоДебиторская,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНоваяИстечениеСрокаДавности1Месяц
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОпределенияСрокаИстеченияСрокаДавности1Месяц, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)                   // end fix Suetin 17.01.2019 12:58:11
	|	) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,                  // end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоДебиторская,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНовая2Месяц
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата2Месяц, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ, 					// end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ) КАК Подтверждено	//ИстекСрокДавности	//,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоДебиторская,
	//|	СУММА(ВЫБОР
	//|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	//|					ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	//|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	//|			ИНАЧЕ 0
	//|		КОНЕЦ) КАК ВсегоКредиторская
	|ПОМЕСТИТЬ ЗадолженностьНоваяИстечениеСрокаДавности2Месяц
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОпределенияСрокаИстеченияСрокаДавности2Месяц, Счет В (&МассивСчетов), , Организация = &Организация
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
	|	) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокДт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,                  // end fix Suetin 17.01.2019 12:58:17
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет.Наименование
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// end fix Suetin 17.01.2019 12:58:17
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадолженностьНовая.ДебиторКредитор КАК ДебиторКредитор,
	|	ЗадолженностьНовая.ВИЛС_Договор КАК ВИЛС_Договор,        // fix Suetin 17.01.2019 14:35:22
	|	ЗадолженностьНовая.СчетРасчетов КАК СчетРасчетов,
	|	ЗадолженностьНовая.ВидЗадолженности,
	|	ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) КАК Подтверждено,
	|	ЕСТЬNULL(ЗадолженностьСтарая.НеПодтверждено, 0) КАК НеПодтверждено,        
	// begin fix Suetin 06.02.2019 15:44:57
	//|	ЕСТЬNULL(ЗадолженностьСтарая.ИстекСрокДавности, 0) КАК ИстекСрокДавности,  
	|   ВЫБОР КОГДА ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) < ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности.Подтверждено, 0) ТОГДА ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) ИНАЧЕ ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности.Подтверждено, 0) КОНЕЦ КАК ИстекСрокДавности,
	
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено1Месяц, ЗадолженностьНовая1Месяц.Подтверждено) КАК ВИЛС_Подтверждено1Месяц,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_НеПодтверждено1Месяц, 0) КАК ВИЛС_НеПодтверждено1Месяц,
	|   ВЫБОР КОГДА ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено1Месяц, ЗадолженностьНовая1Месяц.Подтверждено) < ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.Подтверждено, 0) ТОГДА ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено1Месяц, ЗадолженностьНовая1Месяц.Подтверждено) ИНАЧЕ ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.Подтверждено, 0) КОНЕЦ КАК ВИЛС_ИстекСрокДавности1Месяц,
	
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено2Месяц, ЗадолженностьНовая2Месяц.Подтверждено) КАК ВИЛС_Подтверждено2Месяц,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_НеПодтверждено2Месяц, 0) КАК ВИЛС_НеПодтверждено2Месяц,
	|   ВЫБОР КОГДА ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено2Месяц, ЗадолженностьНовая2Месяц.Подтверждено) < ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.Подтверждено, 0) ТОГДА ЕСТЬNULL(ЗадолженностьСтарая.ВИЛС_Подтверждено2Месяц, ЗадолженностьНовая2Месяц.Подтверждено) ИНАЧЕ ЕСТЬNULL(ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.Подтверждено, 0) КОНЕЦ КАК ВИЛС_ИстекСрокДавности2Месяц,
	// end fix Suetin 06.02.2019 15:57:38
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВсегоДебиторская, ЗадолженностьНовая.ВсегоДебиторская) КАК ВсегоДебиторская,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВсегоКредиторская, ЗадолженностьНовая.ВсегоКредиторская) КАК ВсегоКредиторская,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ВсегоДебиторская, ЗадолженностьНовая.ВсегоДебиторская) + ЕСТЬNULL(ЗадолженностьСтарая.ВсегоКредиторская, ЗадолженностьНовая.ВсегоКредиторская) = ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) КАК ЕстьПодтвержденнаяСумма,
	|	ЕСТЬNULL(ЗадолженностьСтарая.НеПодтверждено, 0) > 0 КАК ЕстьНеПодтвержденнаяСумма,
	|	ЕСТЬNULL(ЗадолженностьСтарая.ИстекСрокДавности, 0) > 0 КАК ЕстьИстекСрокДавности,
	|	ЕСТЬNULL(ЗадолженностьСтарая.Подтверждено, ЗадолженностьНовая.Подтверждено) > 0
	|		И ЕСТЬNULL(ЗадолженностьСтарая.НеПодтверждено, 0) > 0 КАК ЕстьЧастичноПодтвержденнаяСумма
	|ИЗ
	|	ЗадолженностьНовая КАК ЗадолженностьНовая
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьСтарая КАК ЗадолженностьСтарая
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьСтарая.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьСтарая.ДебиторКредитор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьСтарая.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНоваяИстечениеСрокаДавности КАК ЗадолженностьНоваяИстечениеСрокаДавности
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНоваяИстечениеСрокаДавности.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНоваяИстечениеСрокаДавности.ДебиторКредитор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНоваяИстечениеСрокаДавности.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНовая1Месяц КАК ЗадолженностьНовая1Месяц
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНовая1Месяц.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНовая1Месяц.ДебиторКредитор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНовая1Месяц.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНоваяИстечениеСрокаДавности1Месяц КАК ЗадолженностьНоваяИстечениеСрокаДавности1Месяц
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.ДебиторКредитор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНоваяИстечениеСрокаДавности1Месяц.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНовая2Месяц КАК ЗадолженностьНовая2Месяц
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНовая2Месяц.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНовая2Месяц.ДебиторКредитор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНовая2Месяц.ВидЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьНоваяИстечениеСрокаДавности2Месяц КАК ЗадолженностьНоваяИстечениеСрокаДавности2Месяц
	|		ПО ЗадолженностьНовая.СчетРасчетов = ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.СчетРасчетов
	|			И ЗадолженностьНовая.ДебиторКредитор = ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.ДебиторКредитор
	|			И ЗадолженностьНовая.ВидЗадолженности = ЗадолженностьНоваяИстечениеСрокаДавности2Месяц.ВидЗадолженности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадолженностьНовая.СчетРасчетов.Порядок,
	|	ДебиторКредитор, ВИЛС_Договор      // fix Suetin 06.02.2019 14:13:32
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

&После("ДобавитьКомандыПечати")
Процедура ВИЛС_ДобавитьКомандыПечати(КомандыПечати)
	// РеестрДебиторскойЗадолженностиПриложение_7_1_180510
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрДебиторскойЗадолженностиПриложение_7_1";
	КомандаПечати.Представление = НСтр("ru = 'Реестр дебиторской задолженности. Приложение 7.1.'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	// РеестрКредиторскойЗадолженностиПриложение_7_1_180517
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрКредиторскойЗадолженностиПриложение_7_1_180517";
	КомандаПечати.Представление = НСтр("ru = 'Реестр кредиторской задолженности. Приложение 7.1.'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	// РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180406
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180406";
	КомандаПечати.Представление = НСтр("ru = 'Реестр просроченной дебиторской задолженности. Приложение 7.2.'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	// РеестрПросроченнойКредиторскойЗадолженностиПриложение_7_2_180517
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РеестрПросроченнойКредиторскойЗадолженностиПриложение_7_2_180517";
	КомандаПечати.Представление = НСтр("ru = 'Реестр просроченной кредиторской задолженности. Приложение 7.2.'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	//// РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180523
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180523";
	//КомандаПечати.Представление = НСтр("ru = 'Реестр просроченной дебиторской задолженности. Приложение 7.2. ТЕСТ'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	//
	//// РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180702
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "РеестрПросроченнойДебиторскойЗадолженностиПриложение_7_2_180702";
	//КомандаПечати.Представление = НСтр("ru = 'Реестр просроченной дебиторской задолженности. Приложение 7.2. ТЕСТ по заказам'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
КонецПроцедуры

&После("Печать")
Процедура ВИЛС_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрДебиторскойЗадолженностиПриложение_7_1") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеестрДебиторскойЗадолженностиПриложение_7_1", НСтр("ru = 'Реестр дебиторской задолженности. Приложение 7.1.'"), 
			ПечатьРеестрДебиторскойЗадолженностиПриложение_7_1_180510(МассивОбъектов, ОбъектыПечати), , "Документ.ИнвентаризацияРасчетовСКонтрагентами.ПФ_MXL_РеестрДебиторскойЗадолженностиПриложение_7_1");
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой Реестр дебиторской задолженности. 
//	Приложение 7.1. (табличный документ 1С:Предприятия)
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма приказа.
//
Функция ПечатьРеестрДебиторскойЗадолженностиПриложение_7_1_180510(МассивОбъектов, ОбъектыПечати)
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетовСконтрагентами_Дбт";
	
	ПервыйДокумент = Истина;
	
	Для каждого СсылкаОбъекта Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", СсылкаОбъекта);
		Запрос.Текст = ПолучитьТекстЗапроса("Дебиторская");
		ДатаДокументаИнветаризации = КонецДня(СсылкаОбъекта.Дата);
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	Инвентаризация.Дата КАК Дата,
		//|	Инвентаризация.Номер КАК Номер,
		//|	Инвентаризация.Организация КАК Организация,
		//|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
		//|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
		//|	Инвентаризация.ДокументОснованиеВид КАК ДокументОснованиеВид,
		//|	Инвентаризация.ДокументОснованиеДата КАК ДокументОснованиеДата,
		//|	Инвентаризация.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
		//|	Инвентаризация.ИнвентаризационнаяКомиссия.(
		//|		ФИОПолные КАК ФизЛицо,
		//|		Председатель КАК Председатель
		//|	) КАК ИнвентаризационнаяКомиссия,
		//|	Инвентаризация.СчетаУчета.(
		//|		СчетУчета
		//|	),
		//|	Инвентаризация.Задолженность.(
		//|		ДебиторКредитор КАК Контрагент,
		//|		ВидЗадолженности,
		//|		СчетРасчетов,
		//|		Подтверждено,
		//|		НеПодтверждено,
		//|		ИстекСрокДавности,
		//|		ВИЛС_Договор КАК ДоговорКонтрагента
		//|	)
		//|ИЗ 
		//|	Документ.ИнвентаризацияРасчетов КАК Инвентаризация
		//|ГДЕ
		//|	Инвентаризация.Ссылка = &Ссылка
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Инвентаризация.ИнвентаризационнаяКомиссия.НомерСтроки";
		
		Запрос.УстановитьПараметр("КонПериода", 		Новый Граница(ДатаДокументаИнветаризации, ВидГраницы.Включая));
		//Запрос.УстановитьПараметр("Контрагент", 		Контрагент);  
		//Запрос.УстановитьПараметр("Договор", 			ДоговорКонтрагента);
		//Запрос.УстановитьПараметр("Организация", 		Организация);
		//Запрос.УстановитьПараметр("ВТБ_Факторинг", 		Справочники.Контрагенты.НайтиПоКоду("00-000000044"));
		//Запрос.УстановитьПараметр("Транскапиталбанк",	Справочники.Контрагенты.НайтиПоКоду("00-000000044")); 
		//ВидыСубконто = Новый Массив();
		//ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		//Запрос.УстановитьПараметр("ВидыСубконто", 	ВидыСубконто);
		Запрос.УстановитьПараметр("КонПериода1", 		Новый Граница(ДатаДокументаИнветаризации, ВидГраницы.Включая));
		
		ПакетЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		ВыборкаШапка = ПакетЗапросов[0].Выбрать();
		Если НЕ ВыборкаШапка.Следующий() Тогда
			Возврат ТабДокумент;
		КонецЕсли;
		
		ВыборкаДокументов = ПакетЗапросов[4].Выгрузить();
		
		Макет = ПолучитьМакет("ПФ_MXL_РеестрДебиторскойЗадолженностиПриложение_7_1");
		Область = Макет.ПолучитьОбласть("Шапка");
				
		ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаШапка);
		
		//СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаШапка.Организация, ДатаДокументаИнветаризации);
		//Область.Параметры.Организация = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование, ЮридическийАдрес,Телефоны");
		
		Область.Параметры.Дата  = Формат(ДатаДокументаИнветаризации, "ДФ=dd.MM.yyyy");	
		
		ТабДокумент.Вывести(Область);
		ТабДокумент.ФиксацияСверху = 5;
		
		//#ЕСЛИ КЛИЕНТ ТОГДА
		//	Состояние("Формируем справку");                              
		//#КОНЕЦЕСЛИ
		
		НПП 					= 1;
		СуммаДЗБезРезерваИтого 	= 0;
		СуммаРезерва 			= 0;  
		СуммаРезерваИтого 		= 0; 
		СуммаДЗСРезервомИтого	= 0;
		Колонка12ЧИтого         = 0;
		Колонка13ЧИтого         = 0;
		Колонка14ЧИтого         = 0;
		Колонка15ЧИтого         = 0;
		Колонка16ЧИтого         = 0;
		Колонка17ЧИтого         = 0;
		СуммаРезерваНУЧ         = 0;
		СуммаРезерваНУЧИтого    = 0;
		
		СуммаДЗБезРезерваПоСчетуИтого 	= 0;
		//СуммаРезерва 			= 0;  
		СуммаРезерваПоСчетуИтого 		= 0; 
		СуммаДЗСРезервомПоСчетуИтого	= 0;
		Колонка12ЧПоСчетуИтого         = 0;
		Колонка13ЧПоСчетуИтого         = 0;
		Колонка14ЧПоСчетуИтого         = 0;
		Колонка15ЧПоСчетуИтого         = 0;
		Колонка16ЧПоСчетуИтого         = 0;
		Колонка17ЧПоСчетуИтого         = 0;
		//СуммаРезерваНУЧ         = 0;
		СуммаРезерваНУЧПоСчетуИтого    = 0;
		
		//ТЗПечать = ВыборкаШапка.Задолженность.Выгрузить();
		ВыборкаЗадолженность = ПакетЗапросов[1].Выбрать();
		Выборка_3 			 = ПакетЗапросов[3].Выбрать();
		//ТЗПечать.Сортировать("СчетРасчетов, Контрагент, ВидЗадолженности");
		//СтрокиТЗ = ТЗПечать.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ТипыЗадолженности.Дебиторская));
		
		МассивСтрокПоСчету = Новый Массив();
		ТекущийСчет = Неопределено;
		
		//Для каждого СтрокаТЗ из СтрокиТЗ цикл
		Пока ВыборкаЗадолженность.Следующий() Цикл
			//Если Не СтрокаТЗ.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда Продолжить; КонецЕсли;
			Если ТекущийСчет = Неопределено и ЗначениеЗаполнено(ВыборкаЗадолженность.СчетРасчетов.Родитель.Родитель) Тогда
				ТекущийСчет = ВыборкаЗадолженность.СчетРасчетов.Родитель.Родитель;
			ИначеЕсли ТекущийСчет = Неопределено и ЗначениеЗаполнено(ВыборкаЗадолженность.СчетРасчетов.Родитель) Тогда
				ТекущийСчет = ВыборкаЗадолженность.СчетРасчетов.Родитель;
			ИначеЕсли ТекущийСчет = Неопределено Тогда
				ТекущийСчет = ВыборкаЗадолженность.СчетРасчетов;	
			ИначеЕсли ЗначениеЗаполнено(ВыборкаЗадолженность.СчетРасчетов.Родитель.Родитель) и Не ТекущийСчет = ВыборкаЗадолженность.СчетРасчетов.Родитель.Родитель
					или ЗначениеЗаполнено(ВыборкаЗадолженность.СчетРасчетов.Родитель) и Не ТекущийСчет = ВыборкаЗадолженность.СчетРасчетов.Родитель 
					или Не ЗначениеЗаполнено(ВыборкаЗадолженность.СчетРасчетов.Родитель) и Не ТекущийСчет = ВыборкаЗадолженность.СчетРасчетов Тогда
				Если ТекущийСчет.ЗапретитьИспользоватьВПроводках Тогда
					ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету");
					ОбластьСтрока.Параметры.Итого			 	= "Итого по счету: " + ТекущийСчет;
					ОбластьСтрока.Параметры.СуммаДЗБезРезерва 	= СуммаДЗБезРезерваПоСчетуИтого;
					ОбластьСтрока.Параметры.СуммаРезерва		= СуммаРезерваПоСчетуИтого;
					ОбластьСтрока.Параметры.СуммаДЗСРезервом	= СуммаДЗСРезервомПоСчетуИтого;
					ОбластьСтрока.Параметры.Колонка12Ч			= Колонка12ЧПоСчетуИтого;
					ОбластьСтрока.Параметры.Колонка13Ч			= Колонка13ЧПоСчетуИтого;
					ОбластьСтрока.Параметры.Колонка14Ч			= Колонка14ЧПоСчетуИтого;
					ОбластьСтрока.Параметры.Колонка15Ч			= Колонка15ЧПоСчетуИтого;
					ОбластьСтрока.Параметры.Колонка16Ч			= Колонка16ЧПоСчетуИтого;
					ОбластьСтрока.Параметры.Колонка17Ч			= Колонка17ЧПоСчетуИтого;
					ОбластьСтрока.Параметры.СуммаРезерваНУ		= СуммаРезерваНУЧПоСчетуИтого;
					ТабДокумент.Вывести(ОбластьСтрока);
					ТабДокумент.НачатьГруппуСтрок("ИтогоПоСчету" + ТекущийСчет, Ложь);
				КонецЕсли; 	
				ГруппировкаВыводилась = Ложь;
				Для Инд = 0 По МассивСтрокПоСчету.Количество() - 1 Цикл
					Если МассивСтрокПоСчету[Инд].Параметры.Количество() = 22
						и ГруппировкаВыводилась Тогда
						ТабДокумент.ЗакончитьГруппуСтрок();
						ГруппировкаВыводилась = Ложь;
					КонецЕсли; 
					ТабДокумент.Вывести(МассивСтрокПоСчету[Инд]);
					Если МассивСтрокПоСчету[Инд].Параметры.Количество() = 22
						и Не ГруппировкаВыводилась Тогда
						ТабДокумент.НачатьГруппуСтрок("ИтогоПодоговору" + МассивСтрокПоСчету[Инд].Параметры.ДоговорКонтрагента, Ложь);
						ГруппировкаВыводилась = Истина;
					КонецЕсли;
				КонецЦикла;
				Если ГруппировкаВыводилась Тогда
					ТабДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекущийСчет) и ТекущийСчет.ЗапретитьИспользоватьВПроводках Тогда
					ТабДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;	
				МассивСтрокПоСчету.Очистить();
				СуммаДЗБезРезерваПоСчетуИтого 	= 0;
				СуммаРезерваПоСчетуИтого		= 0; 
				СуммаДЗСРезервомПоСчетуИтого	= 0;
				Колонка12ЧПоСчетуИтого         	= 0;
				Колонка13ЧПоСчетуИтого         	= 0;
				Колонка14ЧПоСчетуИтого         	= 0;
				Колонка15ЧПоСчетуИтого         	= 0;
				Колонка16ЧПоСчетуИтого         	= 0;
				Колонка17ЧПоСчетуИтого         	= 0;
				СуммаРезерваНУЧПоСчетуИтого    	= 0;
				Если ЗначениеЗаполнено(ВыборкаЗадолженность.СчетРасчетов.Родитель.Родитель) и Не ТекущийСчет = ВыборкаЗадолженность.СчетРасчетов.Родитель.Родитель Тогда
					ТекущийСчет = ВыборкаЗадолженность.СчетРасчетов.Родитель.Родитель;
				ИначеЕсли ЗначениеЗаполнено(ВыборкаЗадолженность.СчетРасчетов.Родитель) и Не ТекущийСчет = ВыборкаЗадолженность.СчетРасчетов.Родитель Тогда
					ТекущийСчет = ВыборкаЗадолженность.СчетРасчетов.Родитель;
				ИначеЕсли Не ЗначениеЗаполнено(ВыборкаЗадолженность.СчетРасчетов.Родитель) и Не ТекущийСчет = ВыборкаЗадолженность.СчетРасчетов Тогда
					ТекущийСчет = ВыборкаЗадолженность.СчетРасчетов;
				КонецЕсли;	
			КонецЕсли; 
			
			СписокСтрокПоТекущейЗадолженности1 = Новый Массив();
			МассивСчетов = Новый Массив();
			МассивСчетов.Добавить(ВыборкаЗадолженность.СчетРасчетов);
			Если ЗначениеЗаполнено(ВыборкаЗадолженность.ДоговорКонтрагента) Тогда
				Если ВыборкаЗадолженность.ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
					и ВыборкаЗадолженность.СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
					МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
					СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаЗадолженность.Контрагент, ВыборкаЗадолженность.ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
					СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
				ИначеЕсли ВыборкаЗадолженность.ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
					и ВыборкаЗадолженность.СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками Тогда
					МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
					СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаЗадолженность.Контрагент, ВыборкаЗадолженность.ДоговорКонтрагента, ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
					СписокСтрокПоТекущейЗадолженности1 = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
				КонецЕсли; 
			КонецЕсли;
			//СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаЗадолженность.Контрагент, ВыборкаЗадолженность.ДоговорКонтрагента, МассивСчетов);
			СтруктураПоиска = Новый Структура("ДебиторКредитор, ВИЛС_Договор, Счет", ВыборкаЗадолженность.Контрагент, ВыборкаЗадолженность.ДоговорКонтрагента, ВыборкаЗадолженность.СчетРасчетов);
			СписокСтрокПоТекущейЗадолженности = ВыборкаДокументов.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрокПоТекущейЗадолженности1.Количество() Тогда
				Для Каждого СтрокаТЗТЗ Из СписокСтрокПоТекущейЗадолженности1 Цикл
					Если СписокСтрокПоТекущейЗадолженности.Найти(СтрокаТЗТЗ) = Неопределено Тогда
						СписокСтрокПоТекущейЗадолженности.Добавить(СтрокаТЗТЗ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			
			Выборка_3.Сбросить();
			
			ДанныеОДок = ПолучитьДанныеСтроки_180511(СписокСтрокПоТекущейЗадолженности, Выборка_3, Новый граница(ДатаДокументаИнветаризации, ВидГраницы.Включая), Новый граница(ДатаДокументаИнветаризации, ВидГраницы.Включая), ВыборкаЗадолженность.Контрагент, ВыборкаЗадолженность.СчетРасчетов, ВыборкаШапка.Организация, ВыборкаЗадолженность.ДоговорКонтрагента, "Дт", (ВыборкаЗадолженность.Подтверждено + ВыборкаЗадолженность.НеПодтверждено));
			
			ТЗДляСтруктуры = ДанныеОДок.ТЗДляСтруктуры;
			КоличествоСтрокТЗДляСтруктуры = ТЗДляСтруктуры.Количество();
			Если КоличествоСтрокТЗДляСтруктуры = 0 Тогда Продолжить; КонецЕсли; 
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Заполнить(ДанныеОДок);
			//ОбластьСтрока.Параметры.НомерСтроки = НПП;
			НПП = НПП + 1;
			
			СведенияОбКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаЗадолженность.Контрагент, ДатаДокументаИнветаризации);
			КонтраНаим = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование, ЮридическийАдрес, Телефоны");
			
			ОбластьСтрока.Параметры.НаименованиеСтр = КонтраНаим;
			ОбластьСтрока.Параметры.Счет = ВыборкаЗадолженность.СчетРасчетов;
			ОбластьСтрока.Параметры.НомерДоговора = ?(ЗначениеЗаполнено(ВыборкаЗадолженность.ДоговорКонтрагента),?(ЗначениеЗаполнено(ВыборкаЗадолженность.ДоговорКонтрагента.Номер), ВыборкаЗадолженность.ДоговорКонтрагента.Номер, ВыборкаЗадолженность.ДоговорКонтрагента.Наименование), "б.н.");
			ОбластьСтрока.Параметры.ДатаДоговора = ?(ЗначениеЗаполнено(ВыборкаЗадолженность.ДоговорКонтрагента),ВыборкаЗадолженность.ДоговорКонтрагента.Дата, Дата(1,1,1,0,0,0));
			ОбластьСтрока.Параметры.ИНН = ВыборкаЗадолженность.Контрагент.ИНН;
			
			ОбластьСтрока.Параметры.ДатаДолга = ТЗДляСтруктуры[КоличествоСтрокТЗДляСтруктуры - 1].ДатаДок;
			
			СуммаДЗБезРезерва 							= ВыборкаЗадолженность.Подтверждено + ВыборкаЗадолженность.НеПодтверждено;
			Если СуммаДЗБезРезерва = 0 Тогда Продолжить; КонецЕсли;
			СуммаРезерва 								= ДанныеОДок.СуммаРезерва;
			СуммаДЗСРезервом                           	= СуммаДЗБезРезерва - СуммаРезерва;
			ОбластьСтрока.Параметры.СуммаДЗБезРезерва 	= СуммаДЗБезРезерва;
			ОбластьСтрока.Параметры.СуммаРезерва        = СуммаРезерва;
			ОбластьСтрока.Параметры.СуммаДЗСРезервом 	= СуммаДЗСРезервом;
			
			ОбластьСтрока.Параметры.Колонка12Ч = 0;
			ОбластьСтрока.Параметры.Колонка13Ч = 0;
			ОбластьСтрока.Параметры.Колонка14Ч = 0;
			ОбластьСтрока.Параметры.Колонка15Ч = 0;
			ОбластьСтрока.Параметры.Колонка16Ч = 0; 
			ОбластьСтрока.Параметры.Колонка17Ч = 0;
			Для каждого СтрТЗ Из ТЗДляСтруктуры Цикл
				ОбластьСтрока.Параметры.Колонка12Ч = ОбластьСтрока.Параметры.Колонка12Ч + СтрТЗ.Колонка12;
				ОбластьСтрока.Параметры.Колонка13Ч = ОбластьСтрока.Параметры.Колонка13Ч + СтрТЗ.Колонка13;
				ОбластьСтрока.Параметры.Колонка14Ч = ОбластьСтрока.Параметры.Колонка14Ч + СтрТЗ.Колонка14;
				ОбластьСтрока.Параметры.Колонка15Ч = ОбластьСтрока.Параметры.Колонка15Ч + СтрТЗ.Колонка15;
				ОбластьСтрока.Параметры.Колонка16Ч = ОбластьСтрока.Параметры.Колонка16Ч + СтрТЗ.Колонка16;
				ОбластьСтрока.Параметры.Колонка17Ч = ОбластьСтрока.Параметры.Колонка17Ч + СтрТЗ.Колонка17;
			КонецЦикла;
			
			Если 	Не ?(ОбластьСтрока.Параметры.СуммаДЗБезРезерва  = Неопределено, 0, ОбластьСтрока.Параметры.СуммаДЗБезРезерва) = 0 
				или Не ?(ОбластьСтрока.Параметры.СуммаРезерва  		= Неопределено, 0, ОбластьСтрока.Параметры.СуммаРезерва) = 0
				или Не ?(ОбластьСтрока.Параметры.СуммаДЗСРезервом  	= Неопределено, 0, ОбластьСтрока.Параметры.СуммаДЗСРезервом) = 0
				или Не ?(ОбластьСтрока.Параметры.Колонка12Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка12Ч) = 0
				или Не ?(ОбластьСтрока.Параметры.Колонка13Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка13Ч) = 0
				или Не ?(ОбластьСтрока.Параметры.Колонка14Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка14Ч) = 0
				или Не ?(ОбластьСтрока.Параметры.Колонка15Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка15Ч) = 0
				или Не ?(ОбластьСтрока.Параметры.Колонка16Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка16Ч) = 0
				или Не ?(ОбластьСтрока.Параметры.Колонка17Ч  		= Неопределено, 0, ОбластьСтрока.Параметры.Колонка17Ч) = 0
				или Не ?(ОбластьСтрока.Параметры.СуммаРезерваНУ  	= Неопределено, 0, ОбластьСтрока.Параметры.СуммаРезерваНУ) = 0
				Тогда
				МассивСтрокПоСчету.Добавить(ОбластьСтрока);
			Иначе
				Продолжить;
			КонецЕсли;
			
			Колонка12ЧИтого 		= Колонка12ЧИтого 			+ ОбластьСтрока.Параметры.Колонка12Ч;
			Колонка12ЧПоСчетуИтого 	= Колонка12ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка12Ч;
			Колонка13ЧИтого 		= Колонка13ЧИтого 			+ ОбластьСтрока.Параметры.Колонка13Ч;	
			Колонка13ЧПоСчетуИтого 	= Колонка13ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка13Ч;
			Колонка14ЧИтого 		= Колонка14ЧИтого 			+ ОбластьСтрока.Параметры.Колонка14Ч;
			Колонка14ЧПоСчетуИтого 	= Колонка14ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка14Ч;
			Колонка15ЧИтого 		= Колонка15ЧИтого 			+ ОбластьСтрока.Параметры.Колонка15Ч;
			Колонка15ЧПоСчетуИтого 	= Колонка15ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка15Ч;
			Колонка16ЧИтого 		= Колонка16ЧИтого 			+ ОбластьСтрока.Параметры.Колонка16Ч;
			Колонка16ЧПоСчетуИтого 	= Колонка16ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка16Ч;
			Колонка17ЧИтого 		= Колонка17ЧИтого 			+ ОбластьСтрока.Параметры.Колонка17Ч;	
			Колонка17ЧПоСчетуИтого 	= Колонка17ЧПоСчетуИтого 	+ ОбластьСтрока.Параметры.Колонка17Ч;
			
			СуммаДЗБезРезерваИтого 	= СуммаДЗБезРезерваИтого + СуммаДЗБезРезерва; 
			СуммаДЗБезРезерваПоСчетуИтого 	= СуммаДЗБезРезерваПоСчетуИтого + СуммаДЗБезРезерва;
			СуммаРезерваИтого 		= СуммаРезерваИтого + СуммаРезерва;
			СуммаРезерваПоСчетуИтого 		= СуммаРезерваПоСчетуИтого + СуммаРезерва;
			СуммаДЗСРезервомИтого 	= СуммаДЗСРезервомИтого + СуммаДЗСРезервом;
			СуммаДЗСРезервомПоСчетуИтого 	= СуммаДЗСРезервомПоСчетуИтого + СуммаДЗСРезервом;
			
			СуммаРезерваНУЧПоСчетуИтого = СуммаРезерваНУЧПоСчетуИтого + СуммаРезерваНУЧ;
			
			Для каждого СтрокаТЗДляСтруктуры Из ТЗДляСтруктуры Цикл
				ОбластьСтрокаД = Макет.ПолучитьОбласть("СтрокаДетальная");
				ОбластьСтрокаД.Параметры.ДатаДолга 	= СтрокаТЗДляСтруктуры.ДатаДок;
				ОбластьСтрокаД.Параметры.ЗаЧто 		= СтрокаТЗДляСтруктуры.ЗаЧто;
				ОбластьСтрокаД.Параметры.Регистратор= СтрокаТЗДляСтруктуры.Регистратор;
				ОбластьСтрокаД.Параметры.Колонка12Ч = СтрокаТЗДляСтруктуры.Колонка12;
				ОбластьСтрокаД.Параметры.Колонка13Ч = СтрокаТЗДляСтруктуры.Колонка13;
				ОбластьСтрокаД.Параметры.Колонка14Ч = СтрокаТЗДляСтруктуры.Колонка14;
				ОбластьСтрокаД.Параметры.Колонка15Ч = СтрокаТЗДляСтруктуры.Колонка15;
				ОбластьСтрокаД.Параметры.Колонка16Ч = СтрокаТЗДляСтруктуры.Колонка16;
				ОбластьСтрокаД.Параметры.Колонка17Ч = СтрокаТЗДляСтруктуры.Колонка17;
				МассивСтрокПоСчету.Добавить(ОбластьСтрокаД);
			КонецЦикла;
			
		КонецЦикла;	
		
		Если ЗначениеЗаполнено(ТекущийСчет) и ТекущийСчет.ЗапретитьИспользоватьВПроводках Тогда
			ОбластьСтрока = Макет.ПолучитьОбласть("ИтогоПоСчету");
			ОбластьСтрока.Параметры.Итого			 	= "Итого по счету: " + ТекущийСчет;
			ОбластьСтрока.Параметры.СуммаДЗБезРезерва 	= СуммаДЗБезРезерваПоСчетуИтого;
			ОбластьСтрока.Параметры.СуммаРезерва		= СуммаРезерваПоСчетуИтого;
			ОбластьСтрока.Параметры.СуммаДЗСРезервом	= СуммаДЗСРезервомПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка12Ч			= Колонка12ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка13Ч			= Колонка13ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка14Ч			= Колонка14ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка15Ч			= Колонка15ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка16Ч			= Колонка16ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.Колонка17Ч			= Колонка17ЧПоСчетуИтого;
			ОбластьСтрока.Параметры.СуммаРезерваНУ		= СуммаРезерваНУЧПоСчетуИтого;
			ТабДокумент.Вывести(ОбластьСтрока);
			ТабДокумент.НачатьГруппуСтрок("ИтогоПоСчету" + ТекущийСчет, Ложь);
		КонецЕсли; 	
		ГруппировкаВыводилась = Ложь;
		Для Инд = 0 По МассивСтрокПоСчету.Количество() - 1 Цикл
			Если МассивСтрокПоСчету[Инд].Параметры.Количество() = 22
				и ГруппировкаВыводилась Тогда
				ТабДокумент.ЗакончитьГруппуСтрок();
				ГруппировкаВыводилась = Ложь;
			КонецЕсли; 
			ТабДокумент.Вывести(МассивСтрокПоСчету[Инд]);
			Если МассивСтрокПоСчету[Инд].Параметры.Количество() = 22
				и Не ГруппировкаВыводилась Тогда
				ТабДокумент.НачатьГруппуСтрок("ИтогоПодоговору" + МассивСтрокПоСчету[Инд].Параметры.ДоговорКонтрагента, Ложь);
				ГруппировкаВыводилась = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ГруппировкаВыводилась Тогда
			ТабДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущийСчет) и ТекущийСчет.ЗапретитьИспользоватьВПроводках Тогда
			ТабДокумент.ЗакончитьГруппуСтрок();
		КонецЕсли;		
		ОблИтого = Макет.ПолучитьОбласть("Итого");
		ОблИтого.Параметры.Итого			 = "Итого:";
		ОблИтого.Параметры.СуммаДЗБезРезерва = формат(СуммаДЗБезРезерваИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.СуммаРезерва 	 = формат(СуммаРезерваИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.СуммаДЗСРезервом  = формат(СуммаДЗСРезервомИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка12Ч 	 	 = формат(Колонка12ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка13Ч 	 	 = формат(Колонка13ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка14Ч 	 	 = формат(Колонка14ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка15Ч 	 	 = формат(Колонка15ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка16Ч 	 	 = формат(Колонка16ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.Колонка17Ч 	 	 = формат(Колонка17ЧИтого, "ЧЦ=15; ЧДЦ=2");
		ОблИтого.Параметры.СуммаРезерваНУ	 = формат(СуммаРезерваНУЧИтого, "ЧЦ=15; ЧДЦ=2");
		ТабДокумент.Вывести(ОблИтого);
		//ОблПод = Макет.ПолучитьОбласть("Подвал");
		//Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ВыборкаШапка.Организация, ДатаДокументаИнветаризации,);
		//ОблПод.Параметры.Бухгалтер    = Руководители.ГлавныйБухгалтер;
		//ТабДокумент.Вывести(ОблПод);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаОбъекта);
	КонецЦикла;
	Возврат ТабДокумент;
КонецФункции // ПечатьРеестрДебиторскойЗадолженностиПриложение_7_1()

Функция ПолучитьДанныеСтроки_180511(Знач СписокСтрокПоТекущейЗадолженности, Знач Выборка_3, Знач КонПериода, Знач КонПериода1, Знач Контрагент, Знач Счет, Знач Организация, Знач ДоговорКонтрагента, Знач ДтКт = "Дт", Знач Задолженность, Знач Просроченная = Ложь, Знач ДанныеОДокПросроч = Неопределено)
	//Задолженность = ДанныеОДокПросроч.КонПериодаТекМ;
	СтруктураСтроки = Новый Структура;     //Просроченная 
	
    //Запрос = Новый Запрос;
	//ВидыСубконто = Новый Массив();
	//ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	//Если Счет = ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов Тогда 
	//	Запрос.Текст =         	
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//	|	ХозрасчетныйОбороты.Счет КАК Счет,
	//	|	ХозрасчетныйОбороты.Период КАК Период,
	//	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	//	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	//	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	//	|	ХозрасчетныйОбороты.ПроверятьГалочку КАК ПроверятьГалочку,
	//	|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК СуммаОборот,
	//	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	//	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
	//	|ИЗ
	//	|	(ВЫБРАТЬ
	//	|		ХозрасчетныйОбороты.Счет КАК Счет,
	//	|		ХозрасчетныйОбороты.Период КАК Период,
	//	|		ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	//	|		ХозрасчетныйОбороты.СуммаОборот КАК СуммаОборот,
	//	|		ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	//	|		ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
	//	|		ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
	//	|		ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	//	|		ВЫБОР
	//	|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
	//	|				ТОГДА ""Деньги""
	//	|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
	//	|				ТОГДА ""Деньги""
	//	|			КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	//	|				ТОГДА ""Деньги""
	//	|			ИНАЧЕ ""Поставка""
	//	|		КОНЕЦ КАК ПроверятьГалочку
	//	|	ИЗ
	//	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	//	|				,
	//	|				&КонПериода,
	//	|				Регистратор,
	//	|				Счет В (&Счета),
	//	|				&ВидыСубконто,
	//	|				Субконто1 = &Контрагент
	//	|					И Организация = &Организация,
	//	|				,
	//	|				) КАК ХозрасчетныйОбороты) КАК ХозрасчетныйОбороты
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ХозрасчетныйОбороты.Счет,
	//	|	ХозрасчетныйОбороты.Субконто2,
	//	|	ХозрасчетныйОбороты.ПроверятьГалочку,
	//	|	ХозрасчетныйОбороты.Период,
	//	|	ХозрасчетныйОбороты.Субконто1,
	//	|	ХозрасчетныйОбороты.Регистратор
	//	|
	//	//|УПОРЯДОЧИТЬ ПО
	//	//|	ХозрасчетныйОбороты.Период
	//	|ИТОГИ
	//	|	СУММА(СуммаОборот)
	//	|ПО
	//	|	Счет
	//	|";
	//	
	//Иначе	
		//Запрос.Текст = "
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	Т.Регистратор КАК Регистратор,
		//|	МАКСИМУМ(Т.ЕстьУслуги) КАК ЕстьУслуги
		//|ПОМЕСТИТЬ РегистраторыСУслугами
		//|ИЗ(
		//|	ВЫБРАТЬ
		//|		Т.Ссылка КАК Регистратор,
		//|   	ВЫБОР 
		//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
		//|   			ТОГДА ИСТИНА
		//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
		//|   			ТОГДА ИСТИНА
		//|  	    	ИНАЧЕ ЛОЖЬ
		//|		КОНЕЦ КАК ЕстьУслуги
		//|	ИЗ
		//|		Документ.ПриобретениеТоваровУслуг.ВидыЗапасов КАК Т
		//|	ОБЪЕДИНИТЬ ВСЕ
		//|	ВЫБРАТЬ
		//|		Т.Ссылка КАК Регистратор,
		//|   	ВЫБОР 
		//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
		//|   			ТОГДА ИСТИНА
		//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
		//|   			ТОГДА ИСТИНА
		//|  	    	ИНАЧЕ ЛОЖЬ
		//|		КОНЕЦ КАК ЕстьУслуги
		//|	ИЗ
		//|		Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК Т 
		//|	ОБЪЕДИНИТЬ ВСЕ
		//|	ВЫБРАТЬ
		//|		Т.Ссылка КАК Регистратор,
		//|   	ВЫБОР 
		//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
		//|   			ТОГДА ИСТИНА
		//|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
		//|   			ТОГДА ИСТИНА
		//|  	    	ИНАЧЕ ЛОЖЬ
		//|		КОНЕЦ КАК ЕстьУслуги
		//|	ИЗ
		//|		Документ.ПоступлениеТоваров.ВидыЗапасов  КАК Т) КАК Т
		//|СГРУППИРОВАТЬ
		//|ПО 
		//|	Т.Регистратор
		//|;
		//|///////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		//|	ХозрасчетныйОбороты.ДебиторКредитор КАК ДебиторКредитор,
		//|	ХозрасчетныйОбороты.ВИЛС_Договор КАК ВИЛС_Договор,
		//|	ХозрасчетныйОбороты.ЕстьУслуги,
		//|	ХозрасчетныйОбороты.Период КАК Период,
		//|	ХозрасчетныйОбороты.Счет КАК Счет,
		//|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
		//|	ХозрасчетныйОбороты.ПроверятьГалочку КАК ПроверятьГалочку,
		//|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК СуммаОборот,
		//|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
		//|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
		//|ИЗ
		//|	(ВЫБРАТЬ
		//
		//|	ВЫБОР
		//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		//|			ТОГДА ХозрасчетныйОбороты.Субконто1
		//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		//|			ТОГДА ХозрасчетныйОбороты.Субконто1
		//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		//|			ТОГДА ХозрасчетныйОбороты.Субконто1
		//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
		//|			ТОГДА ХозрасчетныйОбороты.Субконто2
		//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
		//|			ТОГДА ХозрасчетныйОбороты.Субконто3
		//|		ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
		//|	КОНЕЦ КАК ДебиторКредитор,
		//|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
		//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		//|			ТОГДА ХозрасчетныйОбороты.Субконто2
		//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		//|			ТОГДА ХозрасчетныйОбороты.Субконто3
		//|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		//|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17
		//
		//|		ХозрасчетныйОбороты.Период КАК Период,
		//|		ХозрасчетныйОбороты.Счет КАК Счет,
		//|		ХозрасчетныйОбороты.Регистратор КАК Регистратор,
		//|		ХозрасчетныйОбороты.СуммаОборот КАК СуммаОборот,
		//|		ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		//|		ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		//|		ВЫБОР
		//|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
		//|				ТОГДА ""Деньги""
		//|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
		//|				ТОГДА ""Деньги""
		//|			КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
		//|				ТОГДА ""Деньги""
		//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
		//|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками))
		//|				ТОГДА ""Деньги""
		//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
		//|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
		//|				ТОГДА ""Деньги""
		//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
		//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы)
		//|				ТОГДА ""Деньги""
		//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
		//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
		//|					И ХозрасчетныйОбороты.КорСубконто1 = &ВТБ_Факторинг
		//|				ТОГДА ""Деньги""
		//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
		//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
		//|					И ХозрасчетныйОбороты.КорСубконто1 = &Транскапиталбанк
		//|				ТОГДА ""Деньги""
		//|			ИНАЧЕ ""Поставка""
		//|		КОНЕЦ КАК ПроверятьГалочку,
		//|		РегистраторыСУслугами.ЕстьУслуги КАК ЕстьУслуги
		//|	ИЗ
		//|		РегистрБухгалтерии.Хозрасчетный.Обороты(
		//|				,
		//|				&КонПериода,
		//|				Регистратор,
		//|				Счет В (&Счета),
		//|				,//&ВидыСубконто,
		//|				Организация = &Организация

		//|	И ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
		//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		//|			ТОГДА Субконто1
		//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		//|			ТОГДА Субконто1
		//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		//|			ТОГДА Субконто1
		//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
		//|			ТОГДА Субконто2
		//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
		//|			ТОГДА Субконто3
		//|		ИНАЧЕ NULL
		//|	КОНЕЦ = &Контрагент	//В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДебиторКредитор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая)
		//|	И ВЫБОР
		//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		//|			ТОГДА Субконто2
		//|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		//|			ТОГДА Субконто3
		//|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		//|	КОНЕЦ = &Договор	//В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ВИЛС_Договор ИЗ ЗадолженностьНовая КАК ЗадолженностьНовая) 		
		//|,
		//|				,
		//|				) КАК ХозрасчетныйОбороты
		//|    ЛЕВОЕ СОЕДИНЕНИЕ РегистраторыСУслугами
		//|    	ПО ХозрасчетныйОбороты.Регистратор = РегистраторыСУслугами.Регистратор
		//|											) КАК ХозрасчетныйОбороты
		//|
		//|СГРУППИРОВАТЬ ПО
		//
		//|	ХозрасчетныйОбороты.ДебиторКредитор,
		//|	ХозрасчетныйОбороты.ВИЛС_Договор, // fix Suetin 17.01.2019 12:58:17
		//|	ХозрасчетныйОбороты.ЕстьУслуги,   // fix Suetin 25.03.2019 18:45:23
		//|	ХозрасчетныйОбороты.Регистратор,
		//|	ХозрасчетныйОбороты.Период,
		//|	ХозрасчетныйОбороты.Счет,
		//|	ХозрасчетныйОбороты.ПроверятьГалочку
		//|
		////|УПОРЯДОЧИТЬ ПО
		////|	ХозрасчетныйОбороты.Период
		//|ИТОГИ
		//|	СУММА(СуммаОборот)
		//|ПО
		//|	Счет
		//|";
	//	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	//КонецЕсли;	
	//Запрос.УстановитьПараметр("КонПериода", 		КонПериода);
	//Запрос.УстановитьПараметр("Контрагент", 		Контрагент);  
	//Запрос.УстановитьПараметр("Договор", 			ДоговорКонтрагента);
	//Запрос.УстановитьПараметр("Организация", 		Организация);
	//Запрос.УстановитьПараметр("ВТБ_Факторинг", 		Справочники.Контрагенты.НайтиПоКоду("00-000000044"));
	//Запрос.УстановитьПараметр("Транскапиталбанк",	Справочники.Контрагенты.НайтиПоКоду("00-000000044"));   
	////Запрос.УстановитьПараметр("ВидыСубконто", 		ВидыСубконто);
	//МассивСчетов = Новый Массив();
	//МассивСчетов.Добавить(Счет);
	//Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
	//	Если ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
	//		и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
	//		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	//	ИначеЕсли ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса          // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
	//		и Счет = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками Тогда
	//		МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
	//	КонецЕсли; 
	//КонецЕсли;	
	//Запрос.УстановитьПараметр("Счета", 				МассивСчетов);
	
	//Результат = Запрос.Выполнить();
	//Результат = ПакетЗапросов[4].Выбрать();	
	СальдоТекущееФ = 0;                                                     
	//ТаблицаИтогов = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Для каждого СтрокаТЗИ Из ТаблицаИтогов.Строки Цикл          
	
	ТаблицаСФлагами = Новый ТаблицаЗначений();//Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Колонки = ТаблицаСФлагами.Колонки;
	Колонки.Добавить("ВИЛС_Договор"		, Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Колонки.Добавить("ДебиторКредитор"	, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Колонки.Добавить("ЕстьУслуги"		, Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Период"			, Новый ОписаниеТипов("Дата"));
	Колонки.Добавить("ПроверятьГалочку"	, Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("Регистратор");
	Колонки.Добавить("СуммаОборот"		, Новый ОписаниеТипов("Число"));   
	Колонки.Добавить("СуммаОборотДт"	, Новый ОписаниеТипов("Число"));      
	Колонки.Добавить("СуммаОборотКт"	, Новый ОписаниеТипов("Число"));
	Колонки.Добавить("Счет"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Для каждого СтрокаТЗИ Из СписокСтрокПоТекущейЗадолженности Цикл
		СтрокаТЗТЗ = ТаблицаСФлагами.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗТЗ, СтрокаТЗИ);
		Если Не Счет = СтрокаТЗИ.Счет Тогда Продолжить; КонецЕсли;	
		СуммаДолгаПоДоговору = ?(СтрокаТЗИ.СуммаОборот = 0, Задолженность, ?(ДтКт = "Дт", СтрокаТЗИ.СуммаОборот, - СтрокаТЗИ.СуммаОборот)); 
		//Прервать;
	КонецЦикла;	
	
	
	ПараметрыОтбора = Новый Структура("Регистратор", Null);
	ЛишниеСтроки = ТаблицаСФлагами.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ЛишняяСтрока Из ЛишниеСтроки Цикл
		ТаблицаСФлагами.Удалить(ЛишняяСтрока);
	КонецЦикла; 
	ТаблицаСФлагами.Сортировать("Период Возр");
	ТаблицаСФлагами.Колонки.Добавить("Флаг", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1)));
	ТаблицаСФлагами.Колонки.Добавить("СуммаДолгаПоДоговору", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	Для каждого СтрокаТЗФ Из ТаблицаСФлагами Цикл
		//Если Не ЗначениеЗаполнено(СтрокаТЗФ.Регистратор) Тогда
		//	Если Не Счет = СтрокаТЗФ.Счет Тогда Продолжить; КонецЕсли;	
		//	//СуммаДолгаПоДоговору = ?(СтрокаТЗФ.СуммаОборот = 0, (ДанныеОДокПросроч.КонПериода2М - ДанныеОДокПросроч.КонПериода1М + ДанныеОДокПросроч.КонПериода1М - Задолженность), СтрокаТЗФ.СуммаОборот);  
		//	СуммаДолгаПоДоговору = ?(СтрокаТЗФ.СуммаОборот = 0, Задолженность, ?(ДтКт = "Дт", СтрокаТЗФ.СуммаОборот, - СтрокаТЗФ.СуммаОборот)); 
		//	Отрицательная = СуммаДолгаПоДоговору < 0;
		//	Продолжить; 
		//КонецЕсли; 
		СальдоТекущееФ = СальдоТекущееФ + СтрокаТЗФ.СуммаОборотДт - СтрокаТЗФ.СуммаОборотКт;
		СтрокаТЗФ.Флаг   = ?(СальдоТекущееФ = 0, "", ?(СальдоТекущееФ < 0, "К", "Д"));
		СтрокаТЗФ.СуммаДолгаПоДоговору = ?(СальдоТекущееФ < 0, -СальдоТекущееФ, СальдоТекущееФ);
	КонецЦикла; 
	ТаблицаСФлагами.Сортировать("Период Убыв");
	//ВыборкаДетальныеЗаписиДог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаДокументовДолга = Новый ТаблицаЗначений;
	ТаблицаДокументовДолга.Колонки.Добавить("Регистратор");//,          Новый ОписаниеТипов("ДокументСсылка"));
	ТаблицаДокументовДолга.Колонки.Добавить("ПроверятьГалочку",     Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаДокументовДолга.Колонки.Добавить("СуммаДолгаПоДоговору", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТаблицаДокументовДолга.Колонки.Добавить("СуммаДолга", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТаблицаДокументовДолга.Колонки.Добавить("ЕстьУслуги", 			Новый ОписаниеТипов("Булево"));
	ТипДокумента = "";
	ДатаДок = "";
	НомерДок = "";
	БылиНайденыСтрокиЗадолженности = Ложь;
	
	Для каждого СтрокаТЗФ Из ТаблицаСФлагами Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗФ.Регистратор) Тогда Продолжить; КонецЕсли; 
		Если ДтКт = "Дт" и СтрокаТЗФ.Флаг = "Д" и СтрокаТЗФ.СуммаОборотДт <> 0 Тогда
			Нстрока = ТаблицаДокументовДолга.Добавить();
			Нстрока.Регистратор 			= СтрокаТЗФ.Регистратор;
			Нстрока.ПроверятьГалочку 		= СтрокаТЗФ.ПроверятьГалочку;
			Нстрока.ЕстьУслуги 				= СтрокаТЗФ.ЕстьУслуги;
			//Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, Мин(СуммаДолгаПоДоговору, ?(СтрокаТЗФ.СуммаОборотДт < 0, 0, СтрокаТЗФ.СуммаОборотДт)));
			Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, Мин(СуммаДолгаПоДоговору, СтрокаТЗФ.СуммаОборотДт));
			СуммаДолгаПоДоговору 			= СуммаДолгаПоДоговору - СтрокаТЗФ.СуммаОборотДт;
			Нстрока.СуммаДолга			 	= СтрокаТЗФ.СуммаОборотДт;
			БылиНайденыСтрокиЗадолженности = Истина;
			Если Не СуммаДолгаПоДоговору > 0 Тогда Прервать; КонецЕсли; 
		ИначеЕсли ДтКт = "Кт" и СтрокаТЗФ.Флаг = "К" и СтрокаТЗФ.СуммаОборотКт <> 0 Тогда
			Нстрока = ТаблицаДокументовДолга.Добавить();
			Нстрока.Регистратор 			= СтрокаТЗФ.Регистратор;
			Нстрока.ПроверятьГалочку 		= СтрокаТЗФ.ПроверятьГалочку;
			Нстрока.ЕстьУслуги 				= СтрокаТЗФ.ЕстьУслуги;
			//Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, Мин(СуммаДолгаПоДоговору, ?(СтрокаТЗФ.СуммаОборотКт < 0, 0, СтрокаТЗФ.СуммаОборотКт)));
			Нстрока.СуммаДолгаПоДоговору 	= ?(СуммаДолгаПоДоговору < 0, 0, Мин(СуммаДолгаПоДоговору, СтрокаТЗФ.СуммаОборотКт));
			СуммаДолгаПоДоговору 			= СуммаДолгаПоДоговору - СтрокаТЗФ.СуммаОборотКт;
			Нстрока.СуммаДолга			 	= СтрокаТЗФ.СуммаОборотКт;
			БылиНайденыСтрокиЗадолженности = Истина;
			Если Не СуммаДолгаПоДоговору > 0 Тогда Прервать; КонецЕсли; 
		ИначеЕсли Не БылиНайденыСтрокиЗадолженности Тогда
			Продолжить;
		ИначеЕсли СуммаДолгаПоДоговору > 0 Тогда
			Продолжить;	
		Иначе 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СуммаРезерва = 0;
	Если Не Счет = ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам Тогда
		//Запрос = Новый Запрос;
		//Запрос.Текст =                                                     
		//"ВЫБРАТЬ
		//|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
		//|ИЗ
		//|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		//|			&КонПериода1,
		//|			Счет = &Счет,
		//|			,
		//|			Субконто1 = &Контрагент
		//|				И Субконто2 = &Договор) КАК ХозрасчетныйОстатки
		//|ГДЕ
		//|	ХозрасчетныйОстатки.Организация = &Организация";
		
		//Запрос.УстановитьПараметр("КонПериода1", 	КонПериода1);
		//Запрос.УстановитьПараметр("Контрагент", 	Контрагент);  
		//Запрос.УстановитьПараметр("Договор", 		ДоговорКонтрагента);
		//Запрос.УстановитьПараметр("Организация", 	Организация);
		//Запрос.УстановитьПараметр("Счет", 			ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
		//
		//Результат = Запрос.Выполнить();
		//Выборка_3 = ПакетЗапросов_3.Выбрать();
		СтруктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента", Контрагент, ДоговорКонтрагента);
		
		Если Выборка_3.НайтиСледующий(СтруктураПоиска) Тогда
			СуммаРезерва = Выборка_3.Сумма;
		КонецЕсли; 
	КонецЕсли;
	
	ТЗДляСтруктуры = новый ТаблицаЗначений;
	ТЗДляСтруктуры.Колонки.Добавить("ТипДокумента");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаДок");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаДокСист");
	ТЗДляСтруктуры.Колонки.Добавить("НомерДок");
	ТЗДляСтруктуры.Колонки.Добавить("ЗаЧто");
	ТЗДляСтруктуры.Колонки.Добавить("ПроверятьГалочку");
	ТЗДляСтруктуры.Колонки.Добавить("Регистратор");
	
	ТЗДляСтруктуры.Колонки.Добавить("ДатаПогашенияДЗ");
	ТЗДляСтруктуры.Колонки.Добавить("ДатаПогашенияДЗСтр");
	
	ТЗДляСтруктуры.Колонки.Добавить("Колонка12", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка13", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка14", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка15", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка16", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗДляСтруктуры.Колонки.Добавить("Колонка17", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	Для каждого ВыборкаДетальныеЗаписи из ТаблицаДокументовДолга цикл
		НовСтрока = ТЗДляСтруктуры.Добавить();
		НовСтрока.Регистратор = ВыборкаДетальныеЗаписи.Регистратор;
		ЗаполнитьСтрокуДаннымиДокумента(НовСтрока, ВыборкаДетальныеЗаписи.Регистратор, ВыборкаДетальныеЗаписи.ПроверятьГалочку, ВыборкаДетальныеЗаписи.ЕстьУслуги);
		
		НовСтрока.ДатаПогашенияДЗ = Дата(1,1,1);
		Если НовСтрока.ДатаДок = "б/д" Тогда
		    НовСтрока.ДатаПогашенияДЗСтр = "б/д";
		ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) и ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса и НовСтрока.ПроверятьГалочку = "Деньги" Тогда         // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
			Если ЗначениеЗаполнено(ДоговорКонтрагента.ВИЛС_СрокПоставкиПослеАванса)  Тогда                                                // СрокПоставкиОтАванса - ВИЛС_СрокПоставкиПослеАванса
				НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + ДоговорКонтрагента.ВИЛС_СрокПоставкиПослеАванса * 60 * 60 * 24;// СрокПоставкиОтАванса - ВИЛС_СрокПоставкиПослеАванса
				НовСтрока.ДатаПогашенияДЗСтр = Формат(НовСтрока.ДатаПогашенияДЗ, "ДФ=dd.MM.yyyy");
			Иначе
				НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 30 * 60 * 60 * 24;
				НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
			КонецЕсли; 
			
		ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) и ДоговорКонтрагента.ВИЛС_УстановленСрокПоставкиПослеАванса и НовСтрока.ПроверятьГалочку = "Поставка" Тогда         // КонтролироватьСрокПоставкиОтАванса - ВИЛС_УстановленСрокПоставкиПослеАванса
			//Если ЗначениеЗаполнено(ДоговорКонтрагента.ВИЛС_СрокПоставкиПослеАванса)  Тогда      // СрокПоставкиОтАванса - ВИЛС_СрокПоставкиПослеАванса
			//	НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + ДоговорКонтрагента.ВИЛС_СрокПоставкиПослеАванса * 60 * 60 * 24;// СрокПоставкиОтАванса - ВИЛС_СрокПоставкиПослеАванса
			//	НовСтрока.ДатаПогашенияДЗСтр = Формат(НовСтрока.ДатаПогашенияДЗ, "ДФ=dd.MM.yyyy");
			//Иначе
				НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 1 * 60 * 60 * 24;
				НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
			//КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) и ДоговорКонтрагента.УстановленСрокОплаты и НовСтрока.ПроверятьГалочку = "Поставка"  Тогда   	// КонтролироватьСрокОкончательнойОплатыЗадолженности - УстановленСрокОплаты
			Если ЗначениеЗаполнено(ДоговорКонтрагента.СрокОплаты) Тогда            								// СрокОкончательнойОплатыЗадолженности - СрокОплаты
				НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + ДоговорКонтрагента.СрокОплаты * 60 * 60 * 24;   // СрокОкончательнойОплатыЗадолженности - СрокОплаты
				НовСтрока.ДатаПогашенияДЗСтр = Формат(НовСтрока.ДатаПогашенияДЗ, "ДФ=dd.MM.yyyy");
			Иначе
				НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 30 * 60 * 60 * 24;
				НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
			КонецЕсли; 
		Иначе
			НовСтрока.ДатаПогашенияДЗ = НовСтрока.ДатаДок + 30 * 60 * 60 * 24; 
		    НовСтрока.ДатаПогашенияДЗСтр = "НЗП";
		КонецЕсли; 	
		
		НовСтрока.Колонка12 = 0;
		НовСтрока.Колонка13 = 0;
		НовСтрока.Колонка14 = 0; 
		НовСтрока.Колонка15 = 0;
		НовСтрока.Колонка16 = 0;
		НовСтрока.Колонка17 = 0;
		КолДней = (КонПериода.Значение - НовСтрока.ДатаДок) / (60 * 60 * 24);   // fix Suetin 23.10.2017 16:14:54  ТЗДляСтруктуры[КоличествоСтрок - 1].ДатаДок
		
		Если КолДней > 1095 Тогда
			НовСтрока.Колонка16 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		ИначеЕсли КолДней > 180 Тогда
			НовСтрока.Колонка15 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;	
		ИначеЕсли КолДней > 90 Тогда
			НовСтрока.Колонка14 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		ИначеЕсли КолДней > 30 Тогда
			НовСтрока.Колонка13 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		ИначеЕсли КолДней > 0 Тогда
			НовСтрока.Колонка12 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		КонецЕсли; 
		Если НовСтрока.ДатаПогашенияДЗ > Дата(1,1,1) и НовСтрока.ДатаПогашенияДЗ < КонПериода.Значение Тогда
			НовСтрока.Колонка17 = ВыборкаДетальныеЗаписи.СуммаДолгаПоДоговору;
		КонецЕсли;
		
	КонецЦикла;
	
	//ПараметрыОтбора = Новый Структура("Колонка11,Колонка12,Колонка13,Колонка14,Колонка15", 0, 0, 0, 0, 0);
	//МассивСтрокПросроченных = ТЗДляСтруктуры.НайтиСтроки(ПараметрыОтбора);
	//Для каждого СтрокаНеПросроч Из МассивСтрокПросроченных Цикл
	//	ТЗДляСтруктуры.Удалить(СтрокаНеПросроч);
	//КонецЦикла;
	
	ТЗДляСтруктуры.Свернуть("ТипДокумента, ДатаДок, НомерДок, ДатаДокСист, ЗаЧто, ПроверятьГалочку, Регистратор, ДатаПогашенияДЗ, ДатаПогашенияДЗСтр", "Колонка12, Колонка13, Колонка14, Колонка15, Колонка16, Колонка17");
	ТЗДляСтруктуры.Сортировать("ДатаДокСист Убыв");
	Для каждого строкаДС из ТЗДляСтруктуры цикл
		ТипДокумента = ТипДокумента + ?(ТипДокумента = "", "", Символы.ПС) + строкаДС.ТипДокумента; 	
		НомерДок = НомерДок + ?(НомерДок = "", "", Символы.ПС) + ?(строкаДС.НомерДок = "", "б/н", строкаДС.НомерДок);
		ДатаДок = ДатаДок + ?(ДатаДок = "", "", Символы.ПС) + ?(строкаДС.ДатаДок = Дата(1,1,1,0,0,0), "б/д", Формат(строкаДС.ДатаДок, "ДФ=dd.MM.yyyy"));
		//Если Не (строкаДС.ДатаДок = "" или строкаДС.ДатаДок = Дата(1,1,1,0,0,0)) Тогда
		//	ДатаДокДатой = строкаДС.ДатаДок;
		//КонецЕсли;	
		ЗаЧто = строкаДС.ЗаЧто;
		ДатаПогашенияДЗСтр = строкаДС.ДатаПогашенияДЗСтр;
	КонецЦикла;
	
	КоличествоСтрок = ТЗДляСтруктуры.Количество();
	
	СтруктураСтроки.Вставить("ДокСтр", 			ТипДокумента);
	СтруктураСтроки.Вставить("ДатаДок", 		ДатаДок);
	СтруктураСтроки.Вставить("НомерДок", 		НомерДок);
	СтруктураСтроки.Вставить("ЗаЧто", 			ЗаЧто);
	СтруктураСтроки.Вставить("ДатаПогашенияДЗ", ДатаПогашенияДЗСтр);
	СтруктураСтроки.Вставить("Регистратор", 	?(КоличествоСтрок > 0, ТЗДляСтруктуры[КоличествоСтрок - 1].Регистратор, Неопределено));  
	
	СтруктураСтроки.Вставить("ТЗДляСтруктуры", ТЗДляСтруктуры);
	СтруктураСтроки.Вставить("СуммаРезерва", СуммаРезерва);
	СтруктураСтроки.Вставить("ИсполняющееПодразделение", ?(ЗначениеЗаполнено(ДоговорКонтрагента), ДоговорКонтрагента.Подразделение, Справочники.СтруктураПредприятия.ПустаяСсылка()));    //  ИсполняющееПодразделение
	СтруктураСтроки.Вставить("Контрагент", Контрагент);
	СтруктураСтроки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Возврат СтруктураСтроки;
	
КонецФункции	//ПолучитьДанныеСтроки()	                    

Процедура ЗаполнитьСтрокуДаннымиДокумента(НовСтрока, Регистратор, ПроверятьГалочку, ЕстьУслуги = Ложь)
	Попытка
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОтчетДавальцу") тогда   //    РеализацияУслугПоПереработке
			НовСтрока.ТипДокумента = "акт выполненных услуг";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
			
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПередачаДавальцу") тогда   //    РеализацияУслугПоПереработке
			НовСтрока.ТипДокумента = "накладная";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;	
		
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
			Если ЕстьУслуги тогда
				НовСтрока.ТипДокумента = "акт выполненных услуг";
			Иначе
				НовСтрока.ТипДокумента = "накладная";
			КонецЕсли;
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
		
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") тогда
			Если ЕстьУслуги тогда
				НовСтрока.ТипДокумента = "акт выполненных услуг";
			Иначе
				НовСтрока.ТипДокумента = "накладная";
			КонецЕсли;
			НовСтрока.ДатаДок 		= ?(Регистратор.ДатаВходящегоДокумента = Дата(1,1,1), Регистратор.Дата, Регистратор.ДатаВходящегоДокумента);
			НовСтрока.ДатаДокСист 	= Регистратор.Дата;
			НовСтрока.НомерДок 		= ?(Регистратор.НомерВходящегоДокумента = "", "б/н", Регистратор.НомерВходящегоДокумента);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
		
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеТоваров") тогда
			Если ЕстьУслуги тогда
				НовСтрока.ТипДокумента = "акт выполненных услуг";
			Иначе
				НовСтрока.ТипДокумента = "накладная";
			КонецЕсли;
			НовСтрока.ДатаДок 		= ?(Регистратор.ДатаВходящегоДокумента = Дата(1,1,1), Регистратор.Дата, Регистратор.ДатаВходящегоДокумента);
			НовСтрока.ДатаДокСист 	= Регистратор.Дата;
			НовСтрока.НомерДок 		= ?(Регистратор.НомерВходящегоДокумента = "", "б/н", Регистратор.НомерВходящегоДокумента);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") тогда
			НовСтрока.ТипДокумента 	= "платежное поручение";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") тогда
			НовСтрока.ТипДокумента 	= "платежное поручение";
			НовСтрока.ДатаДок 		= ?(Регистратор.ДатаВходящегоДокумента = Дата(1,1,1), Регистратор.Дата, Регистратор.ДатаВходящегоДокумента);
			НовСтрока.ДатаДокСист 	= Регистратор.Дата;
			НовСтрока.НомерДок 		= ?(Регистратор.НомерВходящегоДокумента = "", "б/н", Регистратор.НомерВходящегоДокумента);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") тогда
			НовСтрока.ТипДокумента 	= "ПКО";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") тогда
			НовСтрока.ТипДокумента 	= "РКО";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.АвансовыйОтчет") тогда
			НовСтрока.ТипДокумента 	= "Авансовый отчет";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;                                               
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОперацияБух") тогда
			НовСтрока.ТипДокумента 	= "Опреация бух.";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		//ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") тогда  //?????????????????????????????
		//	НовСтрока.ТипДокумента 	= "акт выполненных услуг";
		//	НовСтрока.ДатаДок 		= Регистратор.дата;
		//	НовСтрока.ДатаДокСист 	= Регистратор.дата;
		//	НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
		//	НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
		//	НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПервичныйДокумент") тогда
			НовСтрока.ТипДокумента 	= "д/расч.";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаЗадолженностиПоФинансовымИнструментам") тогда
			НовСтрока.ТипДокумента 	= "к/задолженности";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") тогда
			НовСтрока.ТипДокумента 	= "в/задолженности";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.СписаниеЗадолженности") тогда
			НовСтрока.ТипДокумента 	= "с/задолженности";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") тогда
			НовСтрока.ТипДокумента 	= "доп/расх";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВводОстатков") тогда
			НовСтрока.ТипДокумента 	= "Ввод нач. остатков";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") тогда
			НовСтрока.ТипДокумента 	= "Корректировка реализ.";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаПриобретения") тогда
			НовСтрока.ТипДокумента 	= "Корректировка поступ.";                                                            
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;

		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") тогда
			НовСтрока.ТипДокумента 	= "Накладная";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
			
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") тогда
			НовСтрока.ТипДокумента 	= "Накладная";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= Регистратор.Договор.ТипДоговора;
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
			
		ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.НачислениеДивидендов") тогда
			НовСтрока.ТипДокумента 	= "Начисление дивидендов";
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ЗаЧто 		= "Дивиденды по акциям";
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
			
		Иначе
			НовСтрока.ТипДокумента 	= Регистратор.Метаданные().Синоним;
			НовСтрока.ДатаДок 		= Регистратор.дата;
			НовСтрока.ДатаДокСист 	= Регистратор.дата;
			НовСтрока.НомерДок 		= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Регистратор, Ложь, Истина);
			НовСтрока.ПроверятьГалочку = ПроверятьГалочку;
			
		КонецЕсли;	
	Исключение
	КОнецПопытки;
КонецПроцедуры

Функция ПолучитьТекстЗапроса(ВидЗадолженности)
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1	//0
	|	Инвентаризация.Дата КАК Дата,
	|	Инвентаризация.Номер КАК Номер,
	|	Инвентаризация.Организация КАК Организация,
	|	Инвентаризация.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	Инвентаризация.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	Инвентаризация.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	Инвентаризация.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	Инвентаризация.ДокументОснованиеНомер КАК ДокументОснованиеНомер	//,
	//|	Инвентаризация.ИнвентаризационнаяКомиссия.(
	//|		ФИОПолные КАК ФизЛицо,
	//|		Председатель КАК Председатель
	//|	) КАК ИнвентаризационнаяКомиссия,
	//|	Инвентаризация.СчетаУчета.(
	//|		СчетУчета
	//|	)//,
	//|	Инвентаризация.Задолженность.(
	//|		ДебиторКредитор КАК Контрагент,
	//|		ВидЗадолженности,
	//|		СчетРасчетов,
	//|		Подтверждено,
	//|		НеПодтверждено,
	//|		ИстекСрокДавности,
	//|		ВИЛС_Договор КАК ДоговорКонтрагента
	//|	)
	|ПОМЕСТИТЬ Шапка
	|ИЗ 
	|	Документ.ИнвентаризацияРасчетов КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Ссылка = &Ссылка
	|
	//|УПОРЯДОЧИТЬ ПО
	//|	Инвентаризация.ИнвентаризационнаяКомиссия.НомерСтроки
	|;
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ //1
	|	Задолженность.ДебиторКредитор КАК Контрагент,
	|	Задолженность.ВидЗадолженности КАК ВидЗадолженности,
	|	Задолженность.СчетРасчетов КАК СчетРасчетов,
	|	Задолженность.Подтверждено КАК Подтверждено,
	|	Задолженность.НеПодтверждено КАК НеПодтверждено,
	|	Задолженность.ИстекСрокДавности КАК ИстекСрокДавности,
	|	Задолженность.ВИЛС_Договор КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ Задолженность	
	|ИЗ 
	|	Документ.ИнвентаризацияРасчетов.Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.Ссылка = &Ссылка
	|	И Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности." + ВидЗадолженности + ")
	//Дебиторская)
	//
	|;	
	|/////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ //2
	|	Т.Регистратор КАК Регистратор,
	|	МАКСИМУМ(Т.ЕстьУслуги) КАК ЕстьУслуги
	|ПОМЕСТИТЬ РегистраторыСУслугами
	|ИЗ(
	|	ВЫБРАТЬ
	|		Т.Ссылка КАК Регистратор,
	|   	ВЫБОР 
	|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|   			ТОГДА ИСТИНА
	|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|   			ТОГДА ИСТИНА
	|  	    	ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЕстьУслуги
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг.ВидыЗапасов КАК Т
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Т.Ссылка КАК Регистратор,
	|   	ВЫБОР 
	|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|   			ТОГДА ИСТИНА
	|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|   			ТОГДА ИСТИНА
	|  	    	ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЕстьУслуги
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК Т 
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Т.Ссылка КАК Регистратор,
	|   	ВЫБОР 
	|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|   			ТОГДА ИСТИНА
	|   		КОГДА Т.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|   			ТОГДА ИСТИНА
	|  	    	ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЕстьУслуги
	|	ИЗ
	|		Документ.ПоступлениеТоваров.ВидыЗапасов  КАК Т) КАК Т
	|СГРУППИРОВАТЬ
	|ПО 
	|	Т.Регистратор
	|;
	|///////////////////////////////////////////////////////////////////////////////   
	|ВЫБРАТЬ	//3
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонПериода1,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам),
	|			, Организация 	 В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ Шапка КАК Шапка)	//&Организация
	|				И Субконто1  В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.Контрагент ИЗ Задолженность КАК ЗадолженностьНовая)
	|				И Субконто2  В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДоговорКонтрагента ИЗ Задолженность КАК ЗадолженностьНовая)) КАК ХозрасчетныйОстатки
	|
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ //4
	|	ХозрасчетныйОбороты.ДебиторКредитор КАК ДебиторКредитор,
	|	ХозрасчетныйОбороты.ВИЛС_Договор КАК ВИЛС_Договор,
	|	ХозрасчетныйОбороты.ЕстьУслуги,
	|	ХозрасчетныйОбороты.Период КАК Период,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.ПроверятьГалочку КАК ПроверятьГалочку,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК СуммаОборот,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	(ВЫБРАТЬ

	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто3
	|		ИНАЧЕ ХозрасчетныйОбороты.Счет.Наименование
	|	КОНЕЦ КАК ДебиторКредитор,
	|	ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ХозрасчетныйОбороты.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ВИЛС_Договор, // end fix Suetin 17.01.2019 12:58:17

	|		ХозрасчетныйОбороты.Период КАК Период,
	|		ХозрасчетныйОбороты.Счет КАК Счет,
	|		ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|		ХозрасчетныйОбороты.СуммаОборот КАК СуммаОборот,
	|		ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|		ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
	|				ТОГДА ""Деньги""
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы)
	|				ТОГДА ""Деньги""
	//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
	//|					И ХозрасчетныйОбороты.КорСубконто1 = &ВТБ_Факторинг
	//|				ТОГДА ""Деньги""
	//|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	//|					И ХозрасчетныйОбороты.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками)
	//|					И ХозрасчетныйОбороты.КорСубконто1 = &Транскапиталбанк
	//|				ТОГДА ""Деньги""
	|			ИНАЧЕ ""Поставка""
	|		КОНЕЦ КАК ПроверятьГалочку,
	|		РегистраторыСУслугами.ЕстьУслуги КАК ЕстьУслуги
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				,
	|				&КонПериода,
	|				Регистратор,
	|				ВЫБОР 
	|					КОГДА Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.СчетРасчетов ИЗ Задолженность КАК ЗадолженностьНовая)	//В (&Счета),
	|				    	ТОГДА ИСТИНА
	|					КОГДА Счет В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
	|				    	ТОГДА ИСТИНА
	|                    ИНАЧЕ ЛОЖЬ КОНЕЦ
	|				,,//&ВидыСубконто,
	|				Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Шапка.Организация ИЗ Шапка КАК Шапка)	//= &Организация

	|	И ВЫБОР                   // begin fix Suetin 17.01.2019 12:58:11
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.ФизическиеЛица), ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Организации), ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто1
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто3 КАК Справочник.РегистрацииВНалоговомОргане), ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.Контрагент ИЗ Задолженность КАК ЗадолженностьНовая)    //= &Контрагент	//
	|	И ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто2
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(Субконто2 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЗадолженностьНовая.ДоговорКонтрагента ИЗ Задолженность КАК ЗадолженностьНовая) 	//= &Договор	//	
	|,
	|				,
	|				) КАК ХозрасчетныйОбороты
	|    ЛЕВОЕ СОЕДИНЕНИЕ РегистраторыСУслугами
	|    	ПО ХозрасчетныйОбороты.Регистратор = РегистраторыСУслугами.Регистратор
	|											) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО

	|	ХозрасчетныйОбороты.ДебиторКредитор,
	|	ХозрасчетныйОбороты.ВИЛС_Договор, // fix Suetin 17.01.2019 12:58:17
	|	ХозрасчетныйОбороты.ЕстьУслуги,   // fix Suetin 25.03.2019 18:45:23
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Период,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.ПроверятьГалочку
	|
	//|УПОРЯДОЧИТЬ ПО
	//|	ХозрасчетныйОбороты.Период
	|ИТОГИ
	|	СУММА(СуммаОборот)
	|ПО
	|	Счет
	|";
	
	
	Возврат(ТекстЗапроса);
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли