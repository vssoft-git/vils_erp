// begin fix Suetin 06.02.2019 12:23:44
&НаСервере
Процедура ВИЛС_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	//ДобавляемыеРеквизиты = Новый Массив;
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗадолженностьВИЛС_Договор", 					Новый ОписаниеТипов("СправочникСсылка.ДоговорыМеждуОрганизациями, СправочникСсылка.ДоговорыКредитовИДепозитов, СправочникСсылка.ДоговорыЛизинга, СправочникСсылка.ДоговорыКонтрагентов"),"Объект.Задолженность","Договор"));
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗадолженностьВИЛС_Подтверждено1Месяц", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)),"Объект.Задолженность","Подтверждено (1 мес)"));
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗадолженностьВИЛС_НеПодтверждено1Месяц", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)),"Объект.Задолженность","Не подтверждено (1 мес)"));
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗадолженностьВИЛС_ИстекСрокДавности1Месяц", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)),"Объект.Задолженность","Истек срок давности (1 мес)"));
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗадолженностьВИЛС_Подтверждено2Месяц", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)),"Объект.Задолженность","Подтверждено (2 мес)"));
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗадолженностьВИЛС_НеПодтверждено2Месяц", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)),"Объект.Задолженность","Не подтверждено (2 мес)"));
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗадолженностьВИЛС_ИстекСрокДавности2Месяц", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)),"Объект.Задолженность","Истек срок давности (2 мес)"));
	//ИзменитьРеквизиты(ДобавляемыеРеквизиты); 
	//
	ДобавляемыйЭлемент = Элементы.Вставить("ЗадолженностьВИЛС_Договор", Тип("ПолеФормы"), Элементы.Задолженность, Элементы.Задолженность.ПодчиненныеЭлементы.ЗадолженностьСчет);
	ДобавляемыйЭлемент.Вид 				= ВидПоляФормы.ПолеВвода; 
   	ДобавляемыйЭлемент.ПутьКДанным 		= "Объект.Задолженность.ВИЛС_Договор";
	ДобавляемыйЭлемент = Элементы.Вставить("ЗадолженностьВИЛС_Подтверждено1Месяц", Тип("ПолеФормы"), Элементы.Задолженность);
	ДобавляемыйЭлемент.Вид 				= ВидПоляФормы.ПолеВвода; 
   	ДобавляемыйЭлемент.ПутьКДанным 		= "Объект.Задолженность.ВИЛС_Подтверждено1Месяц";
	ДобавляемыйЭлемент = Элементы.Вставить("ЗадолженностьВИЛС_НеПодтверждено1Месяц", Тип("ПолеФормы"), Элементы.Задолженность);
	ДобавляемыйЭлемент.Вид 				= ВидПоляФормы.ПолеВвода; 
   	ДобавляемыйЭлемент.ПутьКДанным 		= "Объект.Задолженность.ВИЛС_НеПодтверждено1Месяц";
	ДобавляемыйЭлемент = Элементы.Вставить("ЗадолженностьВИЛС_ИстекСрокДавности1Месяц", Тип("ПолеФормы"), Элементы.Задолженность);
	ДобавляемыйЭлемент.Вид 				= ВидПоляФормы.ПолеВвода; 
   	ДобавляемыйЭлемент.ПутьКДанным 		= "Объект.Задолженность.ВИЛС_ИстекСрокДавности1Месяц";
	ДобавляемыйЭлемент = Элементы.Вставить("ЗадолженностьВИЛС_Подтверждено2Месяц", Тип("ПолеФормы"), Элементы.Задолженность);
	ДобавляемыйЭлемент.Вид 				= ВидПоляФормы.ПолеВвода; 
   	ДобавляемыйЭлемент.ПутьКДанным 		= "Объект.Задолженность.ВИЛС_Подтверждено2Месяц";
	ДобавляемыйЭлемент = Элементы.Вставить("ЗадолженностьВИЛС_НеПодтверждено2Месяц", Тип("ПолеФормы"), Элементы.Задолженность);
	ДобавляемыйЭлемент.Вид 				= ВидПоляФормы.ПолеВвода; 
   	ДобавляемыйЭлемент.ПутьКДанным 		= "Объект.Задолженность.ВИЛС_НеПодтверждено2Месяц";
	ДобавляемыйЭлемент = Элементы.Вставить("ЗадолженностьВИЛС_ИстекСрокДавности2Месяц", Тип("ПолеФормы"), Элементы.Задолженность);
	ДобавляемыйЭлемент.Вид 				= ВидПоляФормы.ПолеВвода; 
   	ДобавляемыйЭлемент.ПутьКДанным 		= "Объект.Задолженность.ВИЛС_ИстекСрокДавности2Месяц";
КонецПроцедуры

&НаСервере
&Вместо("ЗаполнитьДолгиНаСервере")
Функция ВИЛС_ЗаполнитьДолгиНаСервере()
	
	ВыполняемыйМетод = "Документы.ИнвентаризацияРасчетов.ЗаполнитьЗадолженностьПоОстаткам";
	
	ПараметрыЗаполнения = Документы.ИнвентаризацияРасчетов.ПараметрыЗаданияЗаполненияВзаиморасчетов(Объект);
	ПараметрыЗаполнения.СчетаРасчетов = СписокВыбранныхСчетов.ВыгрузитьЗначения();   // fix Suetin 17.01.2019 15:51:38	ВИЛС_Договор  и др
	КолонкиДляВыгрузки = "СчетРасчетов, ДебиторКредитор, ВИЛС_Договор, Подтверждено, НеПодтверждено, ИстекСрокДавности, ВидЗадолженности,
	| ВсегоДебиторская, ВсегоКредиторская,
	| ВИЛС_Подтверждено1Месяц, ВИЛС_НеПодтверждено1Месяц, ВИЛС_ИстекСрокДавности1Месяц,
	| ВИЛС_Подтверждено2Месяц, ВИЛС_НеПодтверждено2Месяц, ВИЛС_ИстекСрокДавности2Месяц";
	
	ПараметрыЗаполнения.ТаблицаЗадолженности = Объект.Задолженность.Выгрузить(, КолонкиДляВыгрузки);
	
	ПараметрыФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыФоновогоЗадания.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнить данными расчетов с дебиторами / кредиторами'");
	ПараметрыФоновогоЗадания.КлючФоновогоЗадания = "ЗаполнениеВзаиморасчетовДляИнвентаризации";
	ПараметрыФоновогоЗадания.ОжидатьЗавершение = 1;
	
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗаполнения, ПараметрыФоновогоЗадания);
			
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		ПрочитатьРезультатЗаполнения(РезультатФоновогоЗадания.АдресРезультата);
		РезультатФоновогоЗадания.Вставить("РезультатОбработан", Истина);
	Иначе
		РезультатФоновогоЗадания.Вставить("РезультатОбработан", Ложь);
	КонецЕсли;
	
	// Передадим данные на клиент.
	Возврат РезультатФоновогоЗадания;

КонецФункции

&НаКлиенте
Процедура ВИЛС_ДатаОкончанияИнвентаризацииПриИзмененииПосле(Элемент)
	Если Не Объект.ДатаОкончанияИнвентаризации = Дата(1,1,1) Тогда
		Объект.Дата = КонецДня(Объект.ДатаОкончанияИнвентаризации);
	КонецЕсли;
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("СформироватьДеревоВыбранныхСчетовУчетаСоСводнымиДанными")
Процедура ВИЛС_СформироватьДеревоВыбранныхСчетовУчетаСоСводнымиДанными()

	Запрос = Новый Запрос;
#Удаление
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияРасчетовЗадолженность.ДебиторКредитор,
	|	ИнвентаризацияРасчетовЗадолженность.СчетРасчетов КАК СчетРасчетов,
	|	ИнвентаризацияРасчетовЗадолженность.Подтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.НеПодтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.ИстекСрокДавности,
	|	ИнвентаризацияРасчетовЗадолженность.ВидЗадолженности
	|ПОМЕСТИТЬ ТаблицаЗадолженности
	|ИЗ
	|	&ТаблицаЗадолженности КАК ИнвентаризацияРасчетовЗадолженность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Наименование,
	|	СУММА(ВЫБОР
	|		КОГДА Задолженность.СчетРасчетов ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ) КАК КоличествоСтрок,
	|	СУММА(ВЫБОР
	|		КОГДА Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|			ТОГДА ЕСТЬNULL(Задолженность.Подтверждено + Задолженность.НеПодтверждено, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК ДебиторскаяЗадолженность,
	|	СУММА(ВЫБОР
	|		КОГДА Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|			ТОГДА ЕСТЬNULL(Задолженность.Подтверждено + Задолженность.НеПодтверждено, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КредиторскаяЗадолженность,
	|	СУММА(ЕСТЬNULL(Задолженность.Подтверждено, 0)) КАК Подтверждено,
	|	СУММА(ЕСТЬNULL(Задолженность.НеПодтверждено, 0)) КАК НеПодтверждено,
	|	СУММА(ЕСТЬNULL(Задолженность.ИстекСрокДавности, 0)) КАК ИстекСрокДавности
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗадолженности КАК Задолженность
	|		ПО (Задолженность.СчетРасчетов = Хозрасчетный.Ссылка)
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаУчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Ссылка,
	|	Хозрасчетный.Наименование
	|ИТОГИ
	|	СУММА(КоличествоСтрок),
	|	СУММА(ДебиторскаяЗадолженность),
	|	СУММА(КредиторскаяЗадолженность),
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено)
	|ПО
	|	Счет ТОЛЬКО ИЕРАРХИЯ";
#КонецУдаления
#Вставка
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияРасчетовЗадолженность.ДебиторКредитор,
	|	ИнвентаризацияРасчетовЗадолженность.СчетРасчетов КАК СчетРасчетов,
	|	ИнвентаризацияРасчетовЗадолженность.Подтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.НеПодтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.ИстекСрокДавности,
	|	ИнвентаризацияРасчетовЗадолженность.ВидЗадолженности
	|ПОМЕСТИТЬ ТаблицаЗадолженности
	|ИЗ
	|	&ТаблицаЗадолженности КАК ИнвентаризацияРасчетовЗадолженность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Код КАК КодСчета,   // fix Suetin 16.02.2021 15:25:51
	|	Хозрасчетный.Наименование,
	|	СУММА(ВЫБОР
	|		КОГДА Задолженность.СчетРасчетов ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ) КАК КоличествоСтрок,
	|	СУММА(ВЫБОР
	|		КОГДА Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|			ТОГДА ЕСТЬNULL(Задолженность.Подтверждено + Задолженность.НеПодтверждено, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК ДебиторскаяЗадолженность,
	|	СУММА(ВЫБОР
	|		КОГДА Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|			ТОГДА ЕСТЬNULL(Задолженность.Подтверждено + Задолженность.НеПодтверждено, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КредиторскаяЗадолженность,
	|	СУММА(ЕСТЬNULL(Задолженность.Подтверждено, 0)) КАК Подтверждено,
	|	СУММА(ЕСТЬNULL(Задолженность.НеПодтверждено, 0)) КАК НеПодтверждено,
	|	СУММА(ЕСТЬNULL(Задолженность.ИстекСрокДавности, 0)) КАК ИстекСрокДавности
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗадолженности КАК Задолженность
	|		ПО (Задолженность.СчетРасчетов = Хозрасчетный.Ссылка)
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаУчета)
	|	И НЕ Хозрасчетный.Ссылка В (&ИсключенияИзГрупп)
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Ссылка,
	|	Хозрасчетный.Код,    // fix Suetin 16.02.2021 15:25:59
	|	Хозрасчетный.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
    |	КодСчета      // fix Suetin 16.02.2021 15:25:59
	|ИТОГИ
	|	СУММА(КоличествоСтрок),
	|	СУММА(ДебиторскаяЗадолженность),
	|	СУММА(КредиторскаяЗадолженность),
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено)
	|ПО
	|	Счет ТОЛЬКО ИЕРАРХИЯ";
	ИсключенияИзГрупп = Новый Массив;
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.Паи);
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.Акции);
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.ДолговыеЦенныеБумаги);
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным);
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода);
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет);
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке);
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям);   						// 76.02
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам);   				// 76.04
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками);   	// 76.05
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);   	// 76.06
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал); // 76.21
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал);   						// 76.22
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);   // 76.25
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);   	// 76.26
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал);// 76.29
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ);   						// 76.32
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);   	// 76.35
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);   	// 76.36
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ); // 76.39
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников);   // 76.41
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПрочимУдержаниямРаботников); 			// 76.49
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);   					// 76.АВ
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным);   			// 76.ВА
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода);   		// 76.К
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет); 		// 76.Н
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);   					// 76.НА
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.ТоварыКОформлениюОтчетовКомитенту);   			// 76.ОК
	ИсключенияИзГрупп.Добавить(ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке);   					// 76.ОТ
	Запрос.УстановитьПараметр("ИсключенияИзГрупп", ИсключенияИзГрупп);
#КонецВставки

	Запрос.УстановитьПараметр("СчетаУчета", СписокВыбранныхСчетов.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ТаблицаЗадолженности", Объект.Задолженность.Выгрузить());

	ДеревоСчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
#Вставка
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияРасчетовЗадолженность.ДебиторКредитор,
	|	ИнвентаризацияРасчетовЗадолженность.СчетРасчетов КАК СчетРасчетов,
	|	ИнвентаризацияРасчетовЗадолженность.Подтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.НеПодтверждено,
	|	ИнвентаризацияРасчетовЗадолженность.ИстекСрокДавности,
	|	ИнвентаризацияРасчетовЗадолженность.ВидЗадолженности
	|ПОМЕСТИТЬ ТаблицаЗадолженности
	|ИЗ
	|	&ТаблицаЗадолженности КАК ИнвентаризацияРасчетовЗадолженность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Код КАК КодСчета,   // fix Suetin 16.02.2021 15:25:51
	|	Хозрасчетный.Наименование,
	|	СУММА(ВЫБОР
	|		КОГДА Задолженность.СчетРасчетов ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ) КАК КоличествоСтрок,
	|	СУММА(ВЫБОР
	|		КОГДА Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|			ТОГДА ЕСТЬNULL(Задолженность.Подтверждено + Задолженность.НеПодтверждено, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК ДебиторскаяЗадолженность,
	|	СУММА(ВЫБОР
	|		КОГДА Задолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|			ТОГДА ЕСТЬNULL(Задолженность.Подтверждено + Задолженность.НеПодтверждено, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КредиторскаяЗадолженность,
	|	СУММА(ЕСТЬNULL(Задолженность.Подтверждено, 0)) КАК Подтверждено,
	|	СУММА(ЕСТЬNULL(Задолженность.НеПодтверждено, 0)) КАК НеПодтверждено,
	|	СУММА(ЕСТЬNULL(Задолженность.ИстекСрокДавности, 0)) КАК ИстекСрокДавности
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗадолженности КАК Задолженность
	|		ПО (Задолженность.СчетРасчетов = Хозрасчетный.Ссылка)
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаУчета)
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ(&ГруппыДоступныхСчетовУчета76)
	|//	И НЕ Хозрасчетный.Ссылка В (&ИсключенияИзГрупп)
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Ссылка,
	|	Хозрасчетный.Код,    // fix Suetin 16.02.2021 15:25:59
	|	Хозрасчетный.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
    |	КодСчета      // fix Suetin 16.02.2021 15:25:59
	|ИТОГИ
	|	СУММА(КоличествоСтрок),
	|	СУММА(ДебиторскаяЗадолженность),
	|	СУММА(КредиторскаяЗадолженность),
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено)
	|ПО
	|	Счет ТОЛЬКО ИЕРАРХИЯ";
	ГруппыДоступныхСчетовУчета76 = Новый Массив;
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям);   						// 76.02
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам);   				// 76.04
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками);   	// 76.05
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);   	// 76.06
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал); // 76.21
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал);   						// 76.22
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);   // 76.25
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);   	// 76.26
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал);// 76.29
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ);   						// 76.32
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);   	// 76.35
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);   	// 76.36
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ); // 76.39
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников);   // 76.41
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПрочимУдержаниямРаботников); 			// 76.49
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);   					// 76.АВ
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным);   			// 76.ВА
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода);   		// 76.К
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет); 		// 76.Н
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);   					// 76.НА
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.ТоварыКОформлениюОтчетовКомитенту);   			// 76.ОК
	ГруппыДоступныхСчетовУчета76.Добавить(ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке);   					// 76.ОТ
	Запрос.УстановитьПараметр("ГруппыДоступныхСчетовУчета76", ГруппыДоступныхСчетовУчета76);
	
	ДеревоСчетов76 = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Документы.ИнвентаризацияРасчетов.КонвертироватьДанныеФормыДеревоВДеревоЗначений(ДеревоСчетов, ДеревоСчетов76,?(ДеревоСчетов.Колонки.Найти("Пометка")=Неопределено,Ложь,Истина));
#КонецВставки

	СтрокаПустогоСчета = ДеревоСчетов.Строки.Найти(ПланыСчетов.Хозрасчетный.ПустаяСсылка(), "Счет");

	Если НЕ СтрокаПустогоСчета = Неопределено Тогда
		Для каждого ПодчиненнаяСтрокаПустогоСчета Из СтрокаПустогоСчета.Строки Цикл
			НоваяСтрока = ДеревоСчетов.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрокаПустогоСчета);
		КонецЦикла;
		ДеревоСчетов.Строки.Удалить(СтрокаПустогоСчета);
	КонецЕсли;

	ИтогВсегоДебиторская = ДеревоСчетов.Строки.Итог("ДебиторскаяЗадолженность");
	ИтогВсегоКредиторская = ДеревоСчетов.Строки.Итог("КредиторскаяЗадолженность");

	ЗначениеВРеквизитФормы(ДеревоСчетов, "ДеревоСводныхДанныхПоСчетам");

	ОбновитьДеревоСводныхДанных = Ложь;

КонецПроцедуры
// end fix Suetin 06.02.2019 12:23:57