&Вместо("УстановитьПредставлениеИнтервалаПоВидуВремени")
&НаСервере
Процедура ВИЛС_УстановитьПредставлениеИнтервалаПоВидуВремени(СтрокаТаблицыПредставления, ОписаниеТекущегоИнтервала)
	ДанныеОВремениЗаДень = ОписаниеТекущегоИнтервала.ДанныеОВремениЗаДень;
	
	ПостфиксИмяПоля = ПостфиксыПолейДанных[ОписаниеТекущегоИнтервала.НомерПервогоДня];
	
	Область = ОбластьИнтервала(СтрокаТаблицыПредставления, ОписаниеТекущегоИнтервала);
	
	Если ОписаниеТекущегоИнтервала.Длина > 1 Тогда
		Область.Объединить();
	КонецЕсли;	

	Представление = "";
	
	Если ДанныеОВремениЗаДень.ПорядокЗначенийИзмерения.Количество() > 0 Тогда
		СвойстваВидаВремени = СвойстваЗначенияИзмерения(ДанныеОВремениЗаДень.ПорядокЗначенийИзмерения[0]);
	Иначе
		СвойстваВидаВремени =  СвойстваЗначенияИзмерения(Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка());
	КонецЕсли;	
		
	Если ДанныеОВремениЗаДень.ЦелосменноеОтсутствие Тогда
		Представление = СвойстваВидаВремени.БуквенныйКод;
		Область.ЦветФона = Новый Цвет(255, 250, 205);
	ИначеЕсли ДанныеОВремениЗаДень.Выходной Тогда
		Представление = СвойстваВидаВремени.БуквенныйКод;
		Область.ЦветФона = Новый Цвет(250, 235, 215);	
	ИначеЕсли ДанныеОВремениЗаДень.ЕстьРаботаВВыходной Тогда
		Область.ЦветФона = Новый Цвет(250, 235, 215);
		Если ДанныеОВремениЗаДень.ВсегоЧасов = 0 Тогда
			Представление = СвойстваВидаВремени.БуквенныйКод;
		Иначе
			Представление = ДанныеОВремениЗаДень.ВсегоЧасов;
			Если ДанныеОВремениЗаДень.ВсегоЧасовПереходящаяЧасть <> 0 Тогда
				Представление = Строка(Представление) + " (" + Строка(ДанныеОВремениЗаДень.ВсегоЧасовПереходящаяЧасть) + ")";
			КонецЕсли;	
		КонецЕсли;	
	ИначеЕсли ДанныеОВремениЗаДень.ЕстьРаботаСверхурочно Тогда
		Представление = ДанныеОВремениЗаДень.ВсегоЧасов;
		Если ДанныеОВремениЗаДень.ВсегоЧасовПереходящаяЧасть <> 0 Тогда
			Представление = Строка(Представление) + " (" + Строка(ДанныеОВремениЗаДень.ВсегоЧасовПереходящаяЧасть) + ")";
		КонецЕсли;	
	ИначеЕсли ДанныеОВремениЗаДень.ЕстьВнутрисменноеОтсутствие Тогда
		Представление = ДанныеОВремениЗаДень.ВсегоЧасов;
		Если ДанныеОВремениЗаДень.ВсегоЧасовПереходящаяЧасть <> 0 Тогда
			Представление = Строка(Представление) + " (" + Строка(ДанныеОВремениЗаДень.ВсегоЧасовПереходящаяЧасть) + ")";
		КонецЕсли;	
	Иначе
		Представление = ДанныеОВремениЗаДень.ВсегоЧасов;
		Если ДанныеОВремениЗаДень.ВсегоЧасовПереходящаяЧасть <> 0 Тогда
			Представление = Строка(Представление) + " (" + Строка(ДанныеОВремениЗаДень.ВсегоЧасовПереходящаяЧасть) + ")";
		Иначе
			СтруктураВидовВремениИЧасов = ОписаниеТекущегоИнтервала.ДанныеОВремениЗаДень.ЧасыПоВидамВремени;
			
			Явки =     ?(СтруктураВидовВремениИЧасов.Я = 0,"","Я "+СтруктураВидовВремениИЧасов.Я+" ");
			Вечерние = ?(СтруктураВидовВремениИЧасов.ВЧ = 0,"","ВЧ "+СтруктураВидовВремениИЧасов.ВЧ+" ");
			Ночные =   ?(СтруктураВидовВремениИЧасов.Н = 0,"","Н "+СтруктураВидовВремениИЧасов.Н);
			
			Представление = ""+Явки+Вечерние+Ночные;//СвойстваВидаВремени.БуквенныйКод+" "+ДанныеОВремениЗаДень.ВсегоЧасов;
		КонецЕсли;		
	КонецЕсли;	
		
	СтрокаТаблицыПредставления.Параметры["Часов" + ПостфиксИмяПоля] = Представление;
КонецПроцедуры
&Вместо("ДанныеОВремениЗаДеньПоВидуВремени")
&НаСервере
Функция ВИЛС_ДанныеОВремениЗаДеньПоВидуВремени(Измерение, СтрокиДанныхПоСотруднику, НомерДня, ТаблицаИтогов = Неопределено)
	ДанныеОВремениЗаДень = Новый Структура;
	ДанныеОВремениЗаДень.Вставить("Измерение", Измерение);
	ДанныеОВремениЗаДень.Вставить("ЗначенияИзмерения", Новый Соответствие);
	ДанныеОВремениЗаДень.Вставить("ПорядокЗначенийИзмерения", Новый Массив);
	ДанныеОВремениЗаДень.Вставить("ВсегоЧасов");
	ДанныеОВремениЗаДень.Вставить("ВсегоЧасовПереходящаяЧасть");
	ДанныеОВремениЗаДень.Вставить("НомерДня", НомерДня);
	ДанныеОВремениЗаДень.Вставить("ЦелосменноеОтсутствие", Истина);
	ДанныеОВремениЗаДень.Вставить("ЕстьВнутрисменноеОтсутствие", Ложь);
	ДанныеОВремениЗаДень.Вставить("ЕстьРаботаВВыходной", Ложь);
	ДанныеОВремениЗаДень.Вставить("ЕстьРаботаСверхурочно", Ложь);
	ДанныеОВремениЗаДень.Вставить("Выходной", Ложь);

	//begin fix Клещ А.Н. 02.07.2019  
	
	ЧасыПоВидамВремени = Новый Структура("Я,ВЧ,Н",0,0,0);
	//end fix Клещ А.Н. 02.07.2019
	
	
	ПостфиксИмяПоля = ПостфиксыПолейДанных[НомерДня];
	
	ВсегоЧасов = 0;
	ВсегоЧасовПереходящаяЧасть = 0;
	Для Каждого СтрокаДанных Из СтрокиДанныхПоСотруднику Цикл		
		ВидВремени = СтрокаДанных["ВидВремени" + ПостфиксИмяПоля];
		
		Часы = СтрокаДанных["Часов" + ПостфиксИмяПоля];
		
		
		Если ВидВремени.Пустая() Тогда
			Продолжить;
		КонецЕсли;	
		
		
		СвойстваВидаВремени = СвойстваЗначенияИзмерения(ВидВремени);
		
		Если СвойстваВидаВремени.Выходной Тогда
			ДанныеОВремениЗаДень.Выходной = Истина;
		ИначеЕсли СвойстваВидаВремени.СверхурочнаяРабота Тогда
			ДанныеОВремениЗаДень.ЕстьРаботаСверхурочно = Истина;
		ИначеЕсли СвойстваВидаВремени.РаботаВВыходной Тогда
			ДанныеОВремениЗаДень.ЕстьРаботаВВыходной = Истина;
		КонецЕсли;	
		
		Если СвойстваВидаВремени.Отсутствие Тогда
			ДанныеОВремениЗаДень.ЕстьВнутрисменноеОтсутствие = Истина;
		Иначе
	  		ДанныеОВремениЗаДень.ЦелосменноеОтсутствие = Ложь;
		КонецЕсли;	
				
		Если СвойстваЗначенияИзмерения(ВидВремени).РабочееВремя Тогда
			ВсегоЧасов = ВсегоЧасов + Часы;
			Если СтрокаДанных["ПереходящаяЧастьСмены" + ПостфиксИмяПоля] Тогда
				ВсегоЧасовПереходящаяЧасть = ВсегоЧасовПереходящаяЧасть + Часы;
			КонецЕсли;
			
			//begin fix Клещ А.Н. 02.07.2019 
			Если ЧасыПоВидамВремени.Свойство(ВидВремени.БуквенныйКод) Тогда 
				ЧасыПоВидамВремени.Вставить(ВидВремени.БуквенныйКод,ЧасыПоВидамВремени[ВидВремени.БуквенныйКод]+Часы);
			КонецЕсли;
			//end fix Клещ А.Н. 02.07.2019
			
		КонецЕсли;	
			
		Если ДанныеОВремениЗаДень.ЗначенияИзмерения[ВидВремени] = Неопределено Тогда
			ЧасовПоИзмерению = 0;
			ДанныеОВремениЗаДень.ПорядокЗначенийИзмерения.Добавить(ВидВремени);
			Дни = 1;
		Иначе
			ЧасовПоИзмерению = ДанныеОВремениЗаДень.ЗначенияИзмерения[ВидВремени];
			Дни = 0;
		КонецЕсли;	
		
		Если ТаблицаИтогов <> Неопределено Тогда
			Если ДанныеОВремениЗаДень.ЦелосменноеОтсутствие
				Или ДанныеОВремениЗаДень.Выходной Тогда
				
				УстановитьИтогиПоВидуВремени(ТаблицаИтогов, ВидВремени, 0, Дни);
			Иначе
				УстановитьИтогиПоВидуВремени(ТаблицаИтогов, ВидВремени, Часы, Дни);
			КонецЕсли;
		КонецЕсли;	
		
		ДанныеОВремениЗаДень.ЗначенияИзмерения.Вставить(ВидВремени, ЧасовПоИзмерению + Часы);
	КонецЦикла;	
	
	ДанныеОВремениЗаДень.ЕстьВнутрисменноеОтсутствие = ДанныеОВремениЗаДень.ЕстьВнутрисменноеОтсутствие И Не ДанныеОВремениЗаДень.ЦелосменноеОтсутствие; 
	
	ДанныеОВремениЗаДень.ВсегоЧасов = ВсегоЧасов;
	ДанныеОВремениЗаДень.ВсегоЧасовПереходящаяЧасть = ВсегоЧасовПереходящаяЧасть;
	
	//begin fix Клещ А.Н. 02.07.2019  
	ДанныеОВремениЗаДень.Вставить("ЧасыПоВидамВремени", ЧасыПоВидамВремени);
	//end fix Клещ А.Н. 02.07.2019
	
	Возврат ДанныеОВремениЗаДень;
КонецФункции
