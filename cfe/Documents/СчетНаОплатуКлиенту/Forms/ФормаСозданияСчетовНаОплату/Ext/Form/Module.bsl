
#Область ОбработчикиСобытийФормы

&НаСервере
//Процедура ВИЛС_ПриСозданииНаСервереИзменениеИКонтроль(Отказ, СтандартнаяОбработка)
Процедура ВИЛС_ПриСозданииНаСервереВместо(Отказ, СтандартнаяОбработка)
	// begin fix Suetin 05.12.2019 13:59:29
	КС = Новый КвалификаторыСтроки ();
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВИЛС_ТекстОшибки", Новый ОписаниеТипов("Строка",, КС)));
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	// end fix Suetin 05.12.2019 14:04:33
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснование = Параметры.ДокументОснование;
//#Удаление     // begin fix Suetin 11.11.2019 12:26:46
//	Если НЕ ПроверитьВозможностьСозданияСчетовНаОплату(ДокументОснование) Тогда
//		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			НСтр("ru = 'Не требуется вводить счет на оплату на основании документа %1. Расчеты ведутся по накладным.';
//				|en = 'It is not required to enter a proforma invoice based on document %1. Settlements are made based on invoices.'"),
//			ДокументОснование);
//		ВызватьИсключение Текст;
//	КонецЕсли;
//#КонецУдаления   // end fix Suetin 11.11.2019 12:26:51
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДокументОснование", ДокументОснование, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	
	Если ДокументОснование <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			
			Заголовок = Заголовок + ": " + ДокументОснование;
			
		Иначе
			
			ТекстДокумент = НСтр("ru = '%ТипДокумента% (новый)';
								|en = '%ТипДокумента% (new)'");
			ТекстДокумент = СтрЗаменить(ТекстДокумент, "%ТипДокумента%", ДокументОснование.Метаданные().Синоним);
			Заголовок = Заголовок + ": " + ТекстДокумент;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ШапкаОснование = Новый Структура("
		|Партнер,
		|Контрагент,
		|Договор,
		|Организация,
		|Валюта,
		|ДокументОснование,
		|СуммаДокумента,
		|НомерДокумента,
		|БанковскийСчет,
		|Префикс,
		|Касса,
		|ФормаОплаты, 
		|КонтактноеЛицо
		|");
		
	УстановитьВидимость();
		
	ОбновитьСервер();
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		
		Элементы.ТаблицаЭтаповСуммаПлатежа.Заголовок = СформироватьЗаголовокКолонкиСВалютой(Элементы.ТаблицаЭтаповСуммаПлатежа.Заголовок, Валюта);
		Элементы.ТаблицаЭтаповСуммаКОплате.Заголовок = СформироватьЗаголовокКолонкиСВалютой(Элементы.ТаблицаЭтаповСуммаКОплате.Заголовок, Валюта);
		Элементы.ТаблицаЭтаповСуммаОплаты.Заголовок  = СформироватьЗаголовокКолонкиСВалютой(Элементы.ТаблицаЭтаповСуммаОплаты.Заголовок, Валюта);
		
	КонецЕсли;
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаСервере
&Вместо("ОбновитьСервер")
Процедура ВИЛС_ОбновитьСервер()

	Если ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка                    КАК Договор,
		|	ДанныеДокумента.Партнер                   КАК Партнер,
		|	ДанныеДокумента.Контрагент                КАК Контрагент,
		|	ДанныеДокумента.Организация               КАК Организация,
		|	ДанныеДокумента.ВалютаВзаиморасчетов      КАК Валюта,
		|	ДанныеДокумента.Ссылка                    КАК ДокументОснование,
		|	0                                         КАК СуммаДокумента,
		|	ДанныеДокумента.Номер                     КАК НомерДокумента,
		|	ДанныеДокумента.БанковскийСчет            КАК БанковскийСчет,
		|	ДанныеДокумента.Организация.Префикс       КАК Префикс,
		|	Неопределено                              КАК Касса,
		|	Неопределено                              КАК ФормаОплаты,
		|	ДанныеДокумента.Ссылка                    КАК Документ,
		|	ДанныеДокумента.ХозяйственнаяОперация     КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.Статус                    КАК Статус,
		|	ДанныеДокумента.КонтактноеЛицо            КАК КонтактноеЛицо,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован) ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ                                     КАК ЕстьОшибкиСтатус
		|
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(РасчетыСКлиентами.Период, ДЕНЬ) КАК Период,
		|	СУММА(РасчетыСКлиентами.КОплате) КАК КОплате
		|ПОМЕСТИТЬ ТаблицаРасчеты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.ЗаказКлиента = &Договор
		|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И РасчетыСКлиентами.КОплате > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентами.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛОЖЬ                                                КАК Выбран,
		|	ЛОЖЬ                                                КАК Оплачена,
		|	1                                                   КАК ИндексКартинки,
		|	МАКСИМУМ(ТаблицаПериодов.КОплате)                   КАК СуммаПлатежа,
		|
		|	ВЫБОР КОГДА МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
		|			>= СУММА(ТаблицаКОплате.КОплате) ТОГДА
		|		МАКСИМУМ(ТаблицаПериодов.КОплате)
		|	ИНАЧЕ
		|		МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
		|			- (СУММА(ТаблицаКОплате.КОплате) - МАКСИМУМ(ТаблицаПериодов.КОплате))
		|	КОНЕЦ                                               КАК СуммаКОплате,
		|
		|	ТаблицаПериодов.Период                              КАК ДатаПлатежа,
		|
		|	ВЫБОР КОГДА МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
		|			>= СУММА(ТаблицаКОплате.КОплате) ТОГДА
		|		МАКСИМУМ(ТаблицаПериодов.КОплате)
		|	ИНАЧЕ
		|		МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
		|			- (СУММА(ТаблицаКОплате.КОплате) - МАКСИМУМ(ТаблицаПериодов.КОплате))
		|	КОНЕЦ / МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
		|	* 100                                               КАК ПроцентПлатежа,
		|
		|	МАКСИМУМ(ТаблицаПериодов.КОплате) - ВЫБОР КОГДА МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток
		|			- РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток) >= СУММА(ТаблицаКОплате.КОплате) ТОГДА
		|		МАКСИМУМ(ТаблицаПериодов.КОплате)
		|	ИНАЧЕ
		|		МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
		|			- (СУММА(ТаблицаКОплате.КОплате) - МАКСИМУМ(ТаблицаПериодов.КОплате))
		|	КОНЕЦ                                               КАК СуммаОплаты
		|
		|ИЗ
		|	ТаблицаРасчеты КАК ТаблицаПериодов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРасчеты КАК ТаблицаКОплате
		|		ПО ТаблицаПериодов.Период <= ТаблицаКОплате.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &Договор) КАК РасчетыСКлиентамиОстатки
		|		ПО ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПериодов.Период
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
		|		> СУММА(ТаблицаКОплате.КОплате) - МАКСИМУМ(ТаблицаПериодов.КОплате)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаПериодов.Период
		|");
		Запрос.УстановитьПараметр("Договор", ДокументОснование);

		МассивРезультатов       = Запрос.ВыполнитьПакет();

		Если МассивРезультатов[2].Пустой() Тогда

			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить счета на оплату. Остаток задолженности по договору %1 равен 0.';
			|en = 'It is not required to enter proforma invoices. Remaining contract debt %1 is 0.'"),
			ДокументОснование);
			ВызватьИсключение ТекстОшибки;

		КонецЕсли;

		ВыборкаШапка            = МассивРезультатов[0].Выбрать();
		// МассивРезультатов[1] - ТаблицаРасчеты
		ВыборкаЭтаповОплаты     = МассивРезультатов[2].Выбрать();

		Если ВыборкаШапка.Следующий() Тогда

			ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ВыборкаШапка.ДокументОснование,
			ВыборкаШапка.Статус,
			, // ЕстьОшибкиПроведен
			ВыборкаШапка.ЕстьОшибкиСтатус);

			ЗаполнитьЗначенияСвойств(ШапкаОснование, ВыборкаШапка);
			Валюта = ВыборкаШапка.Валюта;

		КонецЕсли;

		ТаблицаЭтапов.Очистить();

		Пока ВыборкаЭтаповОплаты.Следующий() Цикл

			НоваяСтрокаЭтап = ТаблицаЭтапов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЭтап, ВыборкаЭтаповОплаты);

		КонецЦикла;

		ИтогоСуммаКОплате    = ТаблицаЭтапов.Итог("СуммаКОплате");
		ИтогоСуммаОплаты     = ТаблицаЭтапов.Итог("СуммаОплаты");
		ИтогоСуммаПлатежа    = ТаблицаЭтапов.Итог("СуммаПлатежа");
		ИтогоПроцентПлатежа  = ТаблицаЭтапов.Итог("ПроцентПлатежа");

		ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());

		ИтогоОтмеченоКОплате = 0;

		Для Каждого ТекущийЭтап Из ТаблицаЭтапов Цикл

			Если Не ТекущийЭтап.Оплачен Тогда
				Если ТекущийЭтап.ДатаПлатежа <= ТекущаяДата Тогда
					ТекущийЭтап.Выбран = Истина;
					ИтогоОтмеченоКОплате = ИтогоОтмеченоКОплате + ТекущийЭтап.СуммаКОплате;
				КонецЕсли;

				Если ТекущийЭтап.ДатаПлатежа > ТекущаяДата Тогда
					ТекущийЭтап.Выбран = Истина;
					ИтогоОтмеченоКОплате = ИтогоОтмеченоКОплате + ТекущийЭтап.СуммаКОплате;
					Прервать;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	Иначе

		ТекстЗапросаДокумент = ДокументОснование.Метаданные().ПолноеИмя();

		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	1                                                   КАК Порядок,
		|	ЛОЖЬ                                                КАК Выбран,
		|	ЛОЖЬ                                                КАК Оплачена,
		|	1                                                   КАК ИндексКартинки,
		|	ЭтапыГрафикаОплаты.СуммаПлатежа                     КАК СуммаПлатежа,
		|	ЭтапыГрафикаОплаты.СуммаПлатежа                     КАК СуммаКОплате,
		|	ЭтапыГрафикаОплаты.ДатаПлатежа                      КАК ДатаПлатежа,
		|	ЭтапыГрафикаОплаты.ПроцентПлатежа                   КАК ПроцентПлатежа,
		|	ЛОЖЬ                                                КАК ЭтоЗалогЗаТару,
		|	ЛОЖЬ                                                КАК ЭтапСверхЗаказа
		|ИЗ
		|	" + ТекстЗапросаДокумент + ".ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
		|ГДЕ
		|	ЭтапыГрафикаОплаты.Ссылка  = &ДокументОснование
		|	И ЭтапыГрафикаОплаты.СуммаПлатежа <> 0
		|" + ?(ТекстЗапросаДокумент = "Документ.ЗаказКлиента" ИЛИ ТекстЗапросаДокумент = "Документ.ЗаявкаНаВозвратТоваровОтКлиента", "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2                                                   КАК Порядок,
		|	ЛОЖЬ                                                КАК Выбран,
		|	ЛОЖЬ                                                КАК Оплачена,
		|	1                                                   КАК ИндексКартинки,
		|	ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару                КАК СуммаПлатежа,
		|	ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару                КАК СуммаКОплате,
		|	ЭтапыГрафикаОплаты.ДатаПлатежа                      КАК ДатаПлатежа,
		|	ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару              КАК ПроцентПлатежа,
		|	ИСТИНА                                              КАК ЭтоЗалогЗаТару,
		|	ЛОЖЬ                                                КАК ЭтапСверхЗаказа
		|ИЗ
		|	" + ТекстЗапросаДокумент + ".ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
		|ГДЕ
		|	ЭтапыГрафикаОплаты.Ссылка  = &ДокументОснование
		|	И ЭтапыГрафикаОплаты.Ссылка.ТребуетсяЗалогЗаТару
		|	И ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ЛОЖЬ КАК Выбран,
		|	ЛОЖЬ КАК Оплачена,
		|	1 КАК ИндексКартинки,
		|	ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.КОплатеПриход, 0) КАК СуммаПлатежа,
		|	ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.КОплатеПриход, 0) КАК СуммаКОплате,
		|	РасчетыСКлиентамиОстаткиИОбороты.Период КАК ДатаПлатежа,
		|	0 КАК ПроцентПлатежа,
		|	ЛОЖЬ КАК ЭтоЗалогЗаТару,
		|	ИСТИНА КАК ЭтапСверхЗаказа
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, , РЕГИСТРАТОР, , ЗаказКлиента = &ДокументОснование) КАК РасчетыСКлиентамиОстаткиИОбороты
		|ГДЕ
		|	РасчетыСКлиентамиОстаткиИОбороты.Регистратор <> РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента
		|	И ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.КОплатеПриход, 0) > 0
		|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|
		// begin fix Suetin 11.11.2019 13:19:21
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4 КАК Порядок,
		|	ЛОЖЬ КАК Выбран,
		|	ЛОЖЬ КАК Оплачена,
		|	1 КАК ИндексКартинки,
		|	ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0) КАК СуммаПлатежа,
		|	ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0) КАК СуммаКОплате,
		|	&ТекущаяДата КАК ДатаПлатежа,
		|	0 КАК ПроцентПлатежа,
		|	ЛОЖЬ КАК ЭтоЗалогЗаТару,
		|	ЛОЖЬ КАК ЭтапСверхЗаказа
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &ДокументОснование) КАК ЗаказыКлиентовОстатки
		|ГДЕ
		|	ЗаказыКлиентовОстатки.ЗаказКлиента.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|	И ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0) > 0
		|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|
		// end fix Suetin 11.11.2019 13:19:33
		|","") + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПлатежа,
		|	Порядок
		|;
		|ВЫБРАТЬ
		|	ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОплатеРасход, 0)
		|		+ ЕСТЬNULL(РасчетыСКлиентамиОбороты.ОплачиваетсяОборот, 0) КАК СуммаОплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(, , Период, ЗаказКлиента = &ДокументОснование) КАК РасчетыСКлиентамиОбороты
		|;
		|ВЫБРАТЬ
		|	ДанныеДокумента.Партнер                   КАК Партнер,
		|	ДанныеДокумента.Контрагент                КАК Контрагент,
		|	ДанныеДокумента.Договор		              КАК Договор,
		|	ДанныеДокумента.Организация               КАК Организация,
		|	ДанныеДокумента.Валюта                    КАК Валюта,
		|	ДанныеДокумента.Ссылка                    КАК ДокументОснование,
		|" + ?(ТекстЗапросаДокумент = "Документ.ЗаявкаНаВозвратТоваровОтКлиента", "
		|	ВЫБОР КОГДА ДанныеДокумента.ТребуетсяЗалогЗаТару ТОГДА
		|		ДанныеДокумента.СуммаЗамены + ДанныеДокумента.СуммаВозвратнойТары
		|	ИНАЧЕ
		|		ДанныеДокумента.СуммаЗамены
		|	КОНЕЦ КАК СуммаДокумента,
		|", ?(ТекстЗапросаДокумент = "Документ.ЗаказКлиента", "
		|	ВЫБОР КОГДА ДанныеДокумента.ТребуетсяЗалогЗаТару ТОГДА
		|		ДанныеДокумента.СуммаДокумента + ДанныеДокумента.СуммаВозвратнойТары
		|	ИНАЧЕ
		|		ДанныеДокумента.СуммаДокумента
		|	КОНЕЦ КАК СуммаДокумента,
		|", "
		|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
		|")) + "
		|	ДанныеДокумента.Номер                     КАК НомерДокумента,
		|	ДанныеДокумента.БанковскийСчет            КАК БанковскийСчет,
		|	ДанныеДокумента.Организация.Префикс       КАК Префикс,
		|	ДанныеДокумента.Касса                     КАК Касса,
		|	//ДанныеДокументаКонтактноеЛицо
		|	ДанныеДокумента.ФормаОплаты               КАК ФормаОплаты,
		|	ДанныеДокумента.Ссылка                    КАК Документ,
		|" + ?(ТекстЗапросаДокумент <> "Документ.ОтчетКомиссионера", "
		|	ДанныеДокумента.Статус                    КАК Статус,
		|	ВЫБОР
		|		КОГДА
		|			ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|			ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                     КАК ЕстьОшибкиХозяйственнаяОперация,
		|	ДанныеДокумента.ХозяйственнаяОперация     КАК ХозяйственнаяОперация,
		|","
		|	НЕОПРЕДЕЛЕНО                              КАК Статус,
		|	ЛОЖЬ                                      КАК ЕстьОшибкиХозяйственнаяОперация,
		|	НЕОПРЕДЕЛЕНО                              КАК ХозяйственаяОперация,
		|") + "
		|	НЕ ДанныеДокумента.Проведен               КАК ЕстьОшибкиПроведен
		|ИЗ
		|	" + ТекстЗапросаДокумент + " КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &ДокументОснование
		|");

		Если ТекстЗапросаДокумент = "Документ.ЗаказКлиента" Тогда

			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДанныеДокументаКонтактноеЛицо","ДанныеДокумента.КонтактноеЛицо КАК КонтактноеЛицо,");

		КонецЕсли;
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());    // fix Suetin 11.11.2019 13:37:19
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента", ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
		МассивРезультатов       = Запрос.ВыполнитьПакет();
		ВыборкаДокументовЭтапы  = МассивРезультатов[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаДокументовОплата = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаШапка            = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Если ВыборкаШапка.Следующий() Тогда

			МассивДопустимыхСтатусов = Неопределено;
			ТипОснования = ТипЗнч(ДокументОснование);

			Если ТипОснования = Тип("ДокументСсылка.ЗаказКлиента") Тогда

				Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
				ВыборкаШапка.ДокументОснование,
				ВыборкаШапка.Статус,
				ВыборкаШапка.ЕстьОшибкиПроведен,
				Истина);

			ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда

				Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПроверитьВозможностьВводаНаОсновании(
				ВыборкаШапка.ДокументОснование,
				ВыборкаШапка.Статус,
				ВыборкаШапка.ЕстьОшибкиПроведен,
				Истина);

			КонецЕсли;

			Если ТекстЗапросаДокумент <> "Документ.ОтчетКомиссионера" Тогда

				Документы.СчетНаОплатуКлиенту.ПроверитьКорректностьХозяйственнойОперацииДокументаОснования(
				ВыборкаШапка.ЕстьОшибкиХозяйственнаяОперация,
				ВыборкаШапка.ХозяйственнаяОперация);

			КонецЕсли;

			ЗаполнитьЗначенияСвойств(ШапкаОснование, ВыборкаШапка);
			Валюта = ВыборкаШапка.Валюта;

		КонецЕсли;
		Если НЕ (ТипОснования = Тип("ДокументСсылка.ЗаказКлиента")                                             	// begin fix Suetin 04.12.2019 14:46:12
				и ДокументОснование.Договор.ПорядокРасчетов	= Перечисления.ПорядокРасчетов.ПоНакладным) Тогда   // end fix Suetin 04.12.2019 14:52:26
		Если ВыборкаДокументовЭтапы.Количество() = 0 Тогда

			ТекстОшибки = НСтр("ru = 'В документе %Документ% не заполнены этапы графика оплаты';
			|en = 'Payment schedule steps are not populated in document %Документ%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОснование);
			ВызватьИсключение ТекстОшибки;

		КонецЕсли;
		КонецЕсли;																								// fix Suetin 04.12.2019 14:52:47
		ТаблицаЭтапов.Очистить();

		Пока ВыборкаДокументовЭтапы.Следующий() Цикл

			НоваяСтрокаЭтап = ТаблицаЭтапов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЭтап, ВыборкаДокументовЭтапы);

		КонецЦикла;
		
		Если ТаблицаЭтапов.Итог("СуммаПлатежа") = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не требуется вводить счета на оплату. Сумма платежа по документу %Документ% равна 0.';
			|en = 'It is not required to enter proforma invoices. Payment amount by document %Документ% is 0.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОснование); 
			// begin fix Suetin 05.12.2019 13:52:03
			//ВызватьИсключение ТекстОшибки;
			НоваяСтрокаЭтап = ТаблицаЭтапов.Добавить();
			НоваяСтрокаЭтап.Выбран 			= Ложь;
			НоваяСтрокаЭтап.Оплачен 		= Ложь;
			НоваяСтрокаЭтап.ИндексКартинки 	= 1;
			НоваяСтрокаЭтап.СуммаПлатежа	= ВыборкаШапка.СуммаДокумента;
			НоваяСтрокаЭтап.СуммаКОплате	= ВыборкаШапка.СуммаДокумента;
			НоваяСтрокаЭтап.ДатаПлатежа		= ТекущаяДатаСеанса();
			НоваяСтрокаЭтап.ПроцентПлатежа	= 100;
			НоваяСтрокаЭтап.ЭтоЗалогЗаТару	= Ложь;
			НоваяСтрокаЭтап.ЭтапСверхЗаказа	= Ложь;
			ЭтотОбъект.ВИЛС_ТекстОшибки = ТекстОшибки;
			// end fix Suetin 05.12.2019 13:56:05
		КонецЕсли;

		Если ВыборкаДокументовОплата.Следующий() Тогда

			СуммаОстатокОплаты = 0;
			СуммаОстатокОплаты = ВыборкаДокументовОплата.СуммаОплаты;

			Для Каждого ТекущийЭтап Из ТаблицаЭтапов Цикл

				Если СуммаОстатокОплаты < ТекущийЭтап.СуммаПлатежа Тогда
					ТекущийЭтап.СуммаОплаты = СуммаОстатокОплаты;
					ТекущийЭтап.СуммаКОплате = ТекущийЭтап.СуммаПлатежа - ТекущийЭтап.СуммаОплаты;
					Прервать;
				КонецЕсли;

				ТекущийЭтап.СуммаОплаты  = ТекущийЭтап.СуммаПлатежа;
				ТекущийЭтап.СуммаКОплате = 0;
				ТекущийЭтап.Оплачен      = Истина;
				СуммаОстатокОплаты       = СуммаОстатокОплаты - ТекущийЭтап.СуммаПлатежа;

			КонецЦикла;

		КонецЕсли;

		ИтогоСуммаКОплате    = ТаблицаЭтапов.Итог("СуммаКОплате");
		ИтогоСуммаОплаты     = ТаблицаЭтапов.Итог("СуммаОплаты");
		ИтогоСуммаПлатежа    = ТаблицаЭтапов.Итог("СуммаПлатежа");
		ИтогоПроцентПлатежа  = ТаблицаЭтапов.Итог("ПроцентПлатежа");

		ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());

		ИтогоОтмеченоКОплате = 0;

		Для Каждого ТекущийЭтап Из ТаблицаЭтапов Цикл

			Если Не ТекущийЭтап.Оплачен Тогда
				Если ТекущийЭтап.ДатаПлатежа <= ТекущаяДата Тогда
					ТекущийЭтап.Выбран = Истина;
					ИтогоОтмеченоКОплате = ИтогоОтмеченоКОплате + ТекущийЭтап.СуммаКОплате;
				КонецЕсли;

				Если ТекущийЭтап.ДатаПлатежа > ТекущаяДата Тогда
					ТекущийЭтап.Выбран = Истина;
					ИтогоОтмеченоКОплате = ИтогоОтмеченоКОплате + ТекущийЭтап.СуммаКОплате;
					Прервать;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВИЛС_ПриОткрытииПосле(Отказ)
	Если Не ЭтотОбъект.ВИЛС_ТекстОшибки = "" Тогда
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВИЛС_ОбработкаОшибкиОткрытияФормы", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ЭтотОбъект.ВИЛС_ТекстОшибки, РежимДиалогаВопрос.ДаНет, 15, 
			КодВозвратаДиалога.Нет, НСтр("ru = 'Ввести счет?';
			|en = 'To introduce the account?'"), КодВозвратаДиалога.Нет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВИЛС_ОбработкаОшибкиОткрытияФормы(Результат, ДополнительныеПараметры) Экспорт
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект.Закрыть(Истина);
	КонецЕсли; 
КонецПроцедуры // (ВИЛС_ОбработкаОшибкиОткрытияФормы)
 
#КонецОбласти

#КонецОбласти
