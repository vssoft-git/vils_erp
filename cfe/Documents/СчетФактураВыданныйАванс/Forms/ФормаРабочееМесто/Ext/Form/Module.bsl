&ИзменениеИКонтроль("СформироватьСчетаФактурыСервер")
&НаСервере
Функция ВИЛС_СформироватьСчетаФактурыСервер(ДанныеСчетФактуры = Неопределено, ОбновитьБезусловно = Ложь)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПолученныеАвансы.СФсформирован,
	|	ПолученныеАвансы.Контрагент,
	|	ПолученныеАвансы.Сумма,
	|	ПолученныеАвансы.СтавкаНДС,
	|	ПолученныеАвансы.НаправлениеДеятельности,
	|	ПолученныеАвансы.СуммаНДС,
	|	ПолученныеАвансы.ДокументОснование,
	|	ПолученныеАвансы.ДатаВыписки,
	|	ПолученныеАвансы.ВалютаДокумента,
	|	ПолученныеАвансы.ВалютнаяСумма,
	|	ПолученныеАвансы.СуммаСчетаФактуры,
	|	ПолученныеАвансы.СчетФактура
	|ПОМЕСТИТЬ ТаблицаАвансы
	|ИЗ
	|	&ПолученныеАвансы КАК ПолученныеАвансы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПолученныеАвансы.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ИсторияКППКонтрагентов.Период) КАК Период,
	|	ИсторияКППКонтрагентов.Ссылка           КАК Ссылка
	|ПОМЕСТИТЬ ЗначенияКПП
	|ИЗ
	|	Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаАвансы КАК ТаблицаАвансы
	|	ПО ИсторияКППКонтрагентов.Ссылка = ТаблицаАвансы.Контрагент
	|		И ИсторияКППКонтрагентов.Период <= ТаблицаАвансы.ДатаВыписки
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияКППКонтрагентов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|
	|ВЫБРАТЬ
	|	ИсторияКППКонтрагентов.КПП    КАК КПП,
	|	ИсторияКППКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИсторическоеЗначениеКПП
	|ИЗ
	|	ЗначенияКПП КАК ЗначенияКПП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|		ПО ЗначенияКПП.Ссылка = ИсторияКППКонтрагентов.Ссылка
	|			И ЗначенияКПП.Период = ИсторияКППКонтрагентов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|
	|ВЫБРАТЬ
	|	ТаблицаАвансы.СФсформирован,
	|	ТаблицаАвансы.Контрагент                                                         КАК Контрагент,
	|	ТаблицаАвансы.Контрагент.ЮрФизЛицо                                               КАК ЮрФизЛицо,
	|	ЕСТЬNULL(ЕСТЬNULL(ИсторическоеЗначениеКПП.КПП, Контрагенты.КПП), """")           КАК КППКонтрагента,
	|	ЕСТЬNULL(Контрагенты.ИНН, """")                                                  КАК ИННКонтрагента,
	|	ТаблицаАвансы.Сумма                                                              КАК Сумма,
	|	ТаблицаАвансы.СтавкаНДС,
	|	ТаблицаАвансы.НаправлениеДеятельности,
	|	ТаблицаАвансы.СуммаНДС,
	|	ТаблицаАвансы.ДокументОснование                                                  КАК ДокументОснование,
	|	&ИдентификаторГосКонтракта                                                       КАК ИдентификаторГосКонтракта,
	|	ТаблицаАвансы.ДатаВыписки,
	|	ТаблицаАвансы.ВалютаДокумента,
	|	ТаблицаАвансы.ВалютнаяСумма,
	|	ТаблицаАвансы.СуммаСчетаФактуры                                                  КАК СуммаСчетаФактуры,
	|	ТаблицаАвансы.СчетФактура,
	|	ЕСТЬNULL(ВводОстатков.НомерРасчетногоДокумента, ДанныеПервичныхДокументов.Номер) КАК НомерПлатежноРасчетногоДокумента,
	|	ЕСТЬNULL(ВводОстатков.ДатаРасчетногоДокумента, ДанныеПервичныхДокументов.Дата)   КАК ДатаПлатежноРасчетногоДокумента
	|ИЗ
	|	ТаблицаАвансы КАК ТаблицаАвансы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ВводОстатков.РасчетыСПартнерами КАК ВводОстатков
	|	ПО
	|		ТаблицаАвансы.ДокументОснование = ВводОстатков.Ссылка
	|		И ТаблицаАвансы.Контрагент = ВводОстатков.Контрагент
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ПО
	|		ДанныеПервичныхДокументов.Организация = &Организация
	|		И ТаблицаАвансы.ДокументОснование = ДанныеПервичныхДокументов.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ПО Контрагенты.Ссылка = ТаблицаАвансы.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсторическоеЗначениеКПП КАК ИсторическоеЗначениеКПП
	|			ПО ИсторическоеЗначениеКПП.Ссылка = Контрагенты.Ссылка
	|
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаАвансы.ДатаВыписки,
	|	ТаблицаАвансы.Контрагент,
	|	ТаблицаАвансы.ДокументОснование
	|
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаСчетаФактуры),
	|	МАКСИМУМ(СчетФактура),
	|	МАКСИМУМ(ДатаВыписки),
	|	МАКСИМУМ(НомерПлатежноРасчетногоДокумента),
	|	МАКСИМУМ(ДатаПлатежноРасчетногоДокумента),
	|	МАКСИМУМ(ИдентификаторГосКонтракта)
	|ПО
	|	ДокументОснование, 
	|	Контрагент
	|";

	//++ НЕ УТ
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
	"&ИдентификаторГосКонтракта",
	"ВЫРАЗИТЬ(ТаблицаАвансы.ДокументОснование КАК Документ.ПоступлениеБезналичныхДенежныхСредств).БанковскийСчет.ГосударственныйКонтракт.Код");
	//-- НЕ УТ

	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
	"&ИдентификаторГосКонтракта",
	"НЕОПРЕДЕЛЕНО");

	Если ДанныеСчетФактуры <> Неопределено Тогда
		Строка = ПолученныеАвансы.НайтиПоИдентификатору(ДанныеСчетФактуры);
		Отбор = Новый Структура("ДокументОснование", Строка.ДокументОснование);
		Запрос.УстановитьПараметр("ПолученныеАвансы",  ПолученныеАвансы.Выгрузить(Отбор))
	Иначе
		Запрос.УстановитьПараметр("ПолученныеАвансы",  ПолученныеАвансы.Выгрузить());
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",       Организация);

	ТаблицаОбработанных = Новый ТаблицаЗначений;
	ТаблицаОбработанных.Колонки.Добавить("ДокументОснование");
	ТаблицаОбработанных.Колонки.Добавить("Контрагент");
	ТаблицаОбработанных.Колонки.Добавить("ПараметрыСчетаФактуры");

	ТаблицаВозниклиОшибки = Новый ТаблицаЗначений;
	ТаблицаВозниклиОшибки.Колонки.Добавить("ДокументОснование");
	ТаблицаВозниклиОшибки.Колонки.Добавить("Контрагент");
	ТаблицаВозниклиОшибки.Колонки.Добавить("ТекстСообщения");

	ВыборкаДокументОснование = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументОснование.Следующий() Цикл
		ВыборкаКонтрагент = ВыборкаДокументОснование.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагент.Следующий() Цикл
			ДатаСчетаФактуры = КонецДня(ВыборкаДокументОснование.ДатаВыписки);
			Если Не ЗначениеЗаполнено(ВыборкаКонтрагент.СчетФактура) Тогда
				СчетФактураОбъект = Документы.СчетФактураВыданныйАванс.СоздатьДокумент();
				СчетФактураОбъект.Организация = Организация;
				ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(ДатаСчетаФактуры);
				Если ВерсияКодовВидовОпераций >= 3 И ТипЗнч(ВыборкаДокументОснование.ДокументОснование) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте")
					И ВыборкаКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда

					СчетФактураОбъект.КодВидаОперации = "26";
				Иначе
					СчетФактураОбъект.КодВидаОперации = "02";
				КонецЕсли;
			Иначе
				СчетФактураОбъект = ВыборкаКонтрагент.СчетФактура.ПолучитьОбъект();
			КонецЕсли; 

			ЗаполнитьЗначенияСвойств(СчетФактураОбъект, ВыборкаКонтрагент);
			СчетФактураОбъект.Дата = ДатаСчетаФактуры;
			СчетФактураОбъект.ДатаВыставления = ДатаСчетаФактуры;
			СчетФактураОбъект.ПравилоОтбораАванса = ПравилоОтбораАванса;

			Выборка = ВыборкаКонтрагент.Выбрать();
			ПараметрыСчетаФактуры = Новый Соответствие;

			Если ВыборкаКонтрагент.Сумма <> ВыборкаКонтрагент.СуммаСчетаФактуры ИЛИ ОбновитьБезусловно Тогда
				СчетФактураОбъект.Авансы.Очистить();
				Пока Выборка.Следующий() Цикл
					НоваяСтрокаАванса = СчетФактураОбъект.Авансы.Добавить();
					НоваяСтрокаАванса.ТипЗапасов              = Перечисления.ТипыЗапасов.Товар;
					НоваяСтрокаАванса.Сумма                   = Выборка.Сумма;
					НоваяСтрокаАванса.СтавкаНДС               = Выборка.СтавкаНДС;
					НоваяСтрокаАванса.СуммаНДС                = Выборка.СуммаНДС;
					НоваяСтрокаАванса.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;

					ПараметрыСчетаФактуры.Вставить(НоваяСтрокаАванса.СтавкаНДС, Выборка.Сумма);
				КонецЦикла; 
			КонецЕсли;

			Выборка.Сбросить();
			Если Выборка.Следующий() Тогда
				СчетФактураОбъект.ИННКонтрагента = Выборка.ИННКонтрагента;
				СчетФактураОбъект.КППКонтрагента = Выборка.КППКонтрагента;
			КонецЕсли;

			Если ИспользоватьЗаказыКлиентов Тогда
				// Заполним товары счета-фактуры по заказам
				Товары = Документы.СчетФактураВыданныйАванс.ТоварыЗаказовКлиентов(СчетФактураОбъект.ДокументОснование);
				Если Товары.Количество() <> 0 Тогда
					ТаблицаАвансы = СчетФактураОбъект.Авансы.Выгрузить();
					Документы.СчетФактураВыданныйАванс.РаспределитьАвансыПоТоварам(ТаблицаАвансы, Товары, СчетФактураОбъект.ДокументОснование);
					СчетФактураОбъект.Авансы.Загрузить(ТаблицаАвансы);
				КонецЕсли;
			КонецЕсли;
			
#Удаление
			// Дозаполним остальные реквизиты документа
			СчетФактураОбъект.Заполнить(Неопределено);
#КонецУдаления
#Вставка
			Если ЗначениеЗаполнено(ЭтотОбъект.ВИЛС_Руководитель) Тогда
				СчетФактураОбъект.Руководитель = ЭтотОбъект.ВИЛС_Руководитель;
			КонецЕсли; 
			Если ЗначениеЗаполнено(ЭтотОбъект.ВИЛС_ГлавныйБухгалтер) Тогда
				СчетФактураОбъект.ГлавныйБухгалтер = ЭтотОбъект.ВИЛС_ГлавныйБухгалтер;
			КонецЕсли;
			// Дозаполним остальные реквизиты документа
			СчетФактураОбъект.Заполнить(Неопределено);
#КонецВставки

			// Проведем счет-фактуру
			Попытка
				СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ПараметрыСчетаФактуры.Вставить("СчетФактура", СчетФактураОбъект.Ссылка);

				НоваяСтрока = ТаблицаОбработанных.Добавить();
				НоваяСтрока.ДокументОснование = ВыборкаКонтрагент.ДокументОснование;
				НоваяСтрока.Контрагент = ВыборкаКонтрагент.Контрагент;
				НоваяСтрока.ПараметрыСчетаФактуры = ПараметрыСчетаФактуры;

			Исключение

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось выполнить по причине %1';
				|en = 'Cannot execute due to %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Формирование счетов-фактур на аванс.';
				|en = 'Generate tax invoices for advance.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения); 

				НоваяСтрока = ТаблицаВозниклиОшибки.Добавить();
				НоваяСтрока.ДокументОснование = ВыборкаКонтрагент.ДокументОснование;
				НоваяСтрока.Контрагент = ВыборкаКонтрагент.Контрагент;
				НоваяСтрока.ТекстСообщения = ТекстСообщения;

			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	ТаблицаОбработанных.Индексы.Добавить("ДокументОснование, Контрагент");
	ТаблицаВозниклиОшибки.Индексы.Добавить("ДокументОснование, Контрагент");

	// Обновим сведения о счетах-фактурах
	Если ДанныеСчетФактуры <> Неопределено Тогда
		Строка = ПолученныеАвансы.НайтиПоИдентификатору(ДанныеСчетФактуры);
		ОбновитьДанныеОСчетахФактурахВСтроке(Строка, ТаблицаОбработанных, ТаблицаВозниклиОшибки);
	Иначе
		Для каждого Строка Из ПолученныеАвансы Цикл
			ОбновитьДанныеОСчетахФактурахВСтроке(Строка, ТаблицаОбработанных, ТаблицаВозниклиОшибки);
		КонецЦикла;
	КонецЕсли;

	Результат = (ТаблицаВозниклиОшибки.Количество() = 0);
	Возврат Результат;

КонецФункции
