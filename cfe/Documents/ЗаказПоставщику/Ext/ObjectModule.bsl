#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

&Вместо("ОбработкаПроверкиЗаполнения")
Процедура ВИЛС_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	// begin fix Suetin 16.10.2019 3:55:53
	МассивНепроверяемыхРеквизитов.Добавить("ПеревозчикПартнер");
	МассивНепроверяемыхРеквизитов.Добавить("АдресДоставкиПеревозчика");
	// end fix Suetin 16.10.2019 3:56:05
	Если (ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)
		И Не ЗакупкиСервер.ЭтоХозяйственнаяОперацияРаздельнойЗакупки(ХозяйственнаяОперация)
		И (Не ЗначениеЗаполнено(Соглашение)
			Или Не Документы.ЗаказПоставщику.ЗначениеРеквизитаОбъектаТипаБулево(Соглашение, "ИспользуютсяДоговорыКонтрагентов")) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
		
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	// Срок действия заказа должен быть не меньше даты документа
	Если Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован И
		ЗначениеЗаполнено(ДатаСогласования) И ДатаСогласования < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru = 'Дата согласования должна быть не меньше даты документа %Дата%';
							|en = 'Approval date shall not be less than document date %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата, "ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаСогласования",
			,
			Отказ);
		
	КонецЕсли;
	
	ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ЭтотОбъект, "Товары", "Отменено");
	
	Если Не ПоступлениеОднойДатой ИЛИ 
		ПоступлениеОднойДатой И 
		НЕ(Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден Или
			Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт) 
		ИЛИ ПоступлениеОднойДатой И ВсеСтрокиОтменены Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПоступления");
		
	КонецЕсли;
	
	// Желаемая дата поступления в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru = 'Желаемая дата поступления должна быть не меньше даты документа %Дата%';
							|en = 'Required receipt date should not be less than document date %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаПоступления",
			,
			Отказ);
		
	КонецЕсли;
	
	// Дата поступления в шапке должна быть не меньше даты документа
	Если ПоступлениеОднойДатой И 
		ЗначениеЗаполнено(ДатаПоступления) И 
		ДатаПоступления < НачалоДня(Дата)
		И НЕ ВсеСтрокиОтменены Тогда
	
		ТекстОшибки = НСтр("ru = 'Дата поступления должна быть не меньше даты документа %Дата%';
							|en = 'Receipt date cannot be less than document date%Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаПоступления",
			,
			Отказ);
		
	КонецЕсли;
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(ВариантПриемкиТоваров);
	
	ИспользуетсяНеотфактурованнаяПоставка = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	ИспользуетсяНеотфактурованнаяПоставка = ИспользуетсяНеотфактурованнаяПоставка
		И ?(ЗначениеЗаполнено(Договор),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВариантОформленияЗакупок") = Перечисления.ВариантыОформленияЗакупок.НеотфактурованныеПоставки,
			Ложь);
	
	Если НакладнаяЯвляетсяРаспоряжением
		И ИспользуетсяНеотфактурованнаяПоставка Тогда
		
		ОперацииНеотфактурованнойПоставки = Новый Массив();
		ОперацииНеотфактурованнойПоставки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
		ОперацииНеотфактурованнойПоставки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
		ОперацииНеотфактурованнойПоставки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки);
		ОперацииНеотфактурованнойПоставки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка);
		
		Если ОперацииНеотфактурованнойПоставки.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
			
			ТекстОшибки = НСтр("ru = 'Использование варианта приемки ""по накладным"" не поддерживается для операций неотфактурованной поставки.
				|Рекомендуется использовать вариант приемки по соглашениям или по заказам.';
				|en = 'Cannot use ""by invoices"" receiving option for uninvoiced delivery operations.
				| It is recommended that you use receiving option by agreements or orders.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				,
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ДатаПоступления");
	
	// Вспомогательные реквизиты для проверки учета НДС
	ПоФактИспользованию			= (ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию);
	ИзДокумента					= Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента;
	НаНаправленияДеятельности	= Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
	//++ НЕ УТ
	НаПроизводственныеЗатраты	= Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты;
	//-- НЕ УТ
	ПартионныйУчетВключен		= РасчетСебестоимостиПовтИсп.ПартионныйУчетВключен(НачалоМесяца(Дата));
	ИспользоватьДоходыРасходы	= ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	
	СоответствиеКодовСтрок = Новый Соответствие;
	
	Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
		
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""Товары""';
								|en = 'in line %НомерСтроки% of the ""Goods"" list'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
		
		// Дата поступления в тч Товары обязательна к заполнению только для заказов в 
		// статусах Подтвержден, КПоступлению, Закрыт.
		Если Не ПоступлениеОднойДатой
			И (Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден
				Или Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт)
			И Не Товары[ТекИндекс].Отменено
			И Не ЗначениеЗаполнено(Товары[ТекИндекс].ДатаПоступления) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Дата поступления""';
								|en = 'Column ""Receipt date"" is not filled in'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ДатаПоступления"),
				,
				Отказ);
			
		КонецЕсли;
		
		// Дата поступления в тч Товары должна быть не меньше даты документа
		Если Не ПоступлениеОднойДатой И ЗначениеЗаполнено(Товары[ТекИндекс].ДатаПоступления) И Товары[ТекИндекс].ДатаПоступления < НачалоДня(Дата) Тогда
		
			ТекстОшибки = НСтр("ru = 'Дата поступления должна быть не меньше даты документа %Дата%';
								|en = 'Receipt date cannot be less than document date%Дата%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ДатаПоступления"),
				,
				Отказ);
			
		КонецЕсли;
		
		// Причина отмены обязательна для заполнения в строках без признака Отменено
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам")
			И Товары[ТекИндекс].Отменено
			И Не ЗначениеЗаполнено(Товары[ТекИндекс].ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru = 'Необходимо указать причину отмены';
								|en = 'You must specify cancellation reason'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ПричинаОтмены"),
				,
				Отказ);
			
		КонецЕсли;
		
		// Статья расходов не должна ссылаться на налогообложение в документе закупки,
		// если у организации включено налогообложение по факт. использованию.
		Если ПартионныйУчетВключен
			И ПоФактИспользованию
			И Не Товары[ТекИндекс].Отменено
			И ЗначениеЗаполнено(Товары[ТекИндекс].СтатьяРасходов) Тогда
			
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Товары[ТекИндекс].СтатьяРасходов,
				"ВариантРаздельногоУчетаНДС, ВариантРаспределенияРасходовРегл");
			
				Если (Реквизиты.ВариантРаспределенияРасходовРегл = НаНаправленияДеятельности
					//++ НЕ УТ
					ИЛИ Реквизиты.ВариантРаспределенияРасходовРегл = НаПроизводственныеЗатраты
					//-- НЕ УТ
					)
					И Реквизиты.ВариантРаздельногоУчетаНДС = ИзДокумента Тогда
				
				ТекстОшибки = НСтр("ru = 'При использовании учета НДС по фактическому использованию, у статьи расходов должен быть выбран раздельный учет НДС по расходам: ""НДС распределяется по видам налогообложения пропорционально выручке""';
									|en = 'When using VAT accounting by actual usage, separate VAT accounting is to be selected for the expense item: ""VAT is allocated by taxation kinds in proportion to revenue"" '");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "СтатьяРасходов"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Товары[ТекИндекс].СтатьяРасходов) И Товары[ТекИндекс].СписатьНаРасходы И ИспользоватьДоходыРасходы Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Статья расходов""';
								|en = 'The ""Expense item"" field is required'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "СтатьяРасходов"),
				,
				Отказ);
			
		КонецЕсли;
		
		ЗаказыСервер.ПроверитьДублиКодовСтрокВТаблице(ЭтотОбъект,
			Товары[ТекИндекс].КодСтроки,
			Товары[ТекИндекс].НомерСтроки,
			СоответствиеКодовСтрок,
			Отказ);
		
	КонецЦикла;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Подразделение");
	ТипыНоменклатуры = Новый Массив;
	ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ТекстОшибки = НСтр("ru = 'Не указан получатель работ (услуг) в строке %1 списка Товары';
						|en = 'Party receiving works (services) in line %1 of the Goods list is not specified.'");
	ЗапасыСервер.ПроверитьЗаполнениеПодразделенияВТабличнойЧасти(ЭтотОбъект, Товары, ТипыНоменклатуры, ТекстОшибки, Отказ);
	
	// Проверим корректность заполнения этапов графика оплаты
		
	Если ЗначениеЗаполнено(Дата) Тогда
		ДатаДокумента = НачалоДня(Дата);
	КонецЕсли;
	
	ПорядокРасчетовПоДокументу = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	
	ГрафикИсполненияВДоговоре = Ложь;
	Если ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И ЗначениеЗаполнено(Договор) Тогда
		ГрафикИсполненияВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ЗаданГрафикИсполнения");
	КонецЕсли;
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
		И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи
		И ПорядокРасчетовПоДокументу <> Перечисления.ПорядокРасчетов.ПоНакладным
		И Не ГрафикИсполненияВДоговоре Тогда
		
		СуммаЗаказанныхСтрок = ПолучитьСуммуЗаказанныхСтрок();
		СуммаЗалоговойТары = ПолучитьСуммуЗаказанныхСтрок(Истина);
		
		ЗакупкиСервер.ПроверитьКорректностьЭтаповГрафикаОплаты(
			ЭтотОбъект,
			СуммаЗаказанныхСтрок,
			СуммаЗалоговойТары,
			Истина,
			Отказ,
			Истина);
		
	КонецЕсли;
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ЗаказПоставщику.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект,
		Новый Структура("Товары"),
		МассивНепроверяемыхРеквизитов,
		Отказ);
	
	ДоставкаТоваров.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	
	Если ЗначениеЗаполнено(НаправлениеДеятельности) 
		ИЛИ НЕ НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным И НЕ ЗначениеЗаполнено(ПорядокОплаты) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПорядокОплаты");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ПроверитьИзменениеХозяйственнойОперации(Отказ);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект, Отказ);
	
	ПараметрыПроверки = УчетНДСУП.ПараметрыПроверкиЗаполнениеДокументаПоНалогообложениюНДСЗакупки();
	ПараметрыПроверки.ИмяТабличнойЧасти = "Товары";
	ПараметрыПроверки.ИмяРеквизитаСтатьяРасходов = "СтатьяРасходов";
	ПараметрыПроверки.ИмяРеквизитаАналитикаРасходов = "АналитикаРасходов";
	УчетНДСУП.ПроверитьЗаполнениеДокументаЗакупкиПоНалогообложениюНДС(ЭтотОбъект, НалогообложениеНДС, ПараметрыПроверки, Отказ);
	
	ПараметрыПроверки = УчетНДСУП.ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС();
	ПараметрыПроверки.ИмяТабличнойЧасти = "Товары";
	ПараметрыПроверки.ИмяРеквизитаСтатьяРасходов = "СтатьяРасходов";
	ПараметрыПроверки.ИмяРеквизитаАналитикаРасходов = "АналитикаРасходов";
	УчетНДСУП.ПроверитьЗаполнениеДокументаПоВидуДеятельностиНДС(ЭтотОбъект, ЗакупкаПодДеятельность, ПараметрыПроверки, Отказ);

КонецПроцедуры

#КонецОбласти

#КонецЕсли
