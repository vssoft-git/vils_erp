
&После("ДобавитьКомандыПечати")
Процедура ВИЛС_ДобавитьКомандыПечати(КомандыПечати)
	// ИНВ-1 (Инвентаризационная опись)
	КомандаПечати = КомандыПечати.Вставить(1);
	КомандаПечати.Идентификатор = "ИНВ1_ВИЛС";
	КомандаПечати.Представление = НСтр("ru = 'ИНВ-1 (Инвентаризационная опись) (ВИЛС)';
										|en = 'INV-1 (Stocktaking sheet) (VILS)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
КонецПроцедуры

&После("Печать")
Процедура ВИЛС_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ1_ВИЛС") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ИНВ1_ВИЛС",
			НСтр("ru = 'ИНВ-1 (Инвентаризационная опись) (ВИЛС)';
				|en = 'INV-1 (Stocktaking sheet) (VILS)'"),
			ВИЛС_ПечатьИНВ1(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
КонецПроцедуры

Функция ВИЛС_ПечатьИНВ1(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	// Создаем колонки Таблицы итогов
	ТаблицаИтогов = Новый ТаблицаЗначений();
	ТаблицаИтогов.Колонки.Добавить("ПорядковыйНомерИтогов");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеФактическое");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьФактическая");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеПоДаннымУчета");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьПоДаннымУчета");
	ТаблицаИтогов.Колонки.Добавить("КоличествоФактическоеПрописью");
	ТаблицаИтогов.Колонки.Добавить("СтоимостьФактическаяПрописью");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("МОЛ",                  НСтр("ru = 'Лицо(а), ответственное(ые) за сохранность основных средств:';
																	|en = 'Person(s) responsible for fixed asset safety:'"));
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", НСтр("ru = 'Председатель комиссии';
																	|en = 'Commission chairperson'"));
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        НСтр("ru = 'Члены комиссии';
																	|en = 'Commission members'"));
	ЗаголовокРазделаПодписей.Вставить("Проверяющий",          НСтр("ru = 'Указанные в настоящей описи данные и расчеты проверил';
																	|en = 'Data and calculations specified in the given sheet are checked by'"));
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	// Загрузим настройки пользователя
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИНВ1";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияОС.ПФ_MXL_ИНВ1");
	
	// Получаем области макета для вывода в табличный документ
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	Расписка         = Макет.ПолучитьОбласть("Расписка");
	Примечание       = Макет.ПолучитьОбласть("Примечание");
	Подпись          = Макет.ПолучитьОбласть("Подпись");
	ПолеДаты         = Макет.ПолучитьОбласть("ПолеДаты");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ИтогоПоОписи     = Макет.ПолучитьОбласть("ИтогоПоОписи");
	Итоги            = Макет.ПолучитьОбласть("Итоги");
	Подсчеты         = Макет.ПолучитьОбласть("Подсчеты");
	Претензии        = Макет.ПолучитьОбласть("Претензии");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнвентаризацияОСОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОСОС.Ссылка.Дата КАК Дата,
	|	ИнвентаризацияОСОС.НомерСтроки КАК НомерСтроки,
	|	ИнвентаризацияОСОС.ОбъектУчета КАК ОсновноеСредство,
	|	ИнвентаризацияОСОС.МОЛ КАК МОЛ,
	|	ИнвентаризацияОСОС.Ссылка.Организация КАК Организация,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая КАК СтоимостьФактическая,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеПоДаннымУчета,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеФактическое,
	|	МАКСИМУМ(МестонахождениеОСБухгалтерскийУчет.Период) КАК МаксПериодМеста,
	|	МАКСИМУМ(ПервоначальныеСведенияОСБухгалтерскийУчет.Период) КАК МаксПериодБУ
	|ПОМЕСТИТЬ ОСИОрганизации
	|ИЗ
	|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
	|		ПО ИнвентаризацияОСОС.ОбъектУчета = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|			И ИнвентаризацияОСОС.Ссылка.Организация = МестонахождениеОСБухгалтерскийУчет.Организация
	|			И ИнвентаризацияОСОС.Ссылка.Дата >= МестонахождениеОСБухгалтерскийУчет.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО ИнвентаризацияОСОС.ОбъектУчета = ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|			И ИнвентаризацияОСОС.Ссылка.Организация = ПервоначальныеСведенияОСБухгалтерскийУчет.Организация
	|			И ИнвентаризацияОСОС.Ссылка.Дата >= ПервоначальныеСведенияОСБухгалтерскийУчет.Период
	|			И НЕ ПервоначальныеСведенияОСБухгалтерскийУчет.Регистратор ССЫЛКА Документ.ПоступлениеПредметовЛизинга
	|ГДЕ
	|	ИнвентаризацияОСОС.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияОСОС.Ссылка,
	|	ИнвентаризацияОСОС.ОбъектУчета,
	|	ИнвентаризацияОСОС.МОЛ,
	|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета,
	|	ИнвентаризацияОСОС.СтоимостьФактическая,
	|	ИнвентаризацияОСОС.НомерСтроки,
	|	ИнвентаризацияОСОС.Ссылка.Организация,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ИнвентаризацияОСОС.Ссылка.Дата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОСИОрганизации.Ссылка,
	|	ОСИОрганизации.НомерСтроки,
	|	ОСИОрганизации.ОсновноеСредство,
	|	ОСИОрганизации.Организация,
	|	ОСИОрганизации.СтоимостьПоДаннымУчета,
	|	ОСИОрганизации.СтоимостьФактическая,
	|	ОСИОрганизации.НаличиеПоДаннымУчета,
	|	ОСИОрганизации.НаличиеФактическое,
	|	ОСИОрганизации.МаксПериодМеста,
	|	ОСИОрганизации.МаксПериодБУ,
	|	ОСИОрганизации.ОсновноеСредство.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(МестонахождениеОСБухгалтерскийУчет.МОЛ, НЕОПРЕДЕЛЕНО) КАК МОЛ,
	|	ЕСТЬNULL(ПоступлениеАрендованныхОС.Ссылка, НЕОПРЕДЕЛЕНО) КАК ДокументАренды,
	|	ВЫБОР
	|		КОГДА НЕ ПринятиеКУчетуОС.Ссылка ЕСТЬ NULL 
	|			ТОГДА ""Принятие к учету""
	|		КОГДА НЕ ПоступлениеАрендованныхОС.Ссылка ЕСТЬ NULL 
	|			ТОГДА ""Поступление арендованных ОС""
	|		КОГДА НЕ ПоступлениеПредметовЛизинга.Ссылка ЕСТЬ NULL 
	|			ТОГДА ""Поступление предметов лизинга""
	|		КОГДА НЕ ВводОстатковВнеоборотныхАктивов.Ссылка ЕСТЬ NULL И ВводОстатковВнеоборотныхАктивов.НазваниеДокументаПринятияКУчету <> """"
	|			ТОГДА ВводОстатковВнеоборотныхАктивов.НазваниеДокументаПринятияКУчету
	|		КОГДА НЕ ВводОстатковВнеоборотныхАктивов.Ссылка ЕСТЬ NULL
	|				ИЛИ НЕ ВводОстатковВнеоборотныхАктивов24.Ссылка ЕСТЬ NULL
	|			ТОГДА ""Ввод остатков""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДокументАрендыПредставление,
	|	ВЫБОР
	|		КОГДА НЕ ПринятиеКУчетуОС.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПринятиеКУчетуОС.Номер
	|		КОГДА НЕ ПоступлениеАрендованныхОС.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПоступлениеАрендованныхОС.Номер
	|		КОГДА НЕ ПоступлениеПредметовЛизинга.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПоступлениеПредметовЛизинга.Номер
	|		КОГДА НЕ ВводОстатковВнеоборотныхАктивов.Ссылка ЕСТЬ NULL И ВводОстатковВнеоборотныхАктивов.НомерДокументаПринятияКУчету <> """"
	|			ТОГДА ВводОстатковВнеоборотныхАктивов.НомерДокументаПринятияКУчету
	|		КОГДА НЕ ВводОстатковВнеоборотныхАктивов.Ссылка ЕСТЬ NULL
	|			ТОГДА ВводОстатковВнеоборотныхАктивов.Ссылка.Номер
	|		КОГДА НЕ ВводОстатковВнеоборотныхАктивов24.Ссылка ЕСТЬ NULL
	|			ТОГДА ВводОстатковВнеоборотныхАктивов24.Ссылка.Номер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДокументАрендыНомер,
	|	ВЫБОР
	|		КОГДА НЕ ПринятиеКУчетуОС.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПринятиеКУчетуОС.Дата
	|		КОГДА НЕ ПоступлениеАрендованныхОС.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПоступлениеАрендованныхОС.Дата
	|		КОГДА НЕ ПоступлениеПредметовЛизинга.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПоступлениеПредметовЛизинга.Дата
	|		КОГДА НЕ ВводОстатковВнеоборотныхАктивов.Ссылка ЕСТЬ NULL
	|			ТОГДА ВводОстатковВнеоборотныхАктивов.ДатаПринятияКУчету
	|		КОГДА НЕ ВводОстатковВнеоборотныхАктивов24.Ссылка ЕСТЬ NULL
	|			ТОГДА ВводОстатковВнеоборотныхАктивов24.ДатаПринятияКУчетуБУ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДокументАрендыДата,
	|	ЕСТЬNULL(ПоступлениеАрендованныхОС.Арендодатель, 
	|				ЕСТЬNULL(ПоступлениеПредметовЛизинга.Контрагент, 
	|							ЕСТЬNULL(ВводОстатковВнеоборотныхАктивов.Контрагент, НЕОПРЕДЕЛЕНО))) КАК Арендодатель
	|ПОМЕСТИТЬ ОСИСведения
	|ИЗ
	|	ОСИОрганизации КАК ОСИОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
	|		ПО ОСИОрганизации.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|			И ОСИОрганизации.Организация = МестонахождениеОСБухгалтерскийУчет.Организация
	|			И ОСИОрганизации.МаксПериодМеста = МестонахождениеОСБухгалтерскийУчет.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО ОСИОрганизации.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|			И ОСИОрганизации.Организация = ПервоначальныеСведенияОСБухгалтерскийУчет.Организация
	|			И ОСИОрганизации.МаксПериодБУ = ПервоначальныеСведенияОСБухгалтерскийУчет.Период
	|			И НЕ ПервоначальныеСведенияОСБухгалтерскийУчет.Регистратор ССЫЛКА Документ.ПоступлениеПредметовЛизинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|		ПО (ПервоначальныеСведенияОСБухгалтерскийУчет.Регистратор = ПринятиеКУчетуОС.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеАрендованныхОС КАК ПоступлениеАрендованныхОС
	|		ПО (ПервоначальныеСведенияОСБухгалтерскийУчет.Регистратор = ПоступлениеАрендованныхОС.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеПредметовЛизинга КАК ПоступлениеПредметовЛизинга
	|		ПО (ПервоначальныеСведенияОСБухгалтерскийУчет.Регистратор = ПоступлениеПредметовЛизинга.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов.ОС КАК ВводОстатковВнеоборотныхАктивов
	|		ПО (ПервоначальныеСведенияОСБухгалтерскийУчет.Регистратор = ВводОстатковВнеоборотныхАктивов.Ссылка)
	|			И (ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = ВводОстатковВнеоборотныхАктивов.ОсновноеСредство)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ВводОстатковВнеоборотныхАктивов24
	|		ПО (ПервоначальныеСведенияОСБухгалтерскийУчет.Регистратор = ВводОстатковВнеоборотныхАктивов24.Ссылка)
	|			И (ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = ВводОстатковВнеоборотныхАктивов24.ОсновноеСредство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнвентаризацияОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ОСИОрганизации.МОЛ
	|ИЗ
	|	Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОСИОрганизации КАК ОСИОрганизации
	|		ПО ИнвентаризацияОС.Ссылка = ОСИОрганизации.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияОС.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВЫБОР КОГДА ОСИСведения.Арендодатель = Неопределено ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК ЕстьСобственные,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОСИСведения.Арендодатель) КАК КоличествоАрендодателей,
	|	МАКСИМУМ(ОСИСведения.Арендодатель) КАК Арендодатель
	|ИЗ
	|	Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОСИСведения КАК ОСИСведения
	|		ПО (ОСИСведения.Ссылка = ОСИСведения.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияОС.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнвентаризацияОС.Ссылка КАК Ссылка,
	|	ИнвентаризацияОС.Дата КАК Дата,
	|	ИнвентаризацияОС.Номер КАК Номер,
	|	ИнвентаризацияОС.Организация КАК Организация,
	|	ИнвентаризацияОС.Подразделение КАК Подразделение,
	|	ИнвентаризацияОС.Подразделение.Представление КАК ПодразделениеПредставление,
	|	ИнвентаризацияОС.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
	|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
	|	ИнвентаризацияОС.ДокументОснованиеВид КАК ДокументОснованиеВид,
	|	ИнвентаризацияОС.ДокументОснованиеДата КАК ДокументОснованиеДата,
	|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
	|	ОСИСведения.НомерСтроки КАК НомерСтроки,
	|	ОСИСведения.НомерСтроки КАК МинНомерСтроки,
	|	ОСИСведения.НомерСтроки КАК МаксНомерСтроки,
	|	ОСИСведения.ОсновноеСредство,
	|	ОСИСведения.МОЛ КАК МОЛ,       // fix Suetin 06.12.2019 16:43:17
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОСИСведения.ОсновноеСредство) = ТИП(Справочник.ОбъектыСтроительства)
	|			ТОГДА ВЫРАЗИТЬ(ОСИСведения.ОсновноеСредство КАК Справочник.ОбъектыСтроительства).Наименование
	|		КОГДА ВЫРАЗИТЬ(ОСИСведения.ОсновноеСредство КАК Справочник.ОбъектыЭксплуатации).НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(ОСИСведения.ОсновноеСредство КАК Справочник.ОбъектыЭксплуатации).Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ОСИСведения.ОсновноеСредство КАК Справочник.ОбъектыЭксплуатации).НаименованиеПолное
	|	КОНЕЦ КАК ОсновноеСредствоНаименованиеПолное,
	|	ОСИСведения.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
	|	ОСИСведения.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ОСИСведения.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
	|	ОСИСведения.СтоимостьПоДаннымУчета,
	|	ОСИСведения.СтоимостьФактическая КАК СтоимостьФактическая,
	|	ОСИСведения.НаличиеПоДаннымУчета КАК НаличиеПоДаннымУчета,
	|	ОСИСведения.НаличиеФактическое КАК НаличиеФактическое,
	|	ОСИСведения.МаксПериодМеста,
	|	ОСИСведения.МаксПериодБУ,
	|	ОСИСведения.ИнвентарныйНомер,
	|	ИнвентаризацияОС.ИнвентаризационнаяКомиссия.(
	|		ФизЛицо,
	|		Председатель КАК Председатель
	|	) КАК Комиссия,
	|	ОСИСведения.ДокументАрендыПредставление,
	|	ОСИСведения.ДокументАрендыНомер,
	|	ОСИСведения.ДокументАрендыДата,
	|	ОСИСведения.Арендодатель
	|ИЗ
	|	ОСИСведения КАК ОСИСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
	|		ПО ОСИСведения.Ссылка = ИнвентаризацияОС.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	ОСИСведения.НомерСтроки
	|;   // begin fix Suetin 06.12.2019 17:36:45
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнвентаризацияОС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
	|ГДЕ
	|	ИнвентаризацияОС.Ссылка В(&МассивОбъектов)
	|   // end fix Suetin 06.12.2019 17:36:51
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаМОЛ = РезультатЗапроса[2].Выбрать();
	ВыборкаАрендодатель = РезультатЗапроса[3].Выбрать();
	Док = РезультатЗапроса[4].Выбрать();
	Доки = РезультатЗапроса[5].Выбрать();
	
	ПервыйДокумент = Истина;
	НомерСтроки = 1;
	Пока Доки.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			Док.Сбросить();
		КонецЕсли;
		СтруктураПоиска = Новый Структура("Ссылка");
		СтруктураПоиска.Ссылка 	= Доки.Ссылка;
		Док.НайтиСледующий(СтруктураПоиска);
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТаблицаИтогов.Очистить();
		
		ТаблицаИнвентаризационнаяКомиссия = Док.Комиссия.Выгрузить();
		
		РежимСобственности = НСтр("ru = 'в собственности';
									|en = 'in property'");
		
		//////////////////////////////////////////////////////////////////////
		// 1-я страница формы
		
		// Выборка по Арендодателям обходится синхронно с выборкой документов
		Арендодатель = Неопределено;
		Если ВыборкаАрендодатель.НайтиСледующий(Док.Ссылка, "Ссылка") Тогда
			Если ВыборкаАрендодатель.ЕстьСобственные И ВыборкаАрендодатель.КоличествоАрендодателей > 1 Тогда
				РежимСобственности = НСтр("ru = 'в собственности организации, в т.ч. арендованные';
											|en = 'owned by company, including leased'");
			ИначеЕсли НЕ ВыборкаАрендодатель.ЕстьСобственные Тогда
				Если ВыборкаАрендодатель.КоличествоАрендодателей = 1 Тогда
					Арендодатель = ВыборкаАрендодатель.Арендодатель;
				КонецЕсли;
				РежимСобственности = НСтр("ru = 'арендованные';
											|en = 'rented'");
			КонецЕсли; 
		КонецЕсли;
		
		// Выведем шапку документа
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Док.Организация, Док.Дата);
		
		Шапка.Параметры.Заполнить(Док);
		Шапка.Параметры.Организация          = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации);
		Шапка.Параметры.ОрганизацияКодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
		Шапка.Параметры.РежимСобственности   = РежимСобственности;
		Шапка.Параметры.Подразделение        = Док.ПодразделениеПредставление;
		Шапка.Параметры.Местонахождение      = Док.ПодразделениеПредставление;
		
		Шапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Док.Номер);
		Шапка.Параметры.ДатаДокумента  = Док.Дата;
		
		Шапка.Параметры.Арендодатель = Арендодатель;
		
		ТабличныйДокумент.Вывести(Шапка);
		
		// Выведем расписку МОЛов 
		ТабличныйДокумент.Вывести(Расписка);
		
		// Выборка по МОЛ обходится синхронно с выборкой документов
		ВыборкаМОЛ.СледующийПоЗначениюПоля("Ссылка");
		МассивМОЛ = Новый Массив;
		Пока ВыборкаМОЛ.Следующий() Цикл
			Если МассивМОЛ.Найти(ВыборкаМОЛ.МОЛ) = Неопределено Тогда
				МассивМОЛ.Добавить(ВыборкаМОЛ.МОЛ);
			КонецЕсли;
		КонецЦикла;
		// begin fix Suetin 06.12.2019 16:24:42
		Для каждого элМОЛ Из МассивМОЛ Цикл   //  КонецЦикла;
			// Выведем подписи МОЛов
			ВыводитьЗаголовок  = Истина; // Флаг вывода заголовка набора подписей
			ВыводитьПримечание = Истина; // Флаг вывода примечания-звездочки
			Массив1МОЛ = Новый Массив();
			Массив1МОЛ.Добавить(элМОЛ);
			ДанныеМОЛ = УправлениеВнеоборотнымиАктивамиПереопределяемый.ДанныеФизЛиц(Док.Организация, Массив1МОЛ, Док.Дата);
			
			// Сначала выведем МОЛов из выборки
			Для каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
				
				ПодписьСПримечанием = Новый Массив;
				ПодписьСПримечанием.Добавить(Подпись);
				ПодписьСПримечанием.Добавить(Примечание);
				
				Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСПримечанием) Тогда
					
					// Выведем примечание
					ТабличныйДокумент.Вывести(Примечание);
					ВыводитьПримечание = Ложь;
					
					// Выведем разрыв страницы
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
					
				КонецЕсли;
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.МОЛ, "");
				Подпись.Параметры.Должность                = СтрокаМОЛ.Должность;
				Подпись.Параметры.РасшифровкаПодписи       = СтрокаМОЛ.Представление;
				
				ТабличныйДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
				//КонецЦикла;
			
				// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
				// подписей, как в форме, утвержденной Госкомстатом).
				//Если ДанныеМОЛ.Количество() < 3 Тогда
				
				ПодписьСПримечанием = Новый Массив;
				ПодписьСПримечанием.Добавить(Подпись);
				ПодписьСПримечанием.Добавить(Примечание);
				
				Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСПримечанием) Тогда
					
					// Выведем примечание
					ТабличныйДокумент.Вывести(Примечание);
					ВыводитьПримечание = Ложь;
					
					// Выведем разрыв страницы
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
					
				КонецЕсли;
				
				Для Итератор = ДанныеМОЛ.Количество() + 1 По 3 Цикл
					
					Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.МОЛ, "");
					Подпись.Параметры.Должность                = "";
					Подпись.Параметры.РасшифровкаПодписи       = "";
					
					ТабличныйДокумент.Вывести(Подпись);
					
					ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
					
				КонецЦикла;
				
				//КонецЕсли;
		
				// Выведем примечание
				Если ВыводитьПримечание Тогда
					ТабличныйДокумент.Вывести(Примечание);
				КонецЕсли;
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				//////////////////////////////////////////////////////////////////////
				// 2-я страница формы
				
				// Выведем заголовок таблицы	
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				
				ПорядковыйНомерИтогов = 1; // счетчик количества итоговых строк в таблице
				
				НаличиеФактическоеПоСтранице          = 0;
				СтоимостьФактическаяПоСтранице        = 0;
				НаличиеПоДаннымУчетаПоСтранице        = 0;
				СтоимостьПоДаннымУчетаПоСтранице      = 0;
				КоличествоПорядковыхНомеровНаСтранице = 0;
				
				НаличиеФактическоеПоОписи          = 0;
				СтоимостьФактическаяПоОписи        = 0;
				КоличествоПорядковыхНомеровПоОписи = 0;
				
				// Выведем строки таблицы
				//Пока Док.Следующий() Цикл
				СтруктураПоиска = Новый Структура("Ссылка, МОЛ");
				СтруктураПоиска.Ссылка 	= Док.Ссылка;
				СтруктураПоиска.МОЛ 	= элМОЛ;
				Док.Сбросить();
				Пока Док.НайтиСледующий(СтруктураПоиска) Цикл
					
					СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
					
					СтрокаТаблицы.Параметры.Заполнить(Док);
					СтрокаТаблицы.Параметры.НомерСтроки = НомерСтроки;
					СтрокаТаблицы.Параметры.ДокументАрендыНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Док.ДокументАрендыНомер, Истина, Ложь);
					// begin fix Suetin 06.12.2019 17:29:29
					// Присвоим имена с номерами строк областям таблицы.
					// Номера потребуются для включения/отключения видимости значений в ячейках.
					//СтрокаТаблицы.Области.НаличиеФактическое.Имя     = "НаличиеФактическое"        + Формат(Док.НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
					//СтрокаТаблицы.Области.СтоимостьФактическая.Имя   = "СтоимостьФактическая"      + Формат(Док.НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
					//СтрокаТаблицы.Области.НаличиеПоДаннымУчета.Имя   = "НаличиеПоДаннымУчета"      + Формат(Док.НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
					//СтрокаТаблицы.Области.СтоимостьПоДаннымУчета.Имя = "СтоимостьПоДаннымУчета"    + Формат(Док.НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");  
					
					СтрокаТаблицы.Области.НаличиеФактическое.Имя     = "НаличиеФактическое"        + Формат(НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
					СтрокаТаблицы.Области.СтоимостьФактическая.Имя   = "СтоимостьФактическая"      + Формат(НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
					СтрокаТаблицы.Области.НаличиеПоДаннымУчета.Имя   = "НаличиеПоДаннымУчета"      + Формат(НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
					СтрокаТаблицы.Области.СтоимостьПоДаннымУчета.Имя = "СтоимостьПоДаннымУчета"    + Формат(НомерСтроки, "ЧДЦ=0; ЧН=; ЧГ=");
					// end fix Suetin 06.12.2019 17:29:33
					СтрокаСПодвалом = Новый Массив;
					СтрокаСПодвалом.Добавить(СтрокаТаблицы);
					СтрокаСПодвалом.Добавить(ИтогоПоСтранице);
					СтрокаСПодвалом.Добавить(Итоги);
					
					Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
						
						ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
						
						// Присвоим имена с порядковыми номерами итогов областям таблицы.
						// Номера потребуются для включения/отключения видимости значений в ячейках.
						ИтогоПоСтранице.Области.ИтогНаличиеФактическое.Имя     = "ИтогНаличиеФактическое"     + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
						ИтогоПоСтранице.Области.ИтогСтоимостьФактическая.Имя   = "ИтогСтоимостьФактическая"   + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
						ИтогоПоСтранице.Области.ИтогНаличиеПоДаннымУчета.Имя   = "ИтогНаличиеПоДаннымУчета"   + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
						ИтогоПоСтранице.Области.ИтогСтоимостьПоДаннымУчета.Имя = "ИтогСтоимостьПоДаннымУчета" + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
						
						// Выведем заголовок итогов по странице
						ИтогоПоСтранице.Параметры.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
						ИтогоПоСтранице.Параметры.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
						ИтогоПоСтранице.Параметры.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
						ИтогоПоСтранице.Параметры.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
						
						ТабличныйДокумент.Вывести(ИтогоПоСтранице);
						
						Итоги = Макет.ПолучитьОбласть("Итоги");
						
						// Присвоим имена с порядковыми номерами итогов областям таблицы.
						// Номера потребуются для включения/отключения видимости значений в ячейках.
						Итоги.Области.КоличествоФактическоеПрописью.Имя   = "КоличествоФактическоеПрописью" + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
						Итоги.Области.СтоимостьФактическаяПрописью.Имя    = "СтоимостьФактическаяПрописью"  + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
						
						КоличествоФактическоеПрописью = ЧислоПрописью(НаличиеФактическоеПоСтранице,, ",,,ж,,,,,0");
						СтоимостьФактическаяПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтоимостьФактическаяПоСтранице, ВалютаРегламентированногоУчета);
						
						// Выведем итоговые строки
						Итоги.Параметры.КоличествоПорядковыхНомеровПрописью = ЧислоПрописью(КоличествоПорядковыхНомеровНаСтранице,, ",,,м,,,,,0");
						Итоги.Параметры.КоличествоФактическоеПрописью       = КоличествоФактическоеПрописью;
						Итоги.Параметры.СтоимостьФактическаяПрописью        = СтоимостьФактическаяПрописью;
						
						ТабличныйДокумент.Вывести(Итоги);
						
						// Добавим значения итогов по странице в таблицу итогов.
						// Они потребуются при включении видимости значений ячеек.
						НоваяСтрока = ТаблицаИтогов.Добавить();
						НоваяСтрока.ПорядковыйНомерИтогов         = ПорядковыйНомерИтогов;
						НоваяСтрока.ИтогНаличиеФактическое        = НаличиеФактическоеПоСтранице;
						НоваяСтрока.ИтогСтоимостьФактическая      = СтоимостьФактическаяПоСтранице;
						НоваяСтрока.ИтогНаличиеПоДаннымУчета      = НаличиеПоДаннымУчетаПоСтранице;
						НоваяСтрока.ИтогСтоимостьПоДаннымУчета    = СтоимостьПоДаннымУчетаПоСтранице;
						НоваяСтрока.КоличествоФактическоеПрописью = КоличествоФактическоеПрописью;
						НоваяСтрока.СтоимостьФактическаяПрописью  = СтоимостьФактическаяПрописью;
						
						ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
						
						// Выведем разрыв страницы
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
						// Выведем заголовок таблицы	
						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
						
						НаличиеФактическоеПоСтранице          = 0;
						СтоимостьФактическаяПоСтранице        = 0;
						НаличиеПоДаннымУчетаПоСтранице        = 0;
						СтоимостьПоДаннымУчетаПоСтранице      = 0;
						КоличествоПорядковыхНомеровНаСтранице = 0;
						
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(СтрокаТаблицы);
					
					НаличиеФактическоеПоСтранице          = НаличиеФактическоеПоСтранице          + Док.НаличиеФактическое;
					СтоимостьФактическаяПоСтранице        = СтоимостьФактическаяПоСтранице        + Док.СтоимостьФактическая;
					НаличиеПоДаннымУчетаПоСтранице        = НаличиеПоДаннымУчетаПоСтранице        + Док.НаличиеПоДаннымУчета;
					СтоимостьПоДаннымУчетаПоСтранице      = СтоимостьПоДаннымУчетаПоСтранице      + Док.СтоимостьПоДаннымУчета;
					КоличествоПорядковыхНомеровНаСтранице = КоличествоПорядковыхНомеровНаСтранице + 1;
					
					НаличиеФактическоеПоОписи          = НаличиеФактическоеПоОписи + Док.НаличиеФактическое;
					СтоимостьФактическаяПоОписи        = СтоимостьФактическаяПоОписи + Док.СтоимостьФактическая;
					КоличествоПорядковыхНомеровПоОписи = КоличествоПорядковыхНомеровПоОписи + 1;
					НомерСтроки = НомерСтроки + 1;      // fix Suetin 06.12.2019 17:28:42
				КонецЦикла;
		
				ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
				
				// Присвоим имена с порядковыми номерами итогов областям таблицы.
				// Номера потребуются для включения/отключения видимости значений в ячейках.
				ИтогоПоСтранице.Области.ИтогНаличиеФактическое.Имя     = "ИтогНаличиеФактическое"     + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
				ИтогоПоСтранице.Области.ИтогСтоимостьФактическая.Имя   = "ИтогСтоимостьФактическая"   + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
				ИтогоПоСтранице.Области.ИтогНаличиеПоДаннымУчета.Имя   = "ИтогНаличиеПоДаннымУчета"   + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
				ИтогоПоСтранице.Области.ИтогСтоимостьПоДаннымУчета.Имя = "ИтогСтоимостьПоДаннымУчета" + Формат(ПорядковыйНомерИтогов, "ЧДЦ=0; ЧН=; ЧГ=");
				
				// Выведем заголовок итогов по странице
				ИтогоПоСтранице.Параметры.ИтогСтоимостьФактическая   = СтоимостьФактическаяПоСтранице;
				ИтогоПоСтранице.Параметры.ИтогНаличиеФактическое     = НаличиеФактическоеПоСтранице;
				ИтогоПоСтранице.Параметры.ИтогСтоимостьПоДаннымУчета = СтоимостьПоДаннымУчетаПоСтранице;
				ИтогоПоСтранице.Параметры.ИтогНаличиеПоДаннымУчета   = НаличиеПоДаннымУчетаПоСтранице;
				
				ТабличныйДокумент.Вывести(ИтогоПоСтранице);
				
				Итоги = Макет.ПолучитьОбласть("Итоги");	
				
				// Присвоим имена с порядковыми номерами итогов областям таблицы.
				// Номера потребуются для включения/отключения видимости значений в ячейках.
				Итоги.Области.КоличествоФактическоеПрописью.Имя   = "КоличествоФактическоеПрописью" + ПорядковыйНомерИтогов;
				Итоги.Области.СтоимостьФактическаяПрописью.Имя    = "СтоимостьФактическаяПрописью" + ПорядковыйНомерИтогов;
				
				КоличествоФактическоеПрописью = ЧислоПрописью(НаличиеФактическоеПоСтранице,, ",,,ж,,,,,0");
				СтоимостьФактическаяПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СтоимостьФактическаяПоСтранице, ВалютаРегламентированногоУчета);
				
				// Выведем итоговые строки
				Итоги.Параметры.КоличествоПорядковыхНомеровПрописью = ЧислоПрописью(КоличествоПорядковыхНомеровНаСтранице,, ",,,м,,,,,0");
				Итоги.Параметры.КоличествоФактическоеПрописью       = КоличествоФактическоеПрописью;
				Итоги.Параметры.СтоимостьФактическаяПрописью        = СтоимостьФактическаяПрописью;
				
				ТабличныйДокумент.Вывести(Итоги);
				
				// Добавим значения итогов по странице в таблицу итогов.
				// Они потребуются при включении видимости значений ячеек.
				НоваяСтрока = ТаблицаИтогов.Добавить();
				НоваяСтрока.ПорядковыйНомерИтогов         = ПорядковыйНомерИтогов;
				НоваяСтрока.ИтогНаличиеФактическое        = НаличиеФактическоеПоСтранице;
				НоваяСтрока.ИтогСтоимостьФактическая      = СтоимостьФактическаяПоСтранице;
				НоваяСтрока.ИтогНаличиеПоДаннымУчета      = НаличиеПоДаннымУчетаПоСтранице;
				НоваяСтрока.ИтогСтоимостьПоДаннымУчета    = СтоимостьПоДаннымУчетаПоСтранице;
				НоваяСтрока.КоличествоФактическоеПрописью = КоличествоФактическоеПрописью;
				НоваяСтрока.СтоимостьФактическаяПрописью  = СтоимостьФактическаяПрописью;
				
				ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЦикла;	
		КонецЦикла;		
		//////////////////////////////////////////////////////////////////////
		// 3-я страница формы
		
		// Выведем заголовок итогов по описи
		ТабличныйДокумент.Вывести(ИтогоПоОписи);
		
		Итоги = Макет.ПолучитьОбласть("Итоги");
		
		// Присвоим имена с порядковыми номерами итогов областям таблицы.
		// Номера потребуются для включения/отключения видимости значений в ячейках.
		Итоги.Области.КоличествоФактическоеПрописью.Имя   = "КоличествоФактическоеПрописьюПоОписи";
		Итоги.Области.СтоимостьФактическаяПрописью.Имя    = "СтоимостьФактическаяПрописьюПоОписи";
		
		// Выведем итоговые строки
		Итоги.Параметры.КоличествоПорядковыхНомеровПрописью = ЧислоПрописью(КоличествоПорядковыхНомеровПоОписи,, ",,,м,,,,,0");
		Итоги.Параметры.КоличествоФактическоеПрописью       = ЧислоПрописью(НаличиеФактическоеПоОписи,, ",,,ж,,,,,0");
		Итоги.Параметры.СтоимостьФактическаяПрописью        = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СтоимостьФактическаяПоОписи, ВалютаРегламентированногоУчета);
		
		ТабличныйДокумент.Вывести(Итоги);
		
		// Выведем фразу о подсчетах
		ТабличныйДокумент.Вывести(Подсчеты);
		
		// Выведем подпись председателя инвентаризационной комиссии
		ПредседательКомиссии = ТаблицаИнвентаризационнаяКомиссия.Найти(Истина, "Председатель");
		
		Если ПредседательКомиссии <> Неопределено И ПредседательКомиссии.Председатель Тогда
			
			ДанныеПредседателя = УправлениеВнеоборотнымиАктивамиПереопределяемый.ДанныеФизЛица(Док.Организация, ПредседательКомиссии.ФизЛицо, Док.Дата);
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
			Подпись.Параметры.Должность                = ДанныеПредседателя.Должность;
			Подпись.Параметры.РасшифровкаПодписи       = ДанныеПредседателя.Представление;
			
		Иначе
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
			Подпись.Параметры.Должность                = "";
			Подпись.Параметры.РасшифровкаПодписи       = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(Подпись);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		КоличествоЧленовКомиссии = 0;
		
		// Сначала выведем членов комиссии из выборки
		Для каждого ЧленКомиссии Из ТаблицаИнвентаризационнаяКомиссия Цикл
			
			Если ЧленКомиссии.Председатель Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			КоличествоЧленовКомиссии = КоличествоЧленовКомиссии + 1;
			
			ДанныеЧленаКомиссии = УправлениеВнеоборотнымиАктивамиПереопределяемый.ДанныеФизЛица(Док.Организация, ЧленКомиссии.ФизЛицо, Док.Дата);
			
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, "");
			Подпись.Параметры.Должность                = ДанныеЧленаКомиссии.Должность;
			Подпись.Параметры.РасшифровкаПодписи       = ДанныеЧленаКомиссии.Представление;
			
			ТабличныйДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		// подписей, как в форме, утвержденной Госкомстатом).
		Если КоличествоЧленовКомиссии < 3 Тогда
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Для Итератор = КоличествоЧленовКомиссии + 1 По 3 Цикл
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.ЧленыКомиссии, "");
				Подпись.Параметры.Должность                = "";
				Подпись.Параметры.РасшифровкаПодписи       = "";
				
				ТабличныйДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Перед выводом следующего набора подписей, нужно проверить, поместится ли он
		// на страницу целиком. Если нет, нужно начать вывод со следующей страницы.
		
		// Создаем массив строк для проверки, помещаются ли они на страницу
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(Претензии);
		Для Итератор = 1 По ДанныеМОЛ.Количество() Цикл
			СтрокаСПодвалом.Добавить(Подпись);
		КонецЦикла;
		СтрокаСПодвалом.Добавить(ПолеДаты);
		СтрокаСПодвалом.Добавить(Подпись);
		СтрокаСПодвалом.Добавить(ПолеДаты);
		
		// Если планируемый набор подписей не помещается, начинаем новую страницу
		Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
			
			// Выведем разрыв страницы
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		// Выведем раздел об отсутствии претензий МОЛов
		Если Док.Количество() > 0 Тогда
			Претензии.Параметры.НомерСтрокиНачальный = 1;
			Претензии.Параметры.НомерСтрокиКонечный  = Док.МаксНомерСтроки;
		Иначе	
			Претензии.Параметры.НомерСтрокиНачальный = "______";
			Претензии.Параметры.НомерСтрокиКонечный  = "______";
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(Претензии);
		
		// Выведем подписи МОЛов
		ВыводитьЗаголовок = Истина;
		
		// Сначала выведем МОЛов из выборки
		Для каждого СтрокаМОЛ Из ДанныеМОЛ Цикл
			
			ПодписьСДатой = Новый Массив;
			ПодписьСДатой.Добавить(Подпись);
			ПодписьСДатой.Добавить(ПолеДаты);
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСДатой) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.МОЛ, "");
			Подпись.Параметры.Должность                = СтрокаМОЛ.Должность;
			Подпись.Параметры.РасшифровкаПодписи       = СтрокаМОЛ.Представление;
			
			ТабличныйДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		// Затем выведем пустые места для подписей (чтобы в итоге получилось не менее 3-х
		// подписей, как в форме, утвержденной Госкомстатом).
		Если ДанныеМОЛ.Количество() < 3 Тогда
			
			ПодписьСДатой = Новый Массив;
			ПодписьСДатой.Добавить(Подпись);
			ПодписьСДатой.Добавить(ПолеДаты);
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСДатой) Тогда
				
				// Выведем разрыв страницы
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
			КонецЕсли;
			
			Для Итератор = (ДанныеМОЛ.Количество() + 1) По 3 Цикл
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, ЗаголовокРазделаПодписей.МОЛ, "");
				Подпись.Параметры.Должность                = "";
				Подпись.Параметры.РасшифровкаПодписи       = "";
				
				ТабличныйДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Выведем строку с полем для заполнения даты
		ПолеДаты.Параметры.Дата = Формат(Док.Дата, "ДЛФ=DD");
		ТабличныйДокумент.Вывести(ПолеДаты);
		
		// Проверим, поместится ли проверяющий, если нет, то начнем новую страницу
		ПодписьСДатой = Новый Массив;
		ПодписьСДатой.Добавить(Подпись);
		ПодписьСДатой.Добавить(ПолеДаты);
		
		Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ПодписьСДатой) Тогда
			
			// Выведем разрыв страницы
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
		КонецЕсли;
		
		// Выведем подпись проверяющего
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.Проверяющий;
		
		ТабличныйДокумент.Вывести(Подпись);
		
		// Выведем строку с полем для заполнения даты
		ПолеДаты.Параметры.Дата = НСтр("ru = '""______"" ___________________________ _______ г.';
										|en = '__/__/__'");
		ТабличныйДокумент.Вывести(ПолеДаты);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Док.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабличныйДокумент;
	
КонецФункции
