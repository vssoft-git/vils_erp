#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
&Вместо("ОбработкаПроверкиЗаполнения")
Процедура ВИЛС_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем Ошибки;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	РасшифровкаБезРазбиения = Ложь;
	Если ДополнительныеСвойства.Свойство("РасшифровкаБезРазбиения") И ДополнительныеСвойства.РасшифровкаБезРазбиения Тогда
		РасшифровкаБезРазбиения = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель)
		И Организация = ОрганизацияПолучатель Тогда
		
		Текст = НСтр("ru = 'Одна и та же организация не может являться отправителем и получателем одновременно'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"Организация",
			,
			Отказ);
	КонецЕсли;
	
	// Проверяем соответствие хозяйственной операции и формы оплаты.
	// Платежной картой можно оплачивать только возврат оплаты клиенту.
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		И (ФормаОплатыПлатежнаяКарта ИЛИ ФормаОплатыЗаявки = Перечисления.ФормыОплаты.ПлатежнаяКарта)
	Тогда
		ТекстОшибки = НСтр("ru='Оплату платежной картой можно выбирать только для возврата оплаты клиенту'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ХозяйственнаяОперация",
			, // ПутьКДанным
			Отказ);
	КонецЕсли;
	
	// Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре.
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		И ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель)
		И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(
			Организация, ОрганизацияПолучатель) Тогда
		
		ТекстОшибки = НСтр("ru='Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ОрганизацияПолучатель",
			,
			Отказ);
	КонецЕсли;
	
	// Проверяем заполнение табличной части "Расшифровка платежа".
	ДенежныеСредстваСервер.ПроверитьЗаполнениеРасшифровкиПлатежа(
		ЭтотОбъект,
		СуммаДокумента,
		ХозяйственнаяОперация,
		Отказ);
	
	// Проверяем соответствие валюты заявки, валюты взаиморасчетов и валюты платежа
	Если НЕ (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты) Тогда
		
		ПроверитьСоответствиеВалютыВзаиморасчетов(Отказ);
	КонецЕсли;
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьМассивыРеквизитов(
		ХозяйственнаяОперация,
		ПеречислениеВБюджет,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	
	Если Не ФормаОплатыБезналичная
		И ФормаОплатыЗаявки <> Перечисления.ФормыОплаты.Безналичная
		И ЗначениеЗаполнено(ФормаОплатыЗаявки) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.СтатьяРасходов") <> Неопределено Тогда
		ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
			ЭтотОбъект,
			Новый Структура("РасшифровкаПлатежа"),
			МассивНепроверяемыхРеквизитов,
			Отказ);
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована
		Или Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяДвиженияДенежныхСредств");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяРасходов");
		
		//++ НЕ УТ
		МассивНепроверяемыхРеквизитов.Добавить("ТипПлатежаФЗ275");
		МассивНепроверяемыхРеквизитов.Добавить("ПодтверждающиеДокументы.Файл");
		//-- НЕ УТ
	ИначеЕсли Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		Если ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетПолучатель");
		ИначеЕсли  ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная Тогда
			МассивНепроверяемыхРеквизитов.Добавить("КассаПолучатель");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетПолучатель");
			МассивНепроверяемыхРеквизитов.Добавить("КассаПолучатель");
		КонецЕсли;
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетПолучатель");
		МассивНепроверяемыхРеквизитов.Добавить("КассаПолучатель");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.АналитикаРасходов");
		Если ТипНалога <> Перечисления.ТипыНалогов.НДФЛ Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Подразделение");
		КонецЕсли;
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаАвансовогоОтчета");
		Если Не ЗначениеЗаполнено(ДатаАвансовогоОтчета) Тогда
			ТекстОшибки = НСтр("ru='Поле ""Отчитаться"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"ПериодАвансовогоОтчета",
				, // ПутьКДанным
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ДенежныеСредстваСервер.ДобавитьНепроверяемыеРеквизитыПоВыплатеЗаработнойПлаты(
		ЭтотОбъект,
		МассивНепроверяемыхРеквизитов,
		ЭтотОбъект.ХозяйственнаяОперацияПоЗарплате);
	
	//++ НЕ УТ
	Если ПлатежиПо275ФЗ Тогда
		
		Если ДоговорСУчастникомГОЗ И ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			ОтдельныйСчетГОЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента, "ОтдельныйСчетГОЗ");
			Если Не ОтдельныйСчетГОЗ Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Должен быть выбран отдельный банковский счет ГОЗ'"),
					ЭтотОбъект,
					"БанковскийСчетКонтрагента",,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		ДенежныеСредстваСервер.ОбработкаПроверкиЗаполненияПодтверждающиеДокументы(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Ошибки);
		ДенежныеСредстваСервер.ПроверитьЗаполнениеРеквизитовПлатежаГОЗ(ЭтотОбъект, Отказ);
		ПроверитьЗаполнениеДоговоровГОЗ(Отказ, РасшифровкаБезРазбиения);
		ПроверитьЗаполнениеТипаСуммыКредитаДепозита(Отказ, РасшифровкаБезРазбиения);
	Иначе
	//-- НЕ УТ
		МассивНепроверяемыхРеквизитов.Добавить("ПодтверждающиеДокументы");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорСУчастникомГОЗ");
		МассивНепроверяемыхРеквизитов.Добавить("ТипПлатежаФЗ275");
		МассивНепроверяемыхРеквизитов.Добавить("ПредметОплаты");
		МассивНепроверяемыхРеквизитов.Добавить("ВариантОплаты");
	//++ НЕ УТ
	КонецЕсли;
	//-- НЕ УТ
	
	РеквизитыПлатежаВБюджет = Новый Массив;
	РеквизитыПлатежаВБюджет.Добавить("ВидПеречисленияВБюджет");
	РеквизитыПлатежаВБюджет.Добавить("ПеречислениеВБюджет");
	РеквизитыПлатежаВБюджет.Добавить("КодБК");
	РеквизитыПлатежаВБюджет.Добавить("КодОКАТО");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательДаты");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательНомера");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательОснования");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательПериода");
	РеквизитыПлатежаВБюджет.Добавить("СтатусСоставителя");
	
	РеквизитыДокумента = Метаданные().Реквизиты;
	
	ДатаНачалаПримененияПриказа126н = Константы.ДатаНачалаПримененияПриказа126н.Получить();
	Если ДатаНачалаПримененияПриказа126н <> '00010101' И Дата >= ДатаНачалаПримененияПриказа126н Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПоказательТипа");
	Иначе
		РеквизитыПлатежаВБюджет.Добавить("ПоказательТипа");
	КонецЕсли;
	
	Для каждого РеквизитПлатежаВБюджет Из РеквизитыПлатежаВБюджет Цикл
		МассивНепроверяемыхРеквизитов.Добавить(РеквизитПлатежаВБюджет);
		Если ПеречислениеВБюджет Тогда
			Если Не ЗначениеЗаполнено(ЭтотОбъект[РеквизитПлатежаВБюджет]) Тогда
				Реквизит = РеквизитыДокумента.Найти(РеквизитПлатежаВБюджет);
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено'"), Реквизит.Синоним);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПеречислениеВБюджет Тогда
		ДенежныеСредстваСервер.ПроверитьЗаполнениеНалоговыхРеквизитов(ЭтотОбъект, Отказ, МассивНепроверяемыхРеквизитов);
		ДенежныеСредстваСервер.ПроверитьИННиКППНаСоответствие148н(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяРасходов");
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнениеПартнера(ЭтотОбъект,
	                                                   ХозяйственнаяОперация,
	                                                   МассивНепроверяемыхРеквизитов,
	                                                   РасшифровкаБезРазбиения,
	                                                   Отказ);
	
	Если ЗначениеЗаполнено(НаправлениеДеятельности)
		Или Не НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
		
	ДенежныеСредстваСервер.ПроверитьБанковскийСчетПолучатель(ЭтотОбъект, Отказ);
	ДенежныеСредстваСервер.ПроверитьВалютуКонвертации(ЭтотОбъект, Отказ);
	ПроверитьНаличиеОплатыЗаявки(Отказ);
	
	Если РаспределениеПоСчетам.Итог("Сумма") > СуммаДокумента Тогда
		ТекстОшибки = НСтр("ru='Сумма распределения по счетам не может быть больше суммы документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"РаспределениеПоСчетам", // Поле
			, // ПутьКДанным
			Отказ);
	КонецЕсли;
	
	Если ЖелательнаяДатаПлатежа < НачалоДня(Дата) Тогда
		Текст = НСтр("ru = 'Желательная дата платежа не может быть меньше даты документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"ЖелательнаяДатаПлатежа",
			,
			Отказ);
	КонецЕсли;
	
	Для Каждого СтрокаРаспределения Из РаспределениеПоСчетам Цикл
		Если СтрокаРаспределения.ДатаПлатежа < НачалоДня(Дата) Тогда
			Текст = НСтр("ru = 'Дата платежа не может быть меньше даты документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"РаспределениеПоСчетам[" + РаспределениеПоСчетам.Индекс(СтрокаРаспределения) + "].ДатаПлатежа",
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована Тогда
		ПравоСогласования = ПраваПользователяПовтИсп.СогласованиеЗаявокНаРасходованиеДенежныхСредств();
		Если Не ПравоСогласования Тогда
			ТекстОшибки = НСтр("ru='У вас нет права согласования заявок на расходование денежных средств'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				, // Поле
				, // ПутьКДанным
				Отказ);
		КонецЕсли;
	ИначеЕсли Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате Тогда
		ПравоУтверждения = ПраваПользователяПовтИсп.УтверждениеЗаявокНаРасходованиеДенежныхСредств();
		Если Не ПравоУтверждения Тогда
			ТекстОшибки = НСтр("ru='У вас нет права утверждения к оплате заявок на расходование денежных средств'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				, // Поле
				, // ПутьКДанным
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	//++ НЕ УТ
	ПроверитьВедомостиНаВыплатуЗарплаты(Отказ);
	//-- НЕ УТ
	
	Если РасшифровкаБезРазбиения Тогда
		ДенежныеСредстваСервер.ПроверитьЗаполнениеРасшифровкиБезРазбиения(ЭтотОбъект, ПроверяемыеРеквизиты, "РасшифровкаПлатежа", "РасшифровкаБезРазбиения", Отказ);
	КонецЕсли;
	
	//begin fix Клещ А.Н. 02.02.2019  
	Если СтрДлина(СокрЛП(НазначениеПлатежа)) > 210 Тогда
		КоличествоСимволов = СтрДлина(СокрЛП(НазначениеПлатежа))-210;
		Текст = НСтр("Назначение платежа не должно превышать длину 210 символов, сократите строку на "+КоличествоСимволов+" символа(ов)");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"ЖелательнаяДатаПлатежа",
			,
			Отказ);
	КонецЕсли;
	//end fix Клещ А.Н. 02.02.2019
	
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
КонецПроцедуры


&После("ОбработкаЗаполнения")
Процедура ВИЛС_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	КтоРешил = Неопределено;
	ВИЛС_Исполнитель = Неопределено;
	
КонецПроцедуры
&После("ПриКопировании")
Процедура ВИЛС_ПриКопировании(ОбъектКопирования)
	// Вставить содержимое обработчика.
	КтоРешил = Неопределено;
	ВИЛС_Исполнитель = Неопределено;

КонецПроцедуры


#КонецЕсли
