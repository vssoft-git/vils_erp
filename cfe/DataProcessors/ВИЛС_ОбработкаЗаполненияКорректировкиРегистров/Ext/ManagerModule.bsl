#Область ПрограммныйИнтерфейс
// Определяет состав программного интерфейса для интеграции с конфигурацией.
//
// Параметры:
//   Настройки - Структура - Настройки интеграции этого объекта.
//       Описание см. в модуле ПодключаемыеКомандыПереопределяемый,
//       комментарий к процедуре ПриОпределенииСоставаНастроекПодключаемыхОбъектов,
//       раздел "Параметры процедуры ПриОпределенииНастроек"
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	МассивМетаданных = Новый Массив();
	МассивМетаданных.Добавить(Метаданные.Документы.КорректировкаРегистров);
	Настройки.Размещение = МассивМетаданных;
	Настройки.ДобавитьКомандыЗаполнения = Истина;
КонецПроцедуры

// Определяет список команд заполнения.
//
// Параметры:
//     КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения.   Для изменения.
//         См. описание 1 параметра процедуры   ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//     Параметры - Структура - Вспомогательные параметры. Для чтения.
//         См. описание 2 параметра процедуры   ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
    Команда = КомандыЗаполнения.Добавить();
	Команда.Идентификатор = "ВИЛС_КомандаЗаполнитьСторно";
	Команда.Представление = "Заполнить сторно";
	//ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ВИЛС_Документ", Неопределено, ВидСравненияКомпоновкиДанных.НеРавно); 
	Команда.ИзменяетВыбранныеОбъекты = Истина;
	Команда.РежимЗаписи = "НеЗаписывать";
	Команда.Обработчик = "ЗаполнитьСторно";
КонецПроцедуры

Процедура ЗаполнитьСторно(ПараметрКоманды, ПараметрыВыполнения) Экспорт
	Если Не ЗначениеЗаполнено(ПараметрыВыполнения.Форма.ВИЛС_Документ) Тогда
		Возврат;
	КонецЕсли; 
	
	ВыполнитьДействияДокумента(ПараметрКоманды, ПараметрыВыполнения);
КонецПроцедуры

Процедура ВыполнитьДействияДокумента(ПараметрКоманды, ПараметрыВыполнения);
	ПараметрыВыполнения.Источник.ТаблицаРегистров.Очистить();
	Источник = ПараметрыВыполнения.Источник;
	Движения = Источник.Движения;
	Элементы = ПараметрыВыполнения.Форма.Элементы;
	
	Для каждого МРегистр Из Метаданные.РегистрыНакопления Цикл
		Набор = Неопределено;
		Если Не Движения.Свойство(МРегистр.Имя, Набор) Тогда Продолжить; КонецЕсли;
		Набор.Очистить();
		УдалитьСтраницуРегистра(Элементы, МРегистр.Имя);
	КонецЦикла;
	
	ДействиеНеВыполнено = Ложь;
	ВИЛС_Документ = ПараметрыВыполнения.Форма.ВИЛС_Документ;
	СторнированиеДокумента(ВИЛС_Документ, Источник, Элементы, ДействиеНеВыполнено);
	Если ДействиеНеВыполнено Тогда
		ОбщегоНазначения.СообщитьПользователю("Сторнирование не выполнено!", ВИЛС_Документ, "ВИЛС_Документ");
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Сторнирование выполнено!", ВИЛС_Документ, "ВИЛС_Документ");
	КонецЕсли;
КонецПроцедуры

// Процедура выполняет сторнирование документа
//
Процедура СторнированиеДокумента(СторнируемыйДокумент, Источник, Элементы, ДействиеНеВыполнено, СторнироватьРегистры = истина, СторнироватьПроводки = истина) 
	
	Если НЕ ЗначениеЗаполнено(СторнируемыйДокумент) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не выбран сторнируемый документ.");
		ДействиеНеВыполнено = Истина;
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумент	= СторнируемыйДокумент.Метаданные();
	МетаданныеДвиженияКорректировкаЗаписейРегистров = Источник.Ссылка.Метаданные().Движения;

	Для Каждого МетаданныеРегистр Из МетаданныеДокумент.Движения Цикл

		// если документ "Корректировка записей регистров" не может иметь таких движений,
		// то это не сторнируемый регистр
		Если НЕ МетаданныеДвиженияКорректировкаЗаписейРегистров.Содержит(МетаданныеРегистр) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборДвижений = Источник.Движения[МетаданныеРегистр.Имя];
		
		ЭтоРегистрБухгалтерии = Ложь;
		Если СторнироватьПроводки И Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистр) Тогда
			
			СторнируемыйНаборЗаписей = РегистрыБухгалтерии[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
			ЭтоРегистрБухгалтерии = Истина;
			
		ИначеЕсли СторнироватьРегистры И Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистр) Тогда
		   
			СторнируемыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		СторнируемыйНаборЗаписей.Отбор.Регистратор.Значение = СторнируемыйДокумент;
		СторнируемыйНаборЗаписей.Прочитать();
		
		Для Каждого ДвижениеСторнируемое Из СторнируемыйНаборЗаписей Цикл

			ДвижениеСторно = НаборДвижений.Добавить();
			
			// реквизиты
			Если ЭтоРегистрБухгалтерии Тогда
				ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
			Иначе
				ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
			КонецЕсли;

			ДвижениеСторно.Период = Источник.Дата;
			
		КонецЦикла;
		
		СтрокаТЧ = Источник.ТаблицаРегистров.Добавить();
		СтрокаТЧ.Имя = МетаданныеРегистр.Имя;
		ПоказатьТаблицуРегистраНаСтранице(Элементы, СтрокаТЧ);
		
	КонецЦикла;
	
КонецПроцедуры

// Копирует значения движения в строку сторно нового движения
// для измерений и реквизитов. Ресурсы инвертируются
//
Процедура ЗаполнитьДвижениеСторно(Движение, Строка, МетаданныеОбъект)

	//ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор,ВидДвижения");
	
	// вид движения
	Если МетаданныеОбъект.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор,ВидДвижения");
		//Движение.ВидДвижения = Строка.ВидДвижения;
	Иначе
		ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор");
	КонецЕсли;
	
	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл
		Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвижениеСторно

// Копирует значения движения по регистру бухгалтерии в строку сторно я
// нового движени для измерений и реквизитов. Ресурсы инвертируются
//
Процедура ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор");
	
	// субконто
	Если МетаданныеОбъект.Корреспонденция Тогда

		Для каждого Субконто Из Строка.СубконтоДт Цикл
			Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Для каждого Субконто Из Строка.СубконтоКт Цикл
			Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

	Иначе

		Для каждого Субконто Из Строка.Субконто Цикл
			Движение.Субконто[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

	КонецЕсли;
	
	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл

		Если МДОбъект.ПризнакУчета = Неопределено Тогда
			Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
		Иначе

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Дт"]) Тогда
				Движение[МДОбъект.Имя + "Дт"] = - Строка[МДОбъект.Имя + "Дт"];
			КонецЕсли;

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Кт"]) Тогда
				Движение[МДОбъект.Имя + "Кт"] = - Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвиженияСторноПоРегиструБухгалтерии()

Процедура УдалитьСтраницуРегистра(Элементы, ИмяРегистра)
	ИмяСтраницы = ПолучитьИмяСтраницыРегистра(ИмяРегистра);
	ЭлементСтраница = Элементы.Найти(ИмяСтраницы);
	Если Не ЭлементСтраница = Неопределено Тогда
		Элементы.Удалить(ЭлементСтраница);
	КонецЕсли; 
КонецПроцедуры

// Процедура управляет созданием таблицы на форме для регистра.
//
Процедура ПоказатьТаблицуРегистраНаСтранице(Элементы, Знач СтрокаТЧ)

	Если Метаданные.РегистрыНакопления.Найти(СтрокаТЧ.Имя) <> Неопределено Тогда

		СтраницаРегистра      = Элементы.НастройкаРегистровНакопления;
		МенеджерРегистра      = РегистрыНакопления[СтрокаТЧ.Имя];
		МетаданныеРегистра    = Метаданные.РегистрыНакопления[СтрокаТЧ.Имя];
		РегистрИмеетПолеПериод= Истина;

	ИначеЕсли Метаданные.РегистрыСведений.Найти(СтрокаТЧ.Имя) <> Неопределено Тогда

		СтраницаРегистра      = Элементы.НастройкаРегистровСведений;
		МенеджерРегистра      = РегистрыСведений[СтрокаТЧ.Имя];
		МетаданныеРегистра    = Метаданные.РегистрыСведений[СтрокаТЧ.Имя];

		РегистрИмеетПолеПериод = МетаданныеРегистра.ПериодичностьРегистраСведений 
									<> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;

	Иначе

		Возврат;

	КонецЕсли;

	МассивКолонок = СоздатьМассивПолейРегистра(МенеджерРегистра, МетаданныеРегистра);

	СтраницаДляРегистра = СоздатьСтраницу(ПолучитьИмяСтраницыРегистра(СтрокаТЧ.Имя),
				МетаданныеРегистра.Синоним,
				СтраницаРегистра, Элементы);

	ТаблицаФормы = СоздатьТаблицуФормыРегистра(СтрокаТЧ.Имя, МассивКолонок, СтраницаДляРегистра, Элементы);

	Если РегистрИмеетПолеПериод Тогда
		ТаблицаФормы.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаПриНачалеРедактирования");
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьИмяСтраницыРегистра(ИмяРегистра)

	Возврат "Страница" + ИмяРегистра;

КонецФункции

// Функция создает таблицу значений по регистру.
//
Функция СоздатьМассивПолейРегистра(МенеджерРегистра, МетаданныеРегистра)

	ТаблицаРегистра = МенеджерРегистра.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТаблицаРегистра.Колонки.Удалить("Регистратор");
	Если ТаблицаРегистра.Колонки.Найти("МоментВремени") <> Неопределено Тогда
		ТаблицаРегистра.Колонки.Удалить("МоментВремени");
	КонецЕсли;

	МассивКолонок = Новый Массив;
	Для Каждого Колонка Из ТаблицаРегистра.Колонки Цикл

		ИнформацияОКолонке = Новый Структура("Имя, Заголовок, СвязиПараметровВыбора",
				Колонка.Имя);

		МассивКолонок.Добавить(ИнформацияОКолонке);

	КонецЦикла;

	// Обновление заголовков колонок таблицы по синонимам полей регистра.
	МассивПолейРегистра = Новый Массив;
	МассивПолейРегистра.Добавить("Измерения");
	МассивПолейРегистра.Добавить("Ресурсы");
	МассивПолейРегистра.Добавить("Реквизиты");

	Для Каждого ВидПоля Из МассивПолейРегистра Цикл
		Для Каждого Поле Из МетаданныеРегистра[ВидПоля] Цикл
			Для Каждого ЭлементМассива Из МассивКолонок Цикл

				Если ЭлементМассива.Имя = Поле.Имя Тогда

					ЭлементМассива.Заголовок             = Поле.Синоним;
					ЭлементМассива.СвязиПараметровВыбора = Поле.СвязиПараметровВыбора;

				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат МассивКолонок;

КонецФункции

Функция СоздатьСтраницу(ИмяСтраницы, Заголовок, Родитель, Элементы)

	НовыйЭлемент = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Родитель);
	НовыйЭлемент.Вид                      = ВидГруппыФормы.Страница;
	НовыйЭлемент.Заголовок                = Заголовок;
	НовыйЭлемент.РастягиватьПоВертикали   = Истина;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;

	Возврат НовыйЭлемент;

КонецФункции

// Процедура создает таблицу формы.
//
Функция СоздатьТаблицуФормыРегистра(ИмяРегистра, КолонкиТаблицы, Родитель, Элементы)

	ТаблицаФормы = Элементы.Добавить("ТаблицаДвижений" + ИмяРегистра, Тип("ТаблицаФормы"), Родитель);
	ТаблицаФормы.ПутьКДанным      = "Объект.Движения." + ИмяРегистра;
	Родитель.ПутьКДаннымЗаголовка = ТаблицаФормы.ПутьКДанным + ".КоличествоСтрок";

	МассивДобавленныхПолей = Новый Массив;
	Для Каждого Колонка Из КолонкиТаблицы Цикл

		ПолеФормы = Элементы.Добавить(ТаблицаФормы.Имя + Колонка.Имя, Тип("ПолеФормы"), ТаблицаФормы);
		ПолеФормы.ПутьКДанным           = ТаблицаФормы.ПутьКДанным + "." + Колонка.Имя;
		ПолеФормы.Заголовок             = Колонка.Заголовок;
		ПолеФормы.Вид                   = ВидПоляФормы.ПолеВвода;

		МассивДобавленныхПолей.Добавить(ПолеФормы);

	КонецЦикла;

	Счетчик = 0;
	Для Каждого ПолеФормы Из МассивДобавленныхПолей Цикл

		Если КолонкиТаблицы[Счетчик].СвязиПараметровВыбора <> Неопределено И  КолонкиТаблицы[Счетчик].СвязиПараметровВыбора.Количество() > 0 Тогда

			ПолеФормы.СвязиПараметровВыбора = СоздатьСвязиПараметровВыбора(КолонкиТаблицы[Счетчик].СвязиПараметровВыбора,
									 "Элементы." + ТаблицаФормы.Имя + ".ТекущиеДанные");
		КонецЕсли;

		Счетчик = Счетчик + 1;
	
	КонецЦикла;

	Возврат ТаблицаФормы;

КонецФункции

Функция СоздатьСвязиПараметровВыбора(ИсходныйМассив, ПутьКДанным)

	НовыйМассив = Новый Массив;
	Для Каждого Элемент Из ИсходныйМассив Цикл

		НовыйМассив.Добавить(Новый СвязьПараметраВыбора(Элемент.Имя, ПутьКДанным + "." + Элемент.ПутьКДанным, Элемент.ИзменениеЗначения));

	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(НовыйМассив);

КонецФункции

#КонецОбласти