
&ИзменениеИКонтроль("Выгрузить")
Процедура ВИЛС_Выгрузить(ПараметрыВыгрузки, АдресХранилища)

	ТаблицаДокументов = ПараметрыВыгрузки.ТаблицаДокументов;

	КоличествоДокументов = ТаблицаДокументов.Количество();

	Если Не КоличествоДокументов Тогда
		Возврат;
	КонецЕсли;

	ТаблицаДокументов.Сортировать("Дата");
	НачПериода = ТаблицаДокументов[0].Дата;
	КонПериода = ТаблицаДокументов[КоличествоДокументов-1].Дата;

	БанковскиеСчетаВыгрузки = ПараметрыВыгрузки.БанковскийСчет;

	ПотокВыгрузки = Новый ТекстовыйДокумент();

	// Формируем заголовок
	ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");

#Удаление
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=" + ?(ТекущаяДатаСеанса() >= '20140101', "1.02", "1.01"));
#КонецУдаления
#Вставка
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	Если ТекущаяДатаСеанса >= '20200601' Тогда
		ВерсияФормата = "1.03";
	ИначеЕсли ТекущаяДатаСеанса >= '20140101' Тогда
		ВерсияФормата = "1.02";
	Иначе
		ВерсияФормата = "1.01";
	КонецЕсли;
	
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=" + ВерсияФормата);
#КонецВставки
	ПотокВыгрузки.ДобавитьСтроку("Кодировка="     + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.Кодировка), ПараметрыВыгрузки.Кодировка, "Windows"));
	ПотокВыгрузки.ДобавитьСтроку("Отправитель="   + Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель="    + СокрЛП(ПараметрыВыгрузки.Программа));
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания="  + Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДатаСеанса(), "ДФ=ЧЧ:мм:сс"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала="    + Формат(НачПериода, "ДФ=дд.ММ.гггг"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца="     + Формат(КонПериода, "ДФ=дд.ММ.гггг"));

	Если ТипЗнч(БанковскиеСчетаВыгрузки) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ОчереднойБанковскийСчет Из БанковскиеСчетаВыгрузки Цикл 
			ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + ОчереднойБанковскийСчет.НомерСчета);
		КонецЦикла;
	Иначе
		ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + БанковскиеСчетаВыгрузки.НомерСчета);
	КонецЕсли;

	ВидыДокументов = Новый Соответствие;
	ВидыДокументов.Вставить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение, "Платежное поручение");
	ВидыДокументов.Вставить(Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование, "Платежное требование");

	Для каждого ВидДокумента Из ВидыДокументов Цикл
		Если ТаблицаДокументов.Найти(ВидДокумента.Ключ, "ВидДокумента") <> Неопределено Тогда
			ПотокВыгрузки.ДобавитьСтроку("Документ=" + ВидДокумента.Значение);
		КонецЕсли;
	КонецЦикла;

	// Выводим отмеченные секции документов
	Для каждого СтрокаСекции Из ТаблицаДокументов Цикл

		ЗаполнятьПоказательТипа = ЗначениеЗаполнено(СтрокаСекции.Дата)
		И ТипЗнч(СтрокаСекции.Дата) = Тип("Дата")
		И СтрокаСекции.Дата < ПлатежиВБюджетКлиентСервер.НачалоДействияУказания3844У();
		Буфер = СекцияДокумент(СтрокаСекции, ЗаполнятьПоказательТипа);

		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
	КонецЦикла;

	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");

	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL.
	Если ПараметрыВыгрузки.Кодировка = "DOS" Тогда
		Кодировка = "cp866";        // КодировкаТекста.OEM;
	Иначе
		Кодировка = "windows-1251"; // КодировкаТекста.ANSI;
	КонецЕсли;

	ПотокВыгрузки.Записать(ИмяВременногоФайла, Кодировка);

	ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), АдресХранилища);

	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
#Удаление
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Выгрузка платежей в банк.Удаление временного файла';
		|en = 'Export payments to bank.Remove temporary file'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
#КонецУдаления
#Вставка
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выгрузка платежей в банк.Удаление временного файла';
				|en = 'Export payments to bank.Remove temporary file'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
#КонецВставки
	КонецПопытки;

КонецПроцедуры

&ИзменениеИКонтроль("ОбновитьДокументы")
Процедура ВИЛС_ОбновитьДокументы(ДокументыКЗагрузке, БанковскийСчет, СоздаватьКонтрагентов, ПроводитьДокументы)

	Перем РеквизитыВсе, РеквизитыХозОперации;

	Отбор = Новый Структура("БанковскийСчет, Загружать, НайденДокументВБазе",
	БанковскийСчет, Истина, Истина);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);

	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл

		ДокументОбъект = СтрокаДокумента.Документ.ПолучитьОбъект();

		СделатьНепроведенным = Ложь;

		УстановитьСвойство(ДокументОбъект, "ПроведеноБанком", Истина);
		УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", СтрокаДокумента.ДатаПроведения);

#Вставка
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
			УстановитьСвойство(ДокументОбъект, "Дата", СтрокаДокумента.ДатаПроведения);
		КонецЕсли;

#КонецВставки
		УстановитьСвойство(ДокументОбъект, "НомерВходящегоДокумента", СтрокаДокумента.Номер, СтрокаДокумента.Операция <> "Операция по Яндекс.Кассе");

		// Контрагент
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
			Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
			ДокументОбъект.ХозяйственнаяОперация,
			РеквизитыВсе,
			РеквизитыХозОперации);
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
			Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
			ДокументОбъект.ХозяйственнаяОперация,
			ДокументОбъект.ПеречислениеВБюджет,
			РеквизитыВсе,
			РеквизитыХозОперации);
		КонецЕсли;

		Если РеквизитыХозОперации.Найти("Контрагент") <> Неопределено И Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
				УстановитьСвойство(ДокументОбъект, "Контрагент", СтрокаДокумента.Контрагент);
			ИначеЕсли СоздаватьКонтрагентов И СтрокаДокумента.СоздаватьКонтрагента Тогда
				УстановитьСвойство(ДокументОбъект, "Контрагент", СоздатьКонтрагента(ДокументыКЗагрузке, СтрокаДокумента));
			Иначе
				УстановитьСвойство(ДокументОбъект, "ИмяКонтрагента", СтрокаДокумента.ИмяКонтрагента);
			КонецЕсли;
		КонецЕсли;

		// Счет контрагента
		Если РеквизитыХозОперации.Найти("БанковскийСчетКонтрагента") <> Неопределено И Не ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКонтрагента) Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
				УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
			ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
				УстановитьСвойство(ДокументОбъект, "БанковскийСчетКонтрагента",
				СоздатьБанковскийСчетКонтрагента(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект.Контрагент));
			КонецЕсли;
		КонецЕсли;

		// Партнер
		Для каждого СтрокаРасшифровки Из ДокументОбъект.РасшифровкаПлатежа Цикл
			Если Не ЗначениеЗаполнено(СтрокаРасшифровки.Партнер) Тогда
				СтрокаРасшифровки.Партнер = СтрокаДокумента.Партнер;
			КонецЕсли;
		КонецЦикла;

		УстановитьСвойство(ДокументОбъект, "СуммаДокумента", СтрокаДокумента.СуммаДокумента, Истина);
		УстановитьСвойство(ДокументОбъект, "НазначениеПлатежа", СтрокаДокумента.НазначениеПлатежа, Истина);
		УстановитьСвойство(ДокументОбъект, "ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа, Истина);
		УстановитьСвойство(ДокументОбъект, "ДанныеВыписки", СтрокаДокумента.ДанныеВыписки, Истина);

		СуммыРазличаются = (СтрокаДокумента.СуммаДокумента <> ДокументОбъект.СуммаДокумента);
		Если СуммыРазличаются Тогда
			Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа[0];
				СтрокаРасшифровки.Сумма = ДокументОбъект.СуммаДокумента;
			Иначе
				СделатьНепроведенным = Истина;
				ОписаниеОшибки = НСтр("ru = 'Сумма документа отличается от суммы строк расшифровки платежа.';
				|en = 'Document amount differs from the total of amount allocation lines.'");
				ДобавитьЗамечание(СтрокаДокумента.ОшибкиЗагрузки, ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;

		УстановитьСвойство(ДокументОбъект, "Комментарий", НСтр("ru = '#Загружен из Клиент-Банка';
		|en = '#Imported from Client Bank'"));

		Если ДокументОбъект.Модифицированность() Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаЗагрузки", ТекущаяДатаСеанса(), Истина);
		КонецЕсли;

		ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.ПроверитьЗаполнение();

		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения") Тогда
			УстановитьСвойство(ДокументОбъект, "ОшибкиЗагрузки", ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения, Истина);
		КонецЕсли;

		Если ПроводитьДокументы
			И СокрЛП(ДокументОбъект.ОшибкиЗагрузки) = "" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;

		ЗаписатьОбъект(ДокументОбъект, ?(СделатьНепроведенным, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписи), СтрокаДокумента);
	КонецЦикла;

КонецПроцедуры

&ИзменениеИКонтроль("СоздатьДокументы")
Процедура ВИЛС_СоздатьДокументы(ДокументыКЗагрузке, БанковскийСчет, СоздаватьКонтрагентов, ПроводитьДокументы)

	РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	РазрешитьПлатежиБезУказанияЗаявок = РеквизитыСчета.РазрешитьПлатежиБезУказанияЗаявок;

	Организация          = РеквизитыСчета.Организация;
	Префикс              = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Префикс");
	Валюта               = РеквизитыСчета.Валюта;
	ТекущийПользователь  = Пользователи.ТекущийПользователь();

	Отбор = Новый Структура("БанковскийСчет, Загружать, НайденДокументВБазе",
	БанковскийСчет, Истина, Ложь);
	СтрокиКЗагрузке = ДокументыКЗагрузке.НайтиСтроки(Отбор);

	Для каждого СтрокаДокумента Из СтрокиКЗагрузке Цикл

		Если СтрокаДокумента.Исходящий Тогда
			ДокументОбъект = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
		Иначе
			ДокументОбъект = Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();
		КонецЕсли;

		// Общие реквизиты
		ДатаВхДокумента = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаДокумента.Дата);
		Если ЗначениеЗаполнено(ДатаВхДокумента) Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаВходящегоДокумента", ДатаВхДокумента);
		Иначе
			УстановитьСвойство(ДокументОбъект, "ДатаВходящегоДокумента", СтрокаДокумента.ДатаДок);
		КонецЕсли;
		УстановитьСвойство(ДокументОбъект, "НомерВходящегоДокумента", СтрокаДокумента.Номер);

		УстановитьСвойство(ДокументОбъект, "Организация", Организация);
		УстановитьСвойство(ДокументОбъект, "БанковскийСчет", БанковскийСчет);
		УстановитьСвойство(ДокументОбъект, "Валюта", Валюта);

		УстановитьСвойство(ДокументОбъект, "ТипПлатежногоДокумента", СтрокаДокумента.ТипПлатежногоДокумента);
		УстановитьСвойство(ДокументОбъект, "СуммаДокумента", СтрокаДокумента.СуммаДокумента);

		УстановитьСвойство(ДокументОбъект, "НазначениеПлатежа", СтрокаДокумента.НазначениеПлатежа);
		УстановитьСвойство(ДокументОбъект, "ФорматированноеНазначениеПлатежа", СтрокаДокумента.ФорматированноеНазначениеПлатежа);
		УстановитьСвойство(ДокументОбъект, "ДанныеВыписки", СтрокаДокумента.ДанныеВыписки);
		УстановитьСвойство(ДокументОбъект, "ИдентификаторПлатежа", СтрокаДокумента.Код);

		УстановитьСвойство(ДокументОбъект, "Комментарий", НСтр("ru = '#Загружен из Клиент-Банка';
		|en = '#Imported from Client Bank'"));
		УстановитьСвойство(ДокументОбъект, "ДатаЗагрузки", ТекущаяДатаСеанса());

		УстановитьСвойство(ДокументОбъект, "ОшибкиЗагрузки", СтрокаДокумента.ОшибкиЗагрузки);

		УстановитьСвойство(ДокументОбъект, "Ответственный", ТекущийПользователь);

		// Индивидуальное заполнение
		Если СтрокаДокумента.Исходящий Тогда
			ЗаполнитьРеквизитыСписания(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы, Префикс);
		Иначе
			ЗаполнитьРеквизитыПоступления(ДокументыКЗагрузке, СтрокаДокумента, ДокументОбъект, СоздаватьКонтрагентов, ПроводитьДокументы);
		КонецЕсли;

		Если СтрокаДокумента.Операция <> "Операция по Яндекс.Кассе" Тогда
			УстановитьСвойство(ДокументОбъект, "ПроведеноБанком", Истина);
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаДокумента.ДатаПроведения) Тогда
			УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", СтрокаДокумента.ДатаПроведения);
#Вставка
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
				УстановитьСвойство(ДокументОбъект, "Дата", СтрокаДокумента.ДатаПроведения);
			КонецЕсли;
#КонецВставки
		Иначе
			УстановитьСвойство(ДокументОбъект, "ДатаПроведенияБанком", ДокументОбъект.Дата);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ДокументОбъект.ДатаВходящегоДокумента) Тогда
			ДокументОбъект.ДатаВходящегоДокумента = ДокументОбъект.Дата;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДокументОбъект.НомерВходящегоДокумента) Тогда
			ДокументОбъект.НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОбъект.Номер);
		КонецЕсли;

		ДокументОбъект.ДополнительныеСвойства.Вставить("ОбменСБанками", Истина);
		ДокументОбъект.ПроверитьЗаполнение();

		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОшибкиЗаполнения") Тогда
			ДокументОбъект.ОшибкиЗагрузки = СокрЛП(ДокументОбъект.ОшибкиЗагрузки + "
			|" + ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения);
		КонецЕсли;

		Если ПроводитьДокументы
			И СокрЛП(ДокументОбъект.ОшибкиЗагрузки) = "" Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;

		Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации ИЛИ 
			ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
			Если СтрокаДокумента.Исходящий Тогда
				ЗеркальныйПлатежСсылка = Документы.СписаниеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(ДокументОбъект.Ссылка);
				Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) И ЗеркальныйПлатежСсылка.СуммаДокумента = ДокументОбъект.СуммаДокумента Тогда
					Документы.ПоступлениеБезналичныхДенежныхСредств.ПривестиВСоответствиеЗеркальныйПлатеж(ЗеркальныйПлатежСсылка, ДокументОбъект);
				КонецЕсли;
			Иначе
				ЗеркальныйПлатежСсылка = Документы.ПоступлениеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(ДокументОбъект.Ссылка);
				Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) И ЗеркальныйПлатежСсылка.СуммаДокумента = ДокументОбъект.СуммаДокумента Тогда
					Документы.СписаниеБезналичныхДенежныхСредств.ПривестиВСоответствиеЗеркальныйПлатеж(ЗеркальныйПлатежСсылка, ДокументОбъект);
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;

		ЗаписатьОбъект(ДокументОбъект, РежимЗаписи, СтрокаДокумента);

		СтрокаДокумента.Документ = ДокументОбъект.Ссылка;
	КонецЦикла;

КонецПроцедуры
