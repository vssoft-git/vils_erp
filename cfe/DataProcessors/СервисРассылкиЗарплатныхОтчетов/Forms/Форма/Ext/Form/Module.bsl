
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ПериодФормирования.ДатаНачала) Тогда
		ПериодФормирования.ДатаНачала = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ПериодФормирования.ДатаОкончания) Тогда
		ПериодФормирования.ДатаОкончания = КонецМесяца(ПериодФормирования.ДатаНачала);
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = Справочники.Организации.НайтиПоНаименованию("ОАО " + Символ(34) + "ВИЛС""", Истина);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	КонецЕсли;
	Элементы.ПарольАрхива.Видимость = Архивировать;
	Если Не ЗначениеЗаполнено(ШапкаПисьма) Тогда
		ШапкаПисьма = "
		|Добрый день, [Получатель]
		|
		|Вам сформирован расчетный листок (см. вложение)
		|";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПодписьПисьма) Тогда
		ПодписьПисьма = "
		|С уважением,
		|[Автор]
		|[ДатаВыполнения(ДЛФ='DD')]
		|";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаПодбораНаСервере(Знач ВыбрСотрудники)
	
	Модифицированность = Истина;
	
	Если ТипЗнч(ВыбрСотрудники) <> Тип("Массив") Тогда
		ВыбрСотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбрСотрудники);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КИ.Ссылка КАК ФизическоеЛицо,
	|	ВЫРАЗИТЬ(КИ.Представление КАК СТРОКА(1000)) КАК Адрес,
   	|	Документы.Серия КАК Серия,
   	|	Документы.Номер КАК Номер
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КИ
	|		ПО Сотрудники.ФизическоеЛицо = КИ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
   	|				&ДатаОкончания,
   	|				ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК Документы
  	|		ПО Сотрудники.ФизическоеЛицо = Документы.Физлицо
	|ГДЕ
	|	Сотрудники.Ссылка В(&ВыбрСотрудники)
	|	И КИ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбрСотрудники", ВыбрСотрудники);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодФормирования.ДатаОкончания);
	МассивАдресов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Сотрудник Из ВыбрСотрудники Цикл
		
		СтрокиСотрудников = Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		СтрокиАдресов = МассивАдресов.НайтиСтроки(Новый Структура("ФизическоеЛицо", Сотрудник.ФизическоеЛицо));
		
		Если СтрокиСотрудников.Количество() = 0 Тогда
			НоваяСтрока = Сотрудники.Добавить();
			НоваяСтрока.Сотрудник 		= Сотрудник;
			НоваяСтрока.ФизическоеЛицо  = Сотрудник.ФизическоеЛицо;
			Если Не СтрокиАдресов.Количество() = 0 Тогда
				НоваяСтрока.Адрес		= СтрокиАдресов[0].Адрес;
				Если ЗначениеЗаполнено(НоваяСтрока.Адрес) Тогда
					НоваяСтрока.Пометка	= Истина;
				КонецЕсли; 
				НоваяСтрока.ПарольАрхива = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1%2';
																													|en = '%1%2.'"),
																												СтрокиАдресов[0].Серия,
																												СтрокиАдресов[0].Номер),
														" ", "");
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСотрудников(Команда)
	
	ПараметрыОткрытия = Неопределено;
	Подразделение	  = Неопределено;	
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники,
		Организация, 
		Подразделение,
		ПериодФормирования.ДатаНачала,
		ПериодФормирования.ДатаОкончания, 
		Истина, 
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковФизическоеЛицоПриИзменении(Элемент)
	Идентификатор = Элементы.Сотрудники.ТекущиеДанные.ПолучитьИдентификатор();
	ЗаполнитьЭлектроннуюПочту(Идентификатор);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлектроннуюПочту(Идентификатор)
	ТекущиеДанные = Сотрудники.НайтиПоИдентификатору(Идентификатор);
	Модифицированность = Истина;
	Запрос = Новый Запрос();
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КИ.Ссылка КАК ФизическоеЛицо,
	|	ВЫРАЗИТЬ(КИ.Представление КАК СТРОКА(1000)) КАК Адрес,
   	|	Сотрудники.Ссылка КАК Сотрудник,
   	|	Документы.Серия КАК Серия,
   	|	Документы.Номер КАК Номер
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КИ
   	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
   	|		ПО КИ.Ссылка = Сотрудники.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
   	|				&ДатаОкончания,
   	|				Физлицо = &ВыбрСотрудник
   	|					И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК Документы
  	|		ПО КИ.Ссылка = Документы.Физлицо   	
	|ГДЕ
	|	КИ.Ссылка = &ВыбрСотрудник
	|	И КИ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВыбрСотрудник", ТекущиеДанные.ФизическоеЛицо);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодФормирования.ДатаОкончания);
	МассивАдресов = Запрос.Выполнить().Выгрузить();
	
	Если Не МассивАдресов.Количество() = 0 Тогда
		ТекущиеДанные.Адрес		= МассивАдресов[0].Адрес;
		ТекущиеДанные.Сотрудник	= МассивАдресов[0].Сотрудник;
		Если ЗначениеЗаполнено(ТекущиеДанные.Адрес) Тогда
			ТекущиеДанные.Пометка = Истина;
		КонецЕсли; 
		ТекущиеДанные.ПарольАрхива = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1%2';
																													|en = '%1%2.'"),
																												МассивАдресов[0].Серия,
																												МассивАдресов[0].Номер),
														" ", "");

	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьНаСервере()
	ОтчетыДляРассылки  = Новый ТаблицаЗначений;
	Колонки = ОтчетыДляРассылки.Колонки;
	Колонки.Добавить("Отчет", Новый ОписаниеТипов("СправочникСсылка.ВариантыОтчетов"));
	Колонки.Добавить("ОтправлятьЕслиПустой", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Настройки");
	//       * Форматы - Массив из ПеречислениеСсылка.ФорматыСохраненияОтчетов -
	//            Форматы, в которых необходимо сохранить и отправить отчет.
	Колонки.Добавить("Форматы", Новый ОписаниеТипов("Массив"));
	//   ПараметрыДоставки - Структура - настройки транспорта (способа доставки) отчетов.
	//     Набор реквизитов может отличаться для разных способов доставки:
	Колонки.Добавить("ПараметрыДоставки", Новый ОписаниеТипов("Структура"));
	 
	СтрокаОтчетов = ОтчетыДляРассылки.Добавить();
	
	СтрокаОтчетов.Форматы = Новый Массив();
	
	Если ВидВложенияPDF Тогда
		СтрокаОтчетов.Форматы.Добавить(Перечисления.ФорматыСохраненияОтчетов.PDF);
	КонецЕсли; 
	Если ВидВложенияXLS Тогда
		СтрокаОтчетов.Форматы.Добавить(Перечисления.ФорматыСохраненияОтчетов.XLS);
	КонецЕсли; 
	Если ВидВложенияXLSX Тогда
		СтрокаОтчетов.Форматы.Добавить(Перечисления.ФорматыСохраненияОтчетов.XLSX);
	КонецЕсли; 
	Если ВидВложенияDOCX Тогда
		СтрокаОтчетов.Форматы.Добавить(Перечисления.ФорматыСохраненияОтчетов.DOCX);
	КонецЕсли; 
	Если ВидВложенияODS Тогда
		СтрокаОтчетов.Форматы.Добавить(Перечисления.ФорматыСохраненияОтчетов.ODS);
	КонецЕсли; 
	Если Не СтрокаОтчетов.Форматы.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран формат выгрузки!'"),, "ГруппаВидВложения", "Объект");
		Возврат;
	КонецЕсли; 
	
	СтрокаОтчетов.Отчет = Справочники.ВариантыОтчетов.НайтиПоРеквизиту("КлючВарианта", "РасчетныйЛисток");
	Если Не ЗначениеЗаполнено(СтрокаОтчетов.Отчет) Тогда
	 	Возврат;
	КонецЕсли;
	СтрокаОтчетов.ОтправлятьЕслиПустой = Истина;
	СтрокаОтчетов.Настройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	Параметр = СтрокаОтчетов.Настройки.Элементы.Добавить(Тип("ЗначениеПараметраНастроекКомпоновкиДанных"));
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Период");
	Параметр.Значение = ПериодФормирования;//.ДатаНачала;
	Параметр.Использование = Истина;   
	Параметр.ИдентификаторПользовательскойНастройки = "3eec1a1c-a281-48d3-84a7-34736011bcad";
	
	ЭлементОтбора = СтрокаОтчетов.Настройки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
	ЭлементОтбора.ПравоеЗначение = Организация;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ИдентификаторПользовательскойНастройки = "d437e30d-b035-4b51-a167-ffdd29bbb054";
	
	ЭлементОтбора = СтрокаОтчетов.Настройки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФизическоеЛицо");
	ЭлементОтбора.ПравоеЗначение = "[Получатель]";
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ИдентификаторПользовательскойНастройки = "62c918af-be43-44a3-8bd2-9f5fe22ae585";
	
	//       * Настройки - настройки, с которыми должен сформироваться отчет.
	//           Дополнительно используется для определения принадлежности отчета к СКД.
	//           - ПользовательскиеНастройкиКомпоновкиДанных - табличный документ сформируется механизмами СКД.
	//           - Структура - Табличный документ сформируется при помощи метода "Сформировать()".
	//               *** Ключ     - Строка       - имя реквизита объекта отчета.
	//               *** Значение - Произвольный - значение реквизита объекта отчета.
	//           - Неопределено - настройки по умолчанию. Для определения принадлежности к СКД
	//               будет использован реквизит объекта "СхемаКомпоновкиДанных".
	//
	ПараметрыДоставки = Новый Структура(); 
	//     Обязательные реквизиты:
	//       * Автор - СправочникСсылка.Пользователи - автор рассылки.
	ПараметрыДоставки.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	//       * ИспользоватьПапку            - Булево - доставлять отчеты в папку подсистемы "Работа с файлами".
	ПараметрыДоставки.Вставить("ИспользоватьПапку", Ложь);
	//       * ИспользоватьСетевойКаталог   - Булево - доставлять отчеты в папку файловой системы.
	ПараметрыДоставки.Вставить("ИспользоватьСетевойКаталог", Ложь);
	//       * ИспользоватьFTPРесурс        - Булево - доставлять отчеты на FTP.
	ПараметрыДоставки.Вставить("ИспользоватьFTPРесурс", Ложь);
	//       * ИспользоватьЭлектроннуюПочту - Булево - доставлять отчеты по электронной почте.
	ПараметрыДоставки.Вставить("ИспользоватьЭлектроннуюПочту", Истина);
	//
	//     Обязательные реквизиты когда { ИспользоватьЭлектроннуюПочту = Истина }:
	//       * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты -
	//           Учетная запись для отправки почтового сообщения.
	ПараметрыДоставки.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	//       * Получатели - Соответствие - набор получателей и их e-mail адресов.
	//           ** Ключ - СправочникСсылка - получатель.
	//           ** Значение - Строка - набор e-mail адресов получателя в строке с разделителями.
	ПараметрыДоставки.Вставить("Персонализирована", Истина);    						//       * Персонализирована - Булево - рассылка персонализирована получателями.
	ПараметрыДоставки.Вставить("ТранслитерироватьИменаФайлов", Истина);   				//       * ТранслитерироватьИменаФайлов - Булево - признак необходимости транслитерации имен файлов отчетов рассылки.
	ПараметрыДоставки.Вставить("ШаблонТемы", НСтр("ru = 'Добрый день, [Получатель]'"));
	ПараметрыДоставки.Вставить("ШаблонТекста", ШапкаПисьма + Символы.ПС + ПодписьПисьма);
	
	//
	//     Необязательные реквизиты:
	ПараметрыДоставки.Вставить("Архивировать", Архивировать);    						//       * Архивировать - Булево - архивировать все файлы сформированных отчетов в один архив.
	//                                 Архивация может потребоваться, например, при рассылке графиков в формате html.
	//       * ИмяАрхива    - Строка - имя архива.
	ПараметрыДоставки.Вставить("ПарольАрхива", ПарольАрхива);//       * ПарольАрхива - Строка - пароль архива.
	//
	
	Получатели = Новый Соответствие();
	ПаролиПолучателей = Новый Соответствие();
	Для каждого ЭлементСписка Из Сотрудники Цикл
		Если Не ЭлементСписка.Пометка Тогда Продолжить; КонецЕсли;
		Получатели.Вставить(ЭлементСписка.ФизическоеЛицо, ЭлементСписка.Адрес); //  Сотрудник
		Если Архивировать Тогда
			ПаролиПолучателей.Вставить(ЭлементСписка.ФизическоеЛицо, ЭлементСписка.ПарольАрхива); //  Сотрудник
		КонецЕсли; 
	КонецЦикла;	  
	ПараметрыДоставки.Вставить("Получатели"				, Получатели);
	Если Архивировать Тогда
		ПараметрыДоставки.Вставить("ПаролиПолучателей"	, ПаролиПолучателей);
	КонецЕсли; 

	Если Не ПараметрыДоставки.Получатели.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбраны получатели отчетов!'"),, "Сотрудники", "Объект");
		Возврат;
	КонецЕсли; 
	
	РассылкаОтчетов.ВыполнитьРассылку(ОтчетыДляРассылки, ПараметрыДоставки); 
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	ОтправитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковАдресПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	ТекущиеДанные.Пометка = ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) и ЗначениеЗаполнено(ТекущиеДанные.Адрес);
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьПриИзменении(Элемент)
	Элементы.ПарольАрхива.Видимость = Архивировать;
	Если Не Архивировать Тогда
		ПарольАрхива = "";
	КонецЕсли; 
КонецПроцедуры

